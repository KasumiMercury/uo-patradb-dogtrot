// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/category_description_template"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// CategoryDescriptionTemplateQuery is the builder for querying Category_description_template entities.
type CategoryDescriptionTemplateQuery struct {
	config
	ctx              *QueryContext
	order            []category_description_template.OrderOption
	inters           []Interceptor
	predicates       []predicate.Category_description_template
	withDescriptions *DescriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CategoryDescriptionTemplateQuery builder.
func (cdtq *CategoryDescriptionTemplateQuery) Where(ps ...predicate.Category_description_template) *CategoryDescriptionTemplateQuery {
	cdtq.predicates = append(cdtq.predicates, ps...)
	return cdtq
}

// Limit the number of records to be returned by this query.
func (cdtq *CategoryDescriptionTemplateQuery) Limit(limit int) *CategoryDescriptionTemplateQuery {
	cdtq.ctx.Limit = &limit
	return cdtq
}

// Offset to start from.
func (cdtq *CategoryDescriptionTemplateQuery) Offset(offset int) *CategoryDescriptionTemplateQuery {
	cdtq.ctx.Offset = &offset
	return cdtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cdtq *CategoryDescriptionTemplateQuery) Unique(unique bool) *CategoryDescriptionTemplateQuery {
	cdtq.ctx.Unique = &unique
	return cdtq
}

// Order specifies how the records should be ordered.
func (cdtq *CategoryDescriptionTemplateQuery) Order(o ...category_description_template.OrderOption) *CategoryDescriptionTemplateQuery {
	cdtq.order = append(cdtq.order, o...)
	return cdtq
}

// QueryDescriptions chains the current query on the "descriptions" edge.
func (cdtq *CategoryDescriptionTemplateQuery) QueryDescriptions() *DescriptionQuery {
	query := (&DescriptionClient{config: cdtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cdtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cdtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(category_description_template.Table, category_description_template.FieldID, selector),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category_description_template.DescriptionsTable, category_description_template.DescriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cdtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Category_description_template entity from the query.
// Returns a *NotFoundError when no Category_description_template was found.
func (cdtq *CategoryDescriptionTemplateQuery) First(ctx context.Context) (*Category_description_template, error) {
	nodes, err := cdtq.Limit(1).All(setContextOp(ctx, cdtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{category_description_template.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) FirstX(ctx context.Context) *Category_description_template {
	node, err := cdtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Category_description_template ID from the query.
// Returns a *NotFoundError when no Category_description_template ID was found.
func (cdtq *CategoryDescriptionTemplateQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cdtq.Limit(1).IDs(setContextOp(ctx, cdtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{category_description_template.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cdtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Category_description_template entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Category_description_template entity is found.
// Returns a *NotFoundError when no Category_description_template entities are found.
func (cdtq *CategoryDescriptionTemplateQuery) Only(ctx context.Context) (*Category_description_template, error) {
	nodes, err := cdtq.Limit(2).All(setContextOp(ctx, cdtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{category_description_template.Label}
	default:
		return nil, &NotSingularError{category_description_template.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) OnlyX(ctx context.Context) *Category_description_template {
	node, err := cdtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Category_description_template ID in the query.
// Returns a *NotSingularError when more than one Category_description_template ID is found.
// Returns a *NotFoundError when no entities are found.
func (cdtq *CategoryDescriptionTemplateQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cdtq.Limit(2).IDs(setContextOp(ctx, cdtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{category_description_template.Label}
	default:
		err = &NotSingularError{category_description_template.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cdtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Category_description_templates.
func (cdtq *CategoryDescriptionTemplateQuery) All(ctx context.Context) ([]*Category_description_template, error) {
	ctx = setContextOp(ctx, cdtq.ctx, "All")
	if err := cdtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Category_description_template, *CategoryDescriptionTemplateQuery]()
	return withInterceptors[[]*Category_description_template](ctx, cdtq, qr, cdtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) AllX(ctx context.Context) []*Category_description_template {
	nodes, err := cdtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Category_description_template IDs.
func (cdtq *CategoryDescriptionTemplateQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cdtq.ctx.Unique == nil && cdtq.path != nil {
		cdtq.Unique(true)
	}
	ctx = setContextOp(ctx, cdtq.ctx, "IDs")
	if err = cdtq.Select(category_description_template.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cdtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cdtq *CategoryDescriptionTemplateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cdtq.ctx, "Count")
	if err := cdtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cdtq, querierCount[*CategoryDescriptionTemplateQuery](), cdtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) CountX(ctx context.Context) int {
	count, err := cdtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cdtq *CategoryDescriptionTemplateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cdtq.ctx, "Exist")
	switch _, err := cdtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cdtq *CategoryDescriptionTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := cdtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CategoryDescriptionTemplateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cdtq *CategoryDescriptionTemplateQuery) Clone() *CategoryDescriptionTemplateQuery {
	if cdtq == nil {
		return nil
	}
	return &CategoryDescriptionTemplateQuery{
		config:           cdtq.config,
		ctx:              cdtq.ctx.Clone(),
		order:            append([]category_description_template.OrderOption{}, cdtq.order...),
		inters:           append([]Interceptor{}, cdtq.inters...),
		predicates:       append([]predicate.Category_description_template{}, cdtq.predicates...),
		withDescriptions: cdtq.withDescriptions.Clone(),
		// clone intermediate query.
		sql:  cdtq.sql.Clone(),
		path: cdtq.path,
	}
}

// WithDescriptions tells the query-builder to eager-load the nodes that are connected to
// the "descriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (cdtq *CategoryDescriptionTemplateQuery) WithDescriptions(opts ...func(*DescriptionQuery)) *CategoryDescriptionTemplateQuery {
	query := (&DescriptionClient{config: cdtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cdtq.withDescriptions = query
	return cdtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Text string `json:"text,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CategoryDescriptionTemplate.Query().
//		GroupBy(category_description_template.FieldText).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cdtq *CategoryDescriptionTemplateQuery) GroupBy(field string, fields ...string) *CategoryDescriptionTemplateGroupBy {
	cdtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CategoryDescriptionTemplateGroupBy{build: cdtq}
	grbuild.flds = &cdtq.ctx.Fields
	grbuild.label = category_description_template.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Text string `json:"text,omitempty"`
//	}
//
//	client.CategoryDescriptionTemplate.Query().
//		Select(category_description_template.FieldText).
//		Scan(ctx, &v)
func (cdtq *CategoryDescriptionTemplateQuery) Select(fields ...string) *CategoryDescriptionTemplateSelect {
	cdtq.ctx.Fields = append(cdtq.ctx.Fields, fields...)
	sbuild := &CategoryDescriptionTemplateSelect{CategoryDescriptionTemplateQuery: cdtq}
	sbuild.label = category_description_template.Label
	sbuild.flds, sbuild.scan = &cdtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CategoryDescriptionTemplateSelect configured with the given aggregations.
func (cdtq *CategoryDescriptionTemplateQuery) Aggregate(fns ...AggregateFunc) *CategoryDescriptionTemplateSelect {
	return cdtq.Select().Aggregate(fns...)
}

func (cdtq *CategoryDescriptionTemplateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cdtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cdtq); err != nil {
				return err
			}
		}
	}
	for _, f := range cdtq.ctx.Fields {
		if !category_description_template.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cdtq.path != nil {
		prev, err := cdtq.path(ctx)
		if err != nil {
			return err
		}
		cdtq.sql = prev
	}
	return nil
}

func (cdtq *CategoryDescriptionTemplateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Category_description_template, error) {
	var (
		nodes       = []*Category_description_template{}
		_spec       = cdtq.querySpec()
		loadedTypes = [1]bool{
			cdtq.withDescriptions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Category_description_template).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Category_description_template{config: cdtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cdtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cdtq.withDescriptions; query != nil {
		if err := cdtq.loadDescriptions(ctx, query, nodes,
			func(n *Category_description_template) { n.Edges.Descriptions = []*Description{} },
			func(n *Category_description_template, e *Description) {
				n.Edges.Descriptions = append(n.Edges.Descriptions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cdtq *CategoryDescriptionTemplateQuery) loadDescriptions(ctx context.Context, query *DescriptionQuery, nodes []*Category_description_template, init func(*Category_description_template), assign func(*Category_description_template, *Description)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Category_description_template)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Description(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(category_description_template.DescriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.category_template_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "category_template_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "category_template_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cdtq *CategoryDescriptionTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cdtq.querySpec()
	_spec.Node.Columns = cdtq.ctx.Fields
	if len(cdtq.ctx.Fields) > 0 {
		_spec.Unique = cdtq.ctx.Unique != nil && *cdtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cdtq.driver, _spec)
}

func (cdtq *CategoryDescriptionTemplateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(category_description_template.Table, category_description_template.Columns, sqlgraph.NewFieldSpec(category_description_template.FieldID, field.TypeString))
	_spec.From = cdtq.sql
	if unique := cdtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cdtq.path != nil {
		_spec.Unique = true
	}
	if fields := cdtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category_description_template.FieldID)
		for i := range fields {
			if fields[i] != category_description_template.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cdtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cdtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cdtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cdtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cdtq *CategoryDescriptionTemplateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cdtq.driver.Dialect())
	t1 := builder.Table(category_description_template.Table)
	columns := cdtq.ctx.Fields
	if len(columns) == 0 {
		columns = category_description_template.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cdtq.sql != nil {
		selector = cdtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cdtq.ctx.Unique != nil && *cdtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cdtq.predicates {
		p(selector)
	}
	for _, p := range cdtq.order {
		p(selector)
	}
	if offset := cdtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cdtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CategoryDescriptionTemplateGroupBy is the group-by builder for Category_description_template entities.
type CategoryDescriptionTemplateGroupBy struct {
	selector
	build *CategoryDescriptionTemplateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cdtgb *CategoryDescriptionTemplateGroupBy) Aggregate(fns ...AggregateFunc) *CategoryDescriptionTemplateGroupBy {
	cdtgb.fns = append(cdtgb.fns, fns...)
	return cdtgb
}

// Scan applies the selector query and scans the result into the given value.
func (cdtgb *CategoryDescriptionTemplateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cdtgb.build.ctx, "GroupBy")
	if err := cdtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoryDescriptionTemplateQuery, *CategoryDescriptionTemplateGroupBy](ctx, cdtgb.build, cdtgb, cdtgb.build.inters, v)
}

func (cdtgb *CategoryDescriptionTemplateGroupBy) sqlScan(ctx context.Context, root *CategoryDescriptionTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cdtgb.fns))
	for _, fn := range cdtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cdtgb.flds)+len(cdtgb.fns))
		for _, f := range *cdtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cdtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cdtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CategoryDescriptionTemplateSelect is the builder for selecting fields of CategoryDescriptionTemplate entities.
type CategoryDescriptionTemplateSelect struct {
	*CategoryDescriptionTemplateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cdts *CategoryDescriptionTemplateSelect) Aggregate(fns ...AggregateFunc) *CategoryDescriptionTemplateSelect {
	cdts.fns = append(cdts.fns, fns...)
	return cdts
}

// Scan applies the selector query and scans the result into the given value.
func (cdts *CategoryDescriptionTemplateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cdts.ctx, "Select")
	if err := cdts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CategoryDescriptionTemplateQuery, *CategoryDescriptionTemplateSelect](ctx, cdts.CategoryDescriptionTemplateQuery, cdts, cdts.inters, v)
}

func (cdts *CategoryDescriptionTemplateSelect) sqlScan(ctx context.Context, root *CategoryDescriptionTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cdts.fns))
	for _, fn := range cdts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cdts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cdts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
