// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/category_description_template"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// CategoryDescriptionTemplateUpdate is the builder for updating Category_description_template entities.
type CategoryDescriptionTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryDescriptionTemplateMutation
}

// Where appends a list predicates to the CategoryDescriptionTemplateUpdate builder.
func (cdtu *CategoryDescriptionTemplateUpdate) Where(ps ...predicate.Category_description_template) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.Where(ps...)
	return cdtu
}

// SetText sets the "text" field.
func (cdtu *CategoryDescriptionTemplateUpdate) SetText(s string) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.SetText(s)
	return cdtu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cdtu *CategoryDescriptionTemplateUpdate) SetNillableText(s *string) *CategoryDescriptionTemplateUpdate {
	if s != nil {
		cdtu.SetText(*s)
	}
	return cdtu
}

// SetStartUseAt sets the "start_use_at" field.
func (cdtu *CategoryDescriptionTemplateUpdate) SetStartUseAt(t time.Time) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.SetStartUseAt(t)
	return cdtu
}

// SetNillableStartUseAt sets the "start_use_at" field if the given value is not nil.
func (cdtu *CategoryDescriptionTemplateUpdate) SetNillableStartUseAt(t *time.Time) *CategoryDescriptionTemplateUpdate {
	if t != nil {
		cdtu.SetStartUseAt(*t)
	}
	return cdtu
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (cdtu *CategoryDescriptionTemplateUpdate) ClearStartUseAt() *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.ClearStartUseAt()
	return cdtu
}

// SetLastUseAt sets the "last_use_at" field.
func (cdtu *CategoryDescriptionTemplateUpdate) SetLastUseAt(t time.Time) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.SetLastUseAt(t)
	return cdtu
}

// SetNillableLastUseAt sets the "last_use_at" field if the given value is not nil.
func (cdtu *CategoryDescriptionTemplateUpdate) SetNillableLastUseAt(t *time.Time) *CategoryDescriptionTemplateUpdate {
	if t != nil {
		cdtu.SetLastUseAt(*t)
	}
	return cdtu
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (cdtu *CategoryDescriptionTemplateUpdate) ClearLastUseAt() *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.ClearLastUseAt()
	return cdtu
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (cdtu *CategoryDescriptionTemplateUpdate) AddDescriptionIDs(ids ...pulid.ID) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.AddDescriptionIDs(ids...)
	return cdtu
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (cdtu *CategoryDescriptionTemplateUpdate) AddDescriptions(d ...*Description) *CategoryDescriptionTemplateUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cdtu.AddDescriptionIDs(ids...)
}

// Mutation returns the CategoryDescriptionTemplateMutation object of the builder.
func (cdtu *CategoryDescriptionTemplateUpdate) Mutation() *CategoryDescriptionTemplateMutation {
	return cdtu.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (cdtu *CategoryDescriptionTemplateUpdate) ClearDescriptions() *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.ClearDescriptions()
	return cdtu
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (cdtu *CategoryDescriptionTemplateUpdate) RemoveDescriptionIDs(ids ...pulid.ID) *CategoryDescriptionTemplateUpdate {
	cdtu.mutation.RemoveDescriptionIDs(ids...)
	return cdtu
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (cdtu *CategoryDescriptionTemplateUpdate) RemoveDescriptions(d ...*Description) *CategoryDescriptionTemplateUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cdtu.RemoveDescriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdtu *CategoryDescriptionTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cdtu.sqlSave, cdtu.mutation, cdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdtu *CategoryDescriptionTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := cdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdtu *CategoryDescriptionTemplateUpdate) Exec(ctx context.Context) error {
	_, err := cdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdtu *CategoryDescriptionTemplateUpdate) ExecX(ctx context.Context) {
	if err := cdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cdtu *CategoryDescriptionTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category_description_template.Table, category_description_template.Columns, sqlgraph.NewFieldSpec(category_description_template.FieldID, field.TypeString))
	if ps := cdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdtu.mutation.Text(); ok {
		_spec.SetField(category_description_template.FieldText, field.TypeString, value)
	}
	if value, ok := cdtu.mutation.StartUseAt(); ok {
		_spec.SetField(category_description_template.FieldStartUseAt, field.TypeTime, value)
	}
	if cdtu.mutation.StartUseAtCleared() {
		_spec.ClearField(category_description_template.FieldStartUseAt, field.TypeTime)
	}
	if value, ok := cdtu.mutation.LastUseAt(); ok {
		_spec.SetField(category_description_template.FieldLastUseAt, field.TypeTime, value)
	}
	if cdtu.mutation.LastUseAtCleared() {
		_spec.ClearField(category_description_template.FieldLastUseAt, field.TypeTime)
	}
	if cdtu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdtu.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !cdtu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdtu.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category_description_template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdtu.mutation.done = true
	return n, nil
}

// CategoryDescriptionTemplateUpdateOne is the builder for updating a single Category_description_template entity.
type CategoryDescriptionTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryDescriptionTemplateMutation
}

// SetText sets the "text" field.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetText(s string) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.SetText(s)
	return cdtuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetNillableText(s *string) *CategoryDescriptionTemplateUpdateOne {
	if s != nil {
		cdtuo.SetText(*s)
	}
	return cdtuo
}

// SetStartUseAt sets the "start_use_at" field.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetStartUseAt(t time.Time) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.SetStartUseAt(t)
	return cdtuo
}

// SetNillableStartUseAt sets the "start_use_at" field if the given value is not nil.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetNillableStartUseAt(t *time.Time) *CategoryDescriptionTemplateUpdateOne {
	if t != nil {
		cdtuo.SetStartUseAt(*t)
	}
	return cdtuo
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) ClearStartUseAt() *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.ClearStartUseAt()
	return cdtuo
}

// SetLastUseAt sets the "last_use_at" field.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetLastUseAt(t time.Time) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.SetLastUseAt(t)
	return cdtuo
}

// SetNillableLastUseAt sets the "last_use_at" field if the given value is not nil.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SetNillableLastUseAt(t *time.Time) *CategoryDescriptionTemplateUpdateOne {
	if t != nil {
		cdtuo.SetLastUseAt(*t)
	}
	return cdtuo
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) ClearLastUseAt() *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.ClearLastUseAt()
	return cdtuo
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) AddDescriptionIDs(ids ...pulid.ID) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.AddDescriptionIDs(ids...)
	return cdtuo
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) AddDescriptions(d ...*Description) *CategoryDescriptionTemplateUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cdtuo.AddDescriptionIDs(ids...)
}

// Mutation returns the CategoryDescriptionTemplateMutation object of the builder.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) Mutation() *CategoryDescriptionTemplateMutation {
	return cdtuo.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) ClearDescriptions() *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.ClearDescriptions()
	return cdtuo
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) RemoveDescriptionIDs(ids ...pulid.ID) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.RemoveDescriptionIDs(ids...)
	return cdtuo
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) RemoveDescriptions(d ...*Description) *CategoryDescriptionTemplateUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cdtuo.RemoveDescriptionIDs(ids...)
}

// Where appends a list predicates to the CategoryDescriptionTemplateUpdate builder.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) Where(ps ...predicate.Category_description_template) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.mutation.Where(ps...)
	return cdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) Select(field string, fields ...string) *CategoryDescriptionTemplateUpdateOne {
	cdtuo.fields = append([]string{field}, fields...)
	return cdtuo
}

// Save executes the query and returns the updated Category_description_template entity.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) Save(ctx context.Context) (*Category_description_template, error) {
	return withHooks(ctx, cdtuo.sqlSave, cdtuo.mutation, cdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) SaveX(ctx context.Context) *Category_description_template {
	node, err := cdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := cdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdtuo *CategoryDescriptionTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := cdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cdtuo *CategoryDescriptionTemplateUpdateOne) sqlSave(ctx context.Context) (_node *Category_description_template, err error) {
	_spec := sqlgraph.NewUpdateSpec(category_description_template.Table, category_description_template.Columns, sqlgraph.NewFieldSpec(category_description_template.FieldID, field.TypeString))
	id, ok := cdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category_description_template.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category_description_template.FieldID)
		for _, f := range fields {
			if !category_description_template.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category_description_template.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdtuo.mutation.Text(); ok {
		_spec.SetField(category_description_template.FieldText, field.TypeString, value)
	}
	if value, ok := cdtuo.mutation.StartUseAt(); ok {
		_spec.SetField(category_description_template.FieldStartUseAt, field.TypeTime, value)
	}
	if cdtuo.mutation.StartUseAtCleared() {
		_spec.ClearField(category_description_template.FieldStartUseAt, field.TypeTime)
	}
	if value, ok := cdtuo.mutation.LastUseAt(); ok {
		_spec.SetField(category_description_template.FieldLastUseAt, field.TypeTime, value)
	}
	if cdtuo.mutation.LastUseAtCleared() {
		_spec.ClearField(category_description_template.FieldLastUseAt, field.TypeTime)
	}
	if cdtuo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdtuo.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !cdtuo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdtuo.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   category_description_template.DescriptionsTable,
			Columns: []string{category_description_template.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Category_description_template{config: cdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category_description_template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cdtuo.mutation.done = true
	return _node, nil
}
