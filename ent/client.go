// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/migrate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/category_description_template"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/channel"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description_change"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/periodic_description_template"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_disallow_range"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_play_range"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_title_change"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Category_description_template is the client for interacting with the Category_description_template builders.
	Category_description_template *CategoryDescriptionTemplateClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// Description is the client for interacting with the Description builders.
	Description *DescriptionClient
	// Description_change is the client for interacting with the Description_change builders.
	Description_change *DescriptionChangeClient
	// Periodic_description_template is the client for interacting with the Periodic_description_template builders.
	Periodic_description_template *PeriodicDescriptionTemplateClient
	// Video is the client for interacting with the Video builders.
	Video *VideoClient
	// Video_disallow_range is the client for interacting with the Video_disallow_range builders.
	Video_disallow_range *VideoDisallowRangeClient
	// Video_play_range is the client for interacting with the Video_play_range builders.
	Video_play_range *VideoPlayRangeClient
	// Video_title_change is the client for interacting with the Video_title_change builders.
	Video_title_change *VideoTitleChangeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Category_description_template = NewCategoryDescriptionTemplateClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.Description = NewDescriptionClient(c.config)
	c.Description_change = NewDescriptionChangeClient(c.config)
	c.Periodic_description_template = NewPeriodicDescriptionTemplateClient(c.config)
	c.Video = NewVideoClient(c.config)
	c.Video_disallow_range = NewVideoDisallowRangeClient(c.config)
	c.Video_play_range = NewVideoPlayRangeClient(c.config)
	c.Video_title_change = NewVideoTitleChangeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		Category_description_template: NewCategoryDescriptionTemplateClient(cfg),
		Channel:                       NewChannelClient(cfg),
		Description:                   NewDescriptionClient(cfg),
		Description_change:            NewDescriptionChangeClient(cfg),
		Periodic_description_template: NewPeriodicDescriptionTemplateClient(cfg),
		Video:                         NewVideoClient(cfg),
		Video_disallow_range:          NewVideoDisallowRangeClient(cfg),
		Video_play_range:              NewVideoPlayRangeClient(cfg),
		Video_title_change:            NewVideoTitleChangeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		Category_description_template: NewCategoryDescriptionTemplateClient(cfg),
		Channel:                       NewChannelClient(cfg),
		Description:                   NewDescriptionClient(cfg),
		Description_change:            NewDescriptionChangeClient(cfg),
		Periodic_description_template: NewPeriodicDescriptionTemplateClient(cfg),
		Video:                         NewVideoClient(cfg),
		Video_disallow_range:          NewVideoDisallowRangeClient(cfg),
		Video_play_range:              NewVideoPlayRangeClient(cfg),
		Video_title_change:            NewVideoTitleChangeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Category_description_template.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Category_description_template, c.Channel, c.Description, c.Description_change,
		c.Periodic_description_template, c.Video, c.Video_disallow_range,
		c.Video_play_range, c.Video_title_change,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Category_description_template, c.Channel, c.Description, c.Description_change,
		c.Periodic_description_template, c.Video, c.Video_disallow_range,
		c.Video_play_range, c.Video_title_change,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CategoryDescriptionTemplateMutation:
		return c.Category_description_template.mutate(ctx, m)
	case *ChannelMutation:
		return c.Channel.mutate(ctx, m)
	case *DescriptionMutation:
		return c.Description.mutate(ctx, m)
	case *DescriptionChangeMutation:
		return c.Description_change.mutate(ctx, m)
	case *PeriodicDescriptionTemplateMutation:
		return c.Periodic_description_template.mutate(ctx, m)
	case *VideoMutation:
		return c.Video.mutate(ctx, m)
	case *VideoDisallowRangeMutation:
		return c.Video_disallow_range.mutate(ctx, m)
	case *VideoPlayRangeMutation:
		return c.Video_play_range.mutate(ctx, m)
	case *VideoTitleChangeMutation:
		return c.Video_title_change.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CategoryDescriptionTemplateClient is a client for the Category_description_template schema.
type CategoryDescriptionTemplateClient struct {
	config
}

// NewCategoryDescriptionTemplateClient returns a client for the Category_description_template from the given config.
func NewCategoryDescriptionTemplateClient(c config) *CategoryDescriptionTemplateClient {
	return &CategoryDescriptionTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category_description_template.Hooks(f(g(h())))`.
func (c *CategoryDescriptionTemplateClient) Use(hooks ...Hook) {
	c.hooks.Category_description_template = append(c.hooks.Category_description_template, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category_description_template.Intercept(f(g(h())))`.
func (c *CategoryDescriptionTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category_description_template = append(c.inters.Category_description_template, interceptors...)
}

// Create returns a builder for creating a Category_description_template entity.
func (c *CategoryDescriptionTemplateClient) Create() *CategoryDescriptionTemplateCreate {
	mutation := newCategoryDescriptionTemplateMutation(c.config, OpCreate)
	return &CategoryDescriptionTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category_description_template entities.
func (c *CategoryDescriptionTemplateClient) CreateBulk(builders ...*CategoryDescriptionTemplateCreate) *CategoryDescriptionTemplateCreateBulk {
	return &CategoryDescriptionTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryDescriptionTemplateClient) MapCreateBulk(slice any, setFunc func(*CategoryDescriptionTemplateCreate, int)) *CategoryDescriptionTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryDescriptionTemplateCreateBulk{err: fmt.Errorf("calling to CategoryDescriptionTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryDescriptionTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryDescriptionTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category_description_template.
func (c *CategoryDescriptionTemplateClient) Update() *CategoryDescriptionTemplateUpdate {
	mutation := newCategoryDescriptionTemplateMutation(c.config, OpUpdate)
	return &CategoryDescriptionTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryDescriptionTemplateClient) UpdateOne(cdt *Category_description_template) *CategoryDescriptionTemplateUpdateOne {
	mutation := newCategoryDescriptionTemplateMutation(c.config, OpUpdateOne, withCategory_description_template(cdt))
	return &CategoryDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryDescriptionTemplateClient) UpdateOneID(id pulid.ID) *CategoryDescriptionTemplateUpdateOne {
	mutation := newCategoryDescriptionTemplateMutation(c.config, OpUpdateOne, withCategory_description_templateID(id))
	return &CategoryDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category_description_template.
func (c *CategoryDescriptionTemplateClient) Delete() *CategoryDescriptionTemplateDelete {
	mutation := newCategoryDescriptionTemplateMutation(c.config, OpDelete)
	return &CategoryDescriptionTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryDescriptionTemplateClient) DeleteOne(cdt *Category_description_template) *CategoryDescriptionTemplateDeleteOne {
	return c.DeleteOneID(cdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryDescriptionTemplateClient) DeleteOneID(id pulid.ID) *CategoryDescriptionTemplateDeleteOne {
	builder := c.Delete().Where(category_description_template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDescriptionTemplateDeleteOne{builder}
}

// Query returns a query builder for Category_description_template.
func (c *CategoryDescriptionTemplateClient) Query() *CategoryDescriptionTemplateQuery {
	return &CategoryDescriptionTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryDescriptionTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a Category_description_template entity by its id.
func (c *CategoryDescriptionTemplateClient) Get(ctx context.Context, id pulid.ID) (*Category_description_template, error) {
	return c.Query().Where(category_description_template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryDescriptionTemplateClient) GetX(ctx context.Context, id pulid.ID) *Category_description_template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptions queries the descriptions edge of a Category_description_template.
func (c *CategoryDescriptionTemplateClient) QueryDescriptions(cdt *Category_description_template) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category_description_template.Table, category_description_template.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category_description_template.DescriptionsTable, category_description_template.DescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(cdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryDescriptionTemplateClient) Hooks() []Hook {
	return c.hooks.Category_description_template
}

// Interceptors returns the client interceptors.
func (c *CategoryDescriptionTemplateClient) Interceptors() []Interceptor {
	return c.inters.Category_description_template
}

func (c *CategoryDescriptionTemplateClient) mutate(ctx context.Context, m *CategoryDescriptionTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryDescriptionTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryDescriptionTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDescriptionTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category_description_template mutation op: %q", m.Op())
	}
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `channel.Intercept(f(g(h())))`.
func (c *ChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Channel = append(c.inters.Channel, interceptors...)
}

// Create returns a builder for creating a Channel entity.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChannelClient) MapCreateBulk(slice any, setFunc func(*ChannelCreate, int)) *ChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChannelCreateBulk{err: fmt.Errorf("calling to ChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id pulid.ID) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChannelClient) DeleteOneID(id pulid.ID) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id pulid.ID) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id pulid.ID) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideos queries the videos edge of a Channel.
func (c *ChannelClient) QueryVideos(ch *Channel) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, channel.VideosTable, channel.VideosPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// Interceptors returns the client interceptors.
func (c *ChannelClient) Interceptors() []Interceptor {
	return c.inters.Channel
}

func (c *ChannelClient) mutate(ctx context.Context, m *ChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Channel mutation op: %q", m.Op())
	}
}

// DescriptionClient is a client for the Description schema.
type DescriptionClient struct {
	config
}

// NewDescriptionClient returns a client for the Description from the given config.
func NewDescriptionClient(c config) *DescriptionClient {
	return &DescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `description.Hooks(f(g(h())))`.
func (c *DescriptionClient) Use(hooks ...Hook) {
	c.hooks.Description = append(c.hooks.Description, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `description.Intercept(f(g(h())))`.
func (c *DescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Description = append(c.inters.Description, interceptors...)
}

// Create returns a builder for creating a Description entity.
func (c *DescriptionClient) Create() *DescriptionCreate {
	mutation := newDescriptionMutation(c.config, OpCreate)
	return &DescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Description entities.
func (c *DescriptionClient) CreateBulk(builders ...*DescriptionCreate) *DescriptionCreateBulk {
	return &DescriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DescriptionClient) MapCreateBulk(slice any, setFunc func(*DescriptionCreate, int)) *DescriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DescriptionCreateBulk{err: fmt.Errorf("calling to DescriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DescriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Description.
func (c *DescriptionClient) Update() *DescriptionUpdate {
	mutation := newDescriptionMutation(c.config, OpUpdate)
	return &DescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DescriptionClient) UpdateOne(d *Description) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescription(d))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DescriptionClient) UpdateOneID(id pulid.ID) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescriptionID(id))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Description.
func (c *DescriptionClient) Delete() *DescriptionDelete {
	mutation := newDescriptionMutation(c.config, OpDelete)
	return &DescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DescriptionClient) DeleteOne(d *Description) *DescriptionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DescriptionClient) DeleteOneID(id pulid.ID) *DescriptionDeleteOne {
	builder := c.Delete().Where(description.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DescriptionDeleteOne{builder}
}

// Query returns a query builder for Description.
func (c *DescriptionClient) Query() *DescriptionQuery {
	return &DescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDescription},
		inters: c.Interceptors(),
	}
}

// Get returns a Description entity by its id.
func (c *DescriptionClient) Get(ctx context.Context, id pulid.ID) (*Description, error) {
	return c.Query().Where(description.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DescriptionClient) GetX(ctx context.Context, id pulid.ID) *Description {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideo queries the video edge of a Description.
func (c *DescriptionClient) QueryVideo(d *Description) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, description.VideoTable, description.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeriodicDescriptionTemplate queries the periodic_description_template edge of a Description.
func (c *DescriptionClient) QueryPeriodicDescriptionTemplate(d *Description) *PeriodicDescriptionTemplateQuery {
	query := (&PeriodicDescriptionTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(periodic_description_template.Table, periodic_description_template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.PeriodicDescriptionTemplateTable, description.PeriodicDescriptionTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategoryDescriptionTemplate queries the category_description_template edge of a Description.
func (c *DescriptionClient) QueryCategoryDescriptionTemplate(d *Description) *CategoryDescriptionTemplateQuery {
	query := (&CategoryDescriptionTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(category_description_template.Table, category_description_template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.CategoryDescriptionTemplateTable, description.CategoryDescriptionTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDescriptionChanges queries the description_changes edge of a Description.
func (c *DescriptionClient) QueryDescriptionChanges(d *Description) *DescriptionChangeQuery {
	query := (&DescriptionChangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(description_change.Table, description_change.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, description.DescriptionChangesTable, description.DescriptionChangesColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DescriptionClient) Hooks() []Hook {
	return c.hooks.Description
}

// Interceptors returns the client interceptors.
func (c *DescriptionClient) Interceptors() []Interceptor {
	return c.inters.Description
}

func (c *DescriptionClient) mutate(ctx context.Context, m *DescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Description mutation op: %q", m.Op())
	}
}

// DescriptionChangeClient is a client for the Description_change schema.
type DescriptionChangeClient struct {
	config
}

// NewDescriptionChangeClient returns a client for the Description_change from the given config.
func NewDescriptionChangeClient(c config) *DescriptionChangeClient {
	return &DescriptionChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `description_change.Hooks(f(g(h())))`.
func (c *DescriptionChangeClient) Use(hooks ...Hook) {
	c.hooks.Description_change = append(c.hooks.Description_change, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `description_change.Intercept(f(g(h())))`.
func (c *DescriptionChangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Description_change = append(c.inters.Description_change, interceptors...)
}

// Create returns a builder for creating a Description_change entity.
func (c *DescriptionChangeClient) Create() *DescriptionChangeCreate {
	mutation := newDescriptionChangeMutation(c.config, OpCreate)
	return &DescriptionChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Description_change entities.
func (c *DescriptionChangeClient) CreateBulk(builders ...*DescriptionChangeCreate) *DescriptionChangeCreateBulk {
	return &DescriptionChangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DescriptionChangeClient) MapCreateBulk(slice any, setFunc func(*DescriptionChangeCreate, int)) *DescriptionChangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DescriptionChangeCreateBulk{err: fmt.Errorf("calling to DescriptionChangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DescriptionChangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DescriptionChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Description_change.
func (c *DescriptionChangeClient) Update() *DescriptionChangeUpdate {
	mutation := newDescriptionChangeMutation(c.config, OpUpdate)
	return &DescriptionChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DescriptionChangeClient) UpdateOne(dc *Description_change) *DescriptionChangeUpdateOne {
	mutation := newDescriptionChangeMutation(c.config, OpUpdateOne, withDescription_change(dc))
	return &DescriptionChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DescriptionChangeClient) UpdateOneID(id pulid.ID) *DescriptionChangeUpdateOne {
	mutation := newDescriptionChangeMutation(c.config, OpUpdateOne, withDescription_changeID(id))
	return &DescriptionChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Description_change.
func (c *DescriptionChangeClient) Delete() *DescriptionChangeDelete {
	mutation := newDescriptionChangeMutation(c.config, OpDelete)
	return &DescriptionChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DescriptionChangeClient) DeleteOne(dc *Description_change) *DescriptionChangeDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DescriptionChangeClient) DeleteOneID(id pulid.ID) *DescriptionChangeDeleteOne {
	builder := c.Delete().Where(description_change.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DescriptionChangeDeleteOne{builder}
}

// Query returns a query builder for Description_change.
func (c *DescriptionChangeClient) Query() *DescriptionChangeQuery {
	return &DescriptionChangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDescriptionChange},
		inters: c.Interceptors(),
	}
}

// Get returns a Description_change entity by its id.
func (c *DescriptionChangeClient) Get(ctx context.Context, id pulid.ID) (*Description_change, error) {
	return c.Query().Where(description_change.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DescriptionChangeClient) GetX(ctx context.Context, id pulid.ID) *Description_change {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescription queries the description edge of a Description_change.
func (c *DescriptionChangeClient) QueryDescription(dc *Description_change) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description_change.Table, description_change.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description_change.DescriptionTable, description_change.DescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DescriptionChangeClient) Hooks() []Hook {
	return c.hooks.Description_change
}

// Interceptors returns the client interceptors.
func (c *DescriptionChangeClient) Interceptors() []Interceptor {
	return c.inters.Description_change
}

func (c *DescriptionChangeClient) mutate(ctx context.Context, m *DescriptionChangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DescriptionChangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DescriptionChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DescriptionChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DescriptionChangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Description_change mutation op: %q", m.Op())
	}
}

// PeriodicDescriptionTemplateClient is a client for the Periodic_description_template schema.
type PeriodicDescriptionTemplateClient struct {
	config
}

// NewPeriodicDescriptionTemplateClient returns a client for the Periodic_description_template from the given config.
func NewPeriodicDescriptionTemplateClient(c config) *PeriodicDescriptionTemplateClient {
	return &PeriodicDescriptionTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `periodic_description_template.Hooks(f(g(h())))`.
func (c *PeriodicDescriptionTemplateClient) Use(hooks ...Hook) {
	c.hooks.Periodic_description_template = append(c.hooks.Periodic_description_template, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `periodic_description_template.Intercept(f(g(h())))`.
func (c *PeriodicDescriptionTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Periodic_description_template = append(c.inters.Periodic_description_template, interceptors...)
}

// Create returns a builder for creating a Periodic_description_template entity.
func (c *PeriodicDescriptionTemplateClient) Create() *PeriodicDescriptionTemplateCreate {
	mutation := newPeriodicDescriptionTemplateMutation(c.config, OpCreate)
	return &PeriodicDescriptionTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Periodic_description_template entities.
func (c *PeriodicDescriptionTemplateClient) CreateBulk(builders ...*PeriodicDescriptionTemplateCreate) *PeriodicDescriptionTemplateCreateBulk {
	return &PeriodicDescriptionTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PeriodicDescriptionTemplateClient) MapCreateBulk(slice any, setFunc func(*PeriodicDescriptionTemplateCreate, int)) *PeriodicDescriptionTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PeriodicDescriptionTemplateCreateBulk{err: fmt.Errorf("calling to PeriodicDescriptionTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PeriodicDescriptionTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PeriodicDescriptionTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Periodic_description_template.
func (c *PeriodicDescriptionTemplateClient) Update() *PeriodicDescriptionTemplateUpdate {
	mutation := newPeriodicDescriptionTemplateMutation(c.config, OpUpdate)
	return &PeriodicDescriptionTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PeriodicDescriptionTemplateClient) UpdateOne(pdt *Periodic_description_template) *PeriodicDescriptionTemplateUpdateOne {
	mutation := newPeriodicDescriptionTemplateMutation(c.config, OpUpdateOne, withPeriodic_description_template(pdt))
	return &PeriodicDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PeriodicDescriptionTemplateClient) UpdateOneID(id pulid.ID) *PeriodicDescriptionTemplateUpdateOne {
	mutation := newPeriodicDescriptionTemplateMutation(c.config, OpUpdateOne, withPeriodic_description_templateID(id))
	return &PeriodicDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Periodic_description_template.
func (c *PeriodicDescriptionTemplateClient) Delete() *PeriodicDescriptionTemplateDelete {
	mutation := newPeriodicDescriptionTemplateMutation(c.config, OpDelete)
	return &PeriodicDescriptionTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PeriodicDescriptionTemplateClient) DeleteOne(pdt *Periodic_description_template) *PeriodicDescriptionTemplateDeleteOne {
	return c.DeleteOneID(pdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PeriodicDescriptionTemplateClient) DeleteOneID(id pulid.ID) *PeriodicDescriptionTemplateDeleteOne {
	builder := c.Delete().Where(periodic_description_template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PeriodicDescriptionTemplateDeleteOne{builder}
}

// Query returns a query builder for Periodic_description_template.
func (c *PeriodicDescriptionTemplateClient) Query() *PeriodicDescriptionTemplateQuery {
	return &PeriodicDescriptionTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePeriodicDescriptionTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a Periodic_description_template entity by its id.
func (c *PeriodicDescriptionTemplateClient) Get(ctx context.Context, id pulid.ID) (*Periodic_description_template, error) {
	return c.Query().Where(periodic_description_template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PeriodicDescriptionTemplateClient) GetX(ctx context.Context, id pulid.ID) *Periodic_description_template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptions queries the descriptions edge of a Periodic_description_template.
func (c *PeriodicDescriptionTemplateClient) QueryDescriptions(pdt *Periodic_description_template) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(periodic_description_template.Table, periodic_description_template.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, periodic_description_template.DescriptionsTable, periodic_description_template.DescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(pdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PeriodicDescriptionTemplateClient) Hooks() []Hook {
	return c.hooks.Periodic_description_template
}

// Interceptors returns the client interceptors.
func (c *PeriodicDescriptionTemplateClient) Interceptors() []Interceptor {
	return c.inters.Periodic_description_template
}

func (c *PeriodicDescriptionTemplateClient) mutate(ctx context.Context, m *PeriodicDescriptionTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PeriodicDescriptionTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PeriodicDescriptionTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PeriodicDescriptionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PeriodicDescriptionTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Periodic_description_template mutation op: %q", m.Op())
	}
}

// VideoClient is a client for the Video schema.
type VideoClient struct {
	config
}

// NewVideoClient returns a client for the Video from the given config.
func NewVideoClient(c config) *VideoClient {
	return &VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video.Hooks(f(g(h())))`.
func (c *VideoClient) Use(hooks ...Hook) {
	c.hooks.Video = append(c.hooks.Video, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video.Intercept(f(g(h())))`.
func (c *VideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video = append(c.inters.Video, interceptors...)
}

// Create returns a builder for creating a Video entity.
func (c *VideoClient) Create() *VideoCreate {
	mutation := newVideoMutation(c.config, OpCreate)
	return &VideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video entities.
func (c *VideoClient) CreateBulk(builders ...*VideoCreate) *VideoCreateBulk {
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoClient) MapCreateBulk(slice any, setFunc func(*VideoCreate, int)) *VideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoCreateBulk{err: fmt.Errorf("calling to VideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video.
func (c *VideoClient) Update() *VideoUpdate {
	mutation := newVideoMutation(c.config, OpUpdate)
	return &VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClient) UpdateOne(v *Video) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideo(v))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClient) UpdateOneID(id pulid.ID) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideoID(id))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video.
func (c *VideoClient) Delete() *VideoDelete {
	mutation := newVideoMutation(c.config, OpDelete)
	return &VideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoClient) DeleteOne(v *Video) *VideoDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoClient) DeleteOneID(id pulid.ID) *VideoDeleteOne {
	builder := c.Delete().Where(video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDeleteOne{builder}
}

// Query returns a query builder for Video.
func (c *VideoClient) Query() *VideoQuery {
	return &VideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a Video entity by its id.
func (c *VideoClient) Get(ctx context.Context, id pulid.ID) (*Video, error) {
	return c.Query().Where(video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClient) GetX(ctx context.Context, id pulid.ID) *Video {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptions queries the descriptions edge of a Video.
func (c *VideoClient) QueryDescriptions(v *Video) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, video.DescriptionsTable, video.DescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a Video.
func (c *VideoClient) QueryChannel(v *Video) *ChannelQuery {
	query := (&ChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, video.ChannelTable, video.ChannelPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoPlayRanges queries the video_play_ranges edge of a Video.
func (c *VideoClient) QueryVideoPlayRanges(v *Video) *VideoPlayRangeQuery {
	query := (&VideoPlayRangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(video_play_range.Table, video_play_range.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, video.VideoPlayRangesTable, video.VideoPlayRangesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoDisallowRanges queries the video_disallow_ranges edge of a Video.
func (c *VideoClient) QueryVideoDisallowRanges(v *Video) *VideoDisallowRangeQuery {
	query := (&VideoDisallowRangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(video_disallow_range.Table, video_disallow_range.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, video.VideoDisallowRangesTable, video.VideoDisallowRangesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoTitleChanges queries the video_title_changes edge of a Video.
func (c *VideoClient) QueryVideoTitleChanges(v *Video) *VideoTitleChangeQuery {
	query := (&VideoTitleChangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(video_title_change.Table, video_title_change.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, video.VideoTitleChangesTable, video.VideoTitleChangesColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClient) Hooks() []Hook {
	return c.hooks.Video
}

// Interceptors returns the client interceptors.
func (c *VideoClient) Interceptors() []Interceptor {
	return c.inters.Video
}

func (c *VideoClient) mutate(ctx context.Context, m *VideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Video mutation op: %q", m.Op())
	}
}

// VideoDisallowRangeClient is a client for the Video_disallow_range schema.
type VideoDisallowRangeClient struct {
	config
}

// NewVideoDisallowRangeClient returns a client for the Video_disallow_range from the given config.
func NewVideoDisallowRangeClient(c config) *VideoDisallowRangeClient {
	return &VideoDisallowRangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video_disallow_range.Hooks(f(g(h())))`.
func (c *VideoDisallowRangeClient) Use(hooks ...Hook) {
	c.hooks.Video_disallow_range = append(c.hooks.Video_disallow_range, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video_disallow_range.Intercept(f(g(h())))`.
func (c *VideoDisallowRangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video_disallow_range = append(c.inters.Video_disallow_range, interceptors...)
}

// Create returns a builder for creating a Video_disallow_range entity.
func (c *VideoDisallowRangeClient) Create() *VideoDisallowRangeCreate {
	mutation := newVideoDisallowRangeMutation(c.config, OpCreate)
	return &VideoDisallowRangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video_disallow_range entities.
func (c *VideoDisallowRangeClient) CreateBulk(builders ...*VideoDisallowRangeCreate) *VideoDisallowRangeCreateBulk {
	return &VideoDisallowRangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoDisallowRangeClient) MapCreateBulk(slice any, setFunc func(*VideoDisallowRangeCreate, int)) *VideoDisallowRangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoDisallowRangeCreateBulk{err: fmt.Errorf("calling to VideoDisallowRangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoDisallowRangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoDisallowRangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video_disallow_range.
func (c *VideoDisallowRangeClient) Update() *VideoDisallowRangeUpdate {
	mutation := newVideoDisallowRangeMutation(c.config, OpUpdate)
	return &VideoDisallowRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoDisallowRangeClient) UpdateOne(vdr *Video_disallow_range) *VideoDisallowRangeUpdateOne {
	mutation := newVideoDisallowRangeMutation(c.config, OpUpdateOne, withVideo_disallow_range(vdr))
	return &VideoDisallowRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoDisallowRangeClient) UpdateOneID(id pulid.ID) *VideoDisallowRangeUpdateOne {
	mutation := newVideoDisallowRangeMutation(c.config, OpUpdateOne, withVideo_disallow_rangeID(id))
	return &VideoDisallowRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video_disallow_range.
func (c *VideoDisallowRangeClient) Delete() *VideoDisallowRangeDelete {
	mutation := newVideoDisallowRangeMutation(c.config, OpDelete)
	return &VideoDisallowRangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoDisallowRangeClient) DeleteOne(vdr *Video_disallow_range) *VideoDisallowRangeDeleteOne {
	return c.DeleteOneID(vdr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoDisallowRangeClient) DeleteOneID(id pulid.ID) *VideoDisallowRangeDeleteOne {
	builder := c.Delete().Where(video_disallow_range.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDisallowRangeDeleteOne{builder}
}

// Query returns a query builder for Video_disallow_range.
func (c *VideoDisallowRangeClient) Query() *VideoDisallowRangeQuery {
	return &VideoDisallowRangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideoDisallowRange},
		inters: c.Interceptors(),
	}
}

// Get returns a Video_disallow_range entity by its id.
func (c *VideoDisallowRangeClient) Get(ctx context.Context, id pulid.ID) (*Video_disallow_range, error) {
	return c.Query().Where(video_disallow_range.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoDisallowRangeClient) GetX(ctx context.Context, id pulid.ID) *Video_disallow_range {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideo queries the video edge of a Video_disallow_range.
func (c *VideoDisallowRangeClient) QueryVideo(vdr *Video_disallow_range) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vdr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video_disallow_range.Table, video_disallow_range.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, video_disallow_range.VideoTable, video_disallow_range.VideoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(vdr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoDisallowRangeClient) Hooks() []Hook {
	return c.hooks.Video_disallow_range
}

// Interceptors returns the client interceptors.
func (c *VideoDisallowRangeClient) Interceptors() []Interceptor {
	return c.inters.Video_disallow_range
}

func (c *VideoDisallowRangeClient) mutate(ctx context.Context, m *VideoDisallowRangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoDisallowRangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoDisallowRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoDisallowRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoDisallowRangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Video_disallow_range mutation op: %q", m.Op())
	}
}

// VideoPlayRangeClient is a client for the Video_play_range schema.
type VideoPlayRangeClient struct {
	config
}

// NewVideoPlayRangeClient returns a client for the Video_play_range from the given config.
func NewVideoPlayRangeClient(c config) *VideoPlayRangeClient {
	return &VideoPlayRangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video_play_range.Hooks(f(g(h())))`.
func (c *VideoPlayRangeClient) Use(hooks ...Hook) {
	c.hooks.Video_play_range = append(c.hooks.Video_play_range, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video_play_range.Intercept(f(g(h())))`.
func (c *VideoPlayRangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video_play_range = append(c.inters.Video_play_range, interceptors...)
}

// Create returns a builder for creating a Video_play_range entity.
func (c *VideoPlayRangeClient) Create() *VideoPlayRangeCreate {
	mutation := newVideoPlayRangeMutation(c.config, OpCreate)
	return &VideoPlayRangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video_play_range entities.
func (c *VideoPlayRangeClient) CreateBulk(builders ...*VideoPlayRangeCreate) *VideoPlayRangeCreateBulk {
	return &VideoPlayRangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoPlayRangeClient) MapCreateBulk(slice any, setFunc func(*VideoPlayRangeCreate, int)) *VideoPlayRangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoPlayRangeCreateBulk{err: fmt.Errorf("calling to VideoPlayRangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoPlayRangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoPlayRangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video_play_range.
func (c *VideoPlayRangeClient) Update() *VideoPlayRangeUpdate {
	mutation := newVideoPlayRangeMutation(c.config, OpUpdate)
	return &VideoPlayRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoPlayRangeClient) UpdateOne(vpr *Video_play_range) *VideoPlayRangeUpdateOne {
	mutation := newVideoPlayRangeMutation(c.config, OpUpdateOne, withVideo_play_range(vpr))
	return &VideoPlayRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoPlayRangeClient) UpdateOneID(id pulid.ID) *VideoPlayRangeUpdateOne {
	mutation := newVideoPlayRangeMutation(c.config, OpUpdateOne, withVideo_play_rangeID(id))
	return &VideoPlayRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video_play_range.
func (c *VideoPlayRangeClient) Delete() *VideoPlayRangeDelete {
	mutation := newVideoPlayRangeMutation(c.config, OpDelete)
	return &VideoPlayRangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoPlayRangeClient) DeleteOne(vpr *Video_play_range) *VideoPlayRangeDeleteOne {
	return c.DeleteOneID(vpr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoPlayRangeClient) DeleteOneID(id pulid.ID) *VideoPlayRangeDeleteOne {
	builder := c.Delete().Where(video_play_range.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoPlayRangeDeleteOne{builder}
}

// Query returns a query builder for Video_play_range.
func (c *VideoPlayRangeClient) Query() *VideoPlayRangeQuery {
	return &VideoPlayRangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideoPlayRange},
		inters: c.Interceptors(),
	}
}

// Get returns a Video_play_range entity by its id.
func (c *VideoPlayRangeClient) Get(ctx context.Context, id pulid.ID) (*Video_play_range, error) {
	return c.Query().Where(video_play_range.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoPlayRangeClient) GetX(ctx context.Context, id pulid.ID) *Video_play_range {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideo queries the video edge of a Video_play_range.
func (c *VideoPlayRangeClient) QueryVideo(vpr *Video_play_range) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video_play_range.Table, video_play_range.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, video_play_range.VideoTable, video_play_range.VideoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(vpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoPlayRangeClient) Hooks() []Hook {
	return c.hooks.Video_play_range
}

// Interceptors returns the client interceptors.
func (c *VideoPlayRangeClient) Interceptors() []Interceptor {
	return c.inters.Video_play_range
}

func (c *VideoPlayRangeClient) mutate(ctx context.Context, m *VideoPlayRangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoPlayRangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoPlayRangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoPlayRangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoPlayRangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Video_play_range mutation op: %q", m.Op())
	}
}

// VideoTitleChangeClient is a client for the Video_title_change schema.
type VideoTitleChangeClient struct {
	config
}

// NewVideoTitleChangeClient returns a client for the Video_title_change from the given config.
func NewVideoTitleChangeClient(c config) *VideoTitleChangeClient {
	return &VideoTitleChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video_title_change.Hooks(f(g(h())))`.
func (c *VideoTitleChangeClient) Use(hooks ...Hook) {
	c.hooks.Video_title_change = append(c.hooks.Video_title_change, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video_title_change.Intercept(f(g(h())))`.
func (c *VideoTitleChangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video_title_change = append(c.inters.Video_title_change, interceptors...)
}

// Create returns a builder for creating a Video_title_change entity.
func (c *VideoTitleChangeClient) Create() *VideoTitleChangeCreate {
	mutation := newVideoTitleChangeMutation(c.config, OpCreate)
	return &VideoTitleChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video_title_change entities.
func (c *VideoTitleChangeClient) CreateBulk(builders ...*VideoTitleChangeCreate) *VideoTitleChangeCreateBulk {
	return &VideoTitleChangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoTitleChangeClient) MapCreateBulk(slice any, setFunc func(*VideoTitleChangeCreate, int)) *VideoTitleChangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoTitleChangeCreateBulk{err: fmt.Errorf("calling to VideoTitleChangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoTitleChangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoTitleChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video_title_change.
func (c *VideoTitleChangeClient) Update() *VideoTitleChangeUpdate {
	mutation := newVideoTitleChangeMutation(c.config, OpUpdate)
	return &VideoTitleChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoTitleChangeClient) UpdateOne(vtc *Video_title_change) *VideoTitleChangeUpdateOne {
	mutation := newVideoTitleChangeMutation(c.config, OpUpdateOne, withVideo_title_change(vtc))
	return &VideoTitleChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoTitleChangeClient) UpdateOneID(id pulid.ID) *VideoTitleChangeUpdateOne {
	mutation := newVideoTitleChangeMutation(c.config, OpUpdateOne, withVideo_title_changeID(id))
	return &VideoTitleChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video_title_change.
func (c *VideoTitleChangeClient) Delete() *VideoTitleChangeDelete {
	mutation := newVideoTitleChangeMutation(c.config, OpDelete)
	return &VideoTitleChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoTitleChangeClient) DeleteOne(vtc *Video_title_change) *VideoTitleChangeDeleteOne {
	return c.DeleteOneID(vtc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoTitleChangeClient) DeleteOneID(id pulid.ID) *VideoTitleChangeDeleteOne {
	builder := c.Delete().Where(video_title_change.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoTitleChangeDeleteOne{builder}
}

// Query returns a query builder for Video_title_change.
func (c *VideoTitleChangeClient) Query() *VideoTitleChangeQuery {
	return &VideoTitleChangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideoTitleChange},
		inters: c.Interceptors(),
	}
}

// Get returns a Video_title_change entity by its id.
func (c *VideoTitleChangeClient) Get(ctx context.Context, id pulid.ID) (*Video_title_change, error) {
	return c.Query().Where(video_title_change.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoTitleChangeClient) GetX(ctx context.Context, id pulid.ID) *Video_title_change {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideo queries the video edge of a Video_title_change.
func (c *VideoTitleChangeClient) QueryVideo(vtc *Video_title_change) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vtc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video_title_change.Table, video_title_change.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video_title_change.VideoTable, video_title_change.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(vtc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoTitleChangeClient) Hooks() []Hook {
	return c.hooks.Video_title_change
}

// Interceptors returns the client interceptors.
func (c *VideoTitleChangeClient) Interceptors() []Interceptor {
	return c.inters.Video_title_change
}

func (c *VideoTitleChangeClient) mutate(ctx context.Context, m *VideoTitleChangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoTitleChangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoTitleChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoTitleChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoTitleChangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Video_title_change mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Category_description_template, Channel, Description, Description_change,
		Periodic_description_template, Video, Video_disallow_range, Video_play_range,
		Video_title_change []ent.Hook
	}
	inters struct {
		Category_description_template, Channel, Description, Description_change,
		Periodic_description_template, Video, Video_disallow_range, Video_play_range,
		Video_title_change []ent.Interceptor
	}
)
