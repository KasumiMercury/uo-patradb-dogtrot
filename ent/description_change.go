// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description_change"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// Description_change is the model entity for the Description_change schema.
type Description_change struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw string `json:"raw,omitempty"`
	// Variable holds the value of the "variable" field.
	Variable string `json:"variable,omitempty"`
	// NormalizedVariable holds the value of the "normalized_variable" field.
	NormalizedVariable string `json:"normalized_variable,omitempty"`
	// ChangedAt holds the value of the "changed_at" field.
	ChangedAt time.Time `json:"changed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Description_changeQuery when eager-loading is set.
	Edges          Description_changeEdges `json:"edges"`
	description_id *pulid.ID
	selectValues   sql.SelectValues
}

// Description_changeEdges holds the relations/edges for other nodes in the graph.
type Description_changeEdges struct {
	// Description holds the value of the description edge.
	Description *Description `json:"description,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DescriptionOrErr returns the Description value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Description_changeEdges) DescriptionOrErr() (*Description, error) {
	if e.loadedTypes[0] {
		if e.Description == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: description.Label}
		}
		return e.Description, nil
	}
	return nil, &NotLoadedError{edge: "description"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Description_change) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case description_change.FieldID, description_change.FieldRaw, description_change.FieldVariable, description_change.FieldNormalizedVariable:
			values[i] = new(sql.NullString)
		case description_change.FieldChangedAt:
			values[i] = new(sql.NullTime)
		case description_change.ForeignKeys[0]: // description_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Description_change fields.
func (dc *Description_change) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case description_change.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dc.ID = pulid.ID(value.String)
			}
		case description_change.FieldRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value.Valid {
				dc.Raw = value.String
			}
		case description_change.FieldVariable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variable", values[i])
			} else if value.Valid {
				dc.Variable = value.String
			}
		case description_change.FieldNormalizedVariable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field normalized_variable", values[i])
			} else if value.Valid {
				dc.NormalizedVariable = value.String
			}
		case description_change.FieldChangedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field changed_at", values[i])
			} else if value.Valid {
				dc.ChangedAt = value.Time
			}
		case description_change.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description_id", values[i])
			} else if value.Valid {
				dc.description_id = new(pulid.ID)
				*dc.description_id = pulid.ID(value.String)
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Description_change.
// This includes values selected through modifiers, order, etc.
func (dc *Description_change) Value(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// QueryDescription queries the "description" edge of the Description_change entity.
func (dc *Description_change) QueryDescription() *DescriptionQuery {
	return NewDescriptionChangeClient(dc.config).QueryDescription(dc)
}

// Update returns a builder for updating this Description_change.
// Note that you need to call Description_change.Unwrap() before calling this method if this Description_change
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *Description_change) Update() *DescriptionChangeUpdateOne {
	return NewDescriptionChangeClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the Description_change entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *Description_change) Unwrap() *Description_change {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: Description_change is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *Description_change) String() string {
	var builder strings.Builder
	builder.WriteString("Description_change(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("raw=")
	builder.WriteString(dc.Raw)
	builder.WriteString(", ")
	builder.WriteString("variable=")
	builder.WriteString(dc.Variable)
	builder.WriteString(", ")
	builder.WriteString("normalized_variable=")
	builder.WriteString(dc.NormalizedVariable)
	builder.WriteString(", ")
	builder.WriteString("changed_at=")
	builder.WriteString(dc.ChangedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Description_changes is a parsable slice of Description_change.
type Description_changes []*Description_change
