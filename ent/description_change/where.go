// Code generated by ent, DO NOT EDIT.

package description_change

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Description_change {
	return predicate.Description_change(sql.FieldLTE(FieldID, id))
}

// Raw applies equality check predicate on the "raw" field. It's identical to RawEQ.
func Raw(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldRaw, v))
}

// Variable applies equality check predicate on the "variable" field. It's identical to VariableEQ.
func Variable(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldVariable, v))
}

// NormalizedVariable applies equality check predicate on the "normalized_variable" field. It's identical to NormalizedVariableEQ.
func NormalizedVariable(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldNormalizedVariable, v))
}

// ChangedAt applies equality check predicate on the "changed_at" field. It's identical to ChangedAtEQ.
func ChangedAt(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldChangedAt, v))
}

// RawEQ applies the EQ predicate on the "raw" field.
func RawEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldRaw, v))
}

// RawNEQ applies the NEQ predicate on the "raw" field.
func RawNEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNEQ(FieldRaw, v))
}

// RawIn applies the In predicate on the "raw" field.
func RawIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldIn(FieldRaw, vs...))
}

// RawNotIn applies the NotIn predicate on the "raw" field.
func RawNotIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNotIn(FieldRaw, vs...))
}

// RawGT applies the GT predicate on the "raw" field.
func RawGT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGT(FieldRaw, v))
}

// RawGTE applies the GTE predicate on the "raw" field.
func RawGTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGTE(FieldRaw, v))
}

// RawLT applies the LT predicate on the "raw" field.
func RawLT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLT(FieldRaw, v))
}

// RawLTE applies the LTE predicate on the "raw" field.
func RawLTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLTE(FieldRaw, v))
}

// RawContains applies the Contains predicate on the "raw" field.
func RawContains(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContains(FieldRaw, v))
}

// RawHasPrefix applies the HasPrefix predicate on the "raw" field.
func RawHasPrefix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasPrefix(FieldRaw, v))
}

// RawHasSuffix applies the HasSuffix predicate on the "raw" field.
func RawHasSuffix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasSuffix(FieldRaw, v))
}

// RawEqualFold applies the EqualFold predicate on the "raw" field.
func RawEqualFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEqualFold(FieldRaw, v))
}

// RawContainsFold applies the ContainsFold predicate on the "raw" field.
func RawContainsFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContainsFold(FieldRaw, v))
}

// VariableEQ applies the EQ predicate on the "variable" field.
func VariableEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldVariable, v))
}

// VariableNEQ applies the NEQ predicate on the "variable" field.
func VariableNEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNEQ(FieldVariable, v))
}

// VariableIn applies the In predicate on the "variable" field.
func VariableIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldIn(FieldVariable, vs...))
}

// VariableNotIn applies the NotIn predicate on the "variable" field.
func VariableNotIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNotIn(FieldVariable, vs...))
}

// VariableGT applies the GT predicate on the "variable" field.
func VariableGT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGT(FieldVariable, v))
}

// VariableGTE applies the GTE predicate on the "variable" field.
func VariableGTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGTE(FieldVariable, v))
}

// VariableLT applies the LT predicate on the "variable" field.
func VariableLT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLT(FieldVariable, v))
}

// VariableLTE applies the LTE predicate on the "variable" field.
func VariableLTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLTE(FieldVariable, v))
}

// VariableContains applies the Contains predicate on the "variable" field.
func VariableContains(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContains(FieldVariable, v))
}

// VariableHasPrefix applies the HasPrefix predicate on the "variable" field.
func VariableHasPrefix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasPrefix(FieldVariable, v))
}

// VariableHasSuffix applies the HasSuffix predicate on the "variable" field.
func VariableHasSuffix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasSuffix(FieldVariable, v))
}

// VariableIsNil applies the IsNil predicate on the "variable" field.
func VariableIsNil() predicate.Description_change {
	return predicate.Description_change(sql.FieldIsNull(FieldVariable))
}

// VariableNotNil applies the NotNil predicate on the "variable" field.
func VariableNotNil() predicate.Description_change {
	return predicate.Description_change(sql.FieldNotNull(FieldVariable))
}

// VariableEqualFold applies the EqualFold predicate on the "variable" field.
func VariableEqualFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEqualFold(FieldVariable, v))
}

// VariableContainsFold applies the ContainsFold predicate on the "variable" field.
func VariableContainsFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContainsFold(FieldVariable, v))
}

// NormalizedVariableEQ applies the EQ predicate on the "normalized_variable" field.
func NormalizedVariableEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldNormalizedVariable, v))
}

// NormalizedVariableNEQ applies the NEQ predicate on the "normalized_variable" field.
func NormalizedVariableNEQ(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNEQ(FieldNormalizedVariable, v))
}

// NormalizedVariableIn applies the In predicate on the "normalized_variable" field.
func NormalizedVariableIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldIn(FieldNormalizedVariable, vs...))
}

// NormalizedVariableNotIn applies the NotIn predicate on the "normalized_variable" field.
func NormalizedVariableNotIn(vs ...string) predicate.Description_change {
	return predicate.Description_change(sql.FieldNotIn(FieldNormalizedVariable, vs...))
}

// NormalizedVariableGT applies the GT predicate on the "normalized_variable" field.
func NormalizedVariableGT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGT(FieldNormalizedVariable, v))
}

// NormalizedVariableGTE applies the GTE predicate on the "normalized_variable" field.
func NormalizedVariableGTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldGTE(FieldNormalizedVariable, v))
}

// NormalizedVariableLT applies the LT predicate on the "normalized_variable" field.
func NormalizedVariableLT(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLT(FieldNormalizedVariable, v))
}

// NormalizedVariableLTE applies the LTE predicate on the "normalized_variable" field.
func NormalizedVariableLTE(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldLTE(FieldNormalizedVariable, v))
}

// NormalizedVariableContains applies the Contains predicate on the "normalized_variable" field.
func NormalizedVariableContains(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContains(FieldNormalizedVariable, v))
}

// NormalizedVariableHasPrefix applies the HasPrefix predicate on the "normalized_variable" field.
func NormalizedVariableHasPrefix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasPrefix(FieldNormalizedVariable, v))
}

// NormalizedVariableHasSuffix applies the HasSuffix predicate on the "normalized_variable" field.
func NormalizedVariableHasSuffix(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldHasSuffix(FieldNormalizedVariable, v))
}

// NormalizedVariableIsNil applies the IsNil predicate on the "normalized_variable" field.
func NormalizedVariableIsNil() predicate.Description_change {
	return predicate.Description_change(sql.FieldIsNull(FieldNormalizedVariable))
}

// NormalizedVariableNotNil applies the NotNil predicate on the "normalized_variable" field.
func NormalizedVariableNotNil() predicate.Description_change {
	return predicate.Description_change(sql.FieldNotNull(FieldNormalizedVariable))
}

// NormalizedVariableEqualFold applies the EqualFold predicate on the "normalized_variable" field.
func NormalizedVariableEqualFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldEqualFold(FieldNormalizedVariable, v))
}

// NormalizedVariableContainsFold applies the ContainsFold predicate on the "normalized_variable" field.
func NormalizedVariableContainsFold(v string) predicate.Description_change {
	return predicate.Description_change(sql.FieldContainsFold(FieldNormalizedVariable, v))
}

// ChangedAtEQ applies the EQ predicate on the "changed_at" field.
func ChangedAtEQ(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldEQ(FieldChangedAt, v))
}

// ChangedAtNEQ applies the NEQ predicate on the "changed_at" field.
func ChangedAtNEQ(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldNEQ(FieldChangedAt, v))
}

// ChangedAtIn applies the In predicate on the "changed_at" field.
func ChangedAtIn(vs ...time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldIn(FieldChangedAt, vs...))
}

// ChangedAtNotIn applies the NotIn predicate on the "changed_at" field.
func ChangedAtNotIn(vs ...time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldNotIn(FieldChangedAt, vs...))
}

// ChangedAtGT applies the GT predicate on the "changed_at" field.
func ChangedAtGT(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldGT(FieldChangedAt, v))
}

// ChangedAtGTE applies the GTE predicate on the "changed_at" field.
func ChangedAtGTE(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldGTE(FieldChangedAt, v))
}

// ChangedAtLT applies the LT predicate on the "changed_at" field.
func ChangedAtLT(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldLT(FieldChangedAt, v))
}

// ChangedAtLTE applies the LTE predicate on the "changed_at" field.
func ChangedAtLTE(v time.Time) predicate.Description_change {
	return predicate.Description_change(sql.FieldLTE(FieldChangedAt, v))
}

// HasDescription applies the HasEdge predicate on the "description" edge.
func HasDescription() predicate.Description_change {
	return predicate.Description_change(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DescriptionTable, DescriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDescriptionWith applies the HasEdge predicate on the "description" edge with a given conditions (other predicates).
func HasDescriptionWith(preds ...predicate.Description) predicate.Description_change {
	return predicate.Description_change(func(s *sql.Selector) {
		step := newDescriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Description_change) predicate.Description_change {
	return predicate.Description_change(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Description_change) predicate.Description_change {
	return predicate.Description_change(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Description_change) predicate.Description_change {
	return predicate.Description_change(sql.NotPredicates(p))
}
