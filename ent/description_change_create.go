// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description_change"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// DescriptionChangeCreate is the builder for creating a Description_change entity.
type DescriptionChangeCreate struct {
	config
	mutation *DescriptionChangeMutation
	hooks    []Hook
}

// SetRaw sets the "raw" field.
func (dcc *DescriptionChangeCreate) SetRaw(s string) *DescriptionChangeCreate {
	dcc.mutation.SetRaw(s)
	return dcc
}

// SetVariable sets the "variable" field.
func (dcc *DescriptionChangeCreate) SetVariable(s string) *DescriptionChangeCreate {
	dcc.mutation.SetVariable(s)
	return dcc
}

// SetNillableVariable sets the "variable" field if the given value is not nil.
func (dcc *DescriptionChangeCreate) SetNillableVariable(s *string) *DescriptionChangeCreate {
	if s != nil {
		dcc.SetVariable(*s)
	}
	return dcc
}

// SetNormalizedVariable sets the "normalized_variable" field.
func (dcc *DescriptionChangeCreate) SetNormalizedVariable(s string) *DescriptionChangeCreate {
	dcc.mutation.SetNormalizedVariable(s)
	return dcc
}

// SetNillableNormalizedVariable sets the "normalized_variable" field if the given value is not nil.
func (dcc *DescriptionChangeCreate) SetNillableNormalizedVariable(s *string) *DescriptionChangeCreate {
	if s != nil {
		dcc.SetNormalizedVariable(*s)
	}
	return dcc
}

// SetChangedAt sets the "changed_at" field.
func (dcc *DescriptionChangeCreate) SetChangedAt(t time.Time) *DescriptionChangeCreate {
	dcc.mutation.SetChangedAt(t)
	return dcc
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (dcc *DescriptionChangeCreate) SetNillableChangedAt(t *time.Time) *DescriptionChangeCreate {
	if t != nil {
		dcc.SetChangedAt(*t)
	}
	return dcc
}

// SetID sets the "id" field.
func (dcc *DescriptionChangeCreate) SetID(pu pulid.ID) *DescriptionChangeCreate {
	dcc.mutation.SetID(pu)
	return dcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dcc *DescriptionChangeCreate) SetNillableID(pu *pulid.ID) *DescriptionChangeCreate {
	if pu != nil {
		dcc.SetID(*pu)
	}
	return dcc
}

// SetDescriptionID sets the "description" edge to the Description entity by ID.
func (dcc *DescriptionChangeCreate) SetDescriptionID(id pulid.ID) *DescriptionChangeCreate {
	dcc.mutation.SetDescriptionID(id)
	return dcc
}

// SetDescription sets the "description" edge to the Description entity.
func (dcc *DescriptionChangeCreate) SetDescription(d *Description) *DescriptionChangeCreate {
	return dcc.SetDescriptionID(d.ID)
}

// Mutation returns the DescriptionChangeMutation object of the builder.
func (dcc *DescriptionChangeCreate) Mutation() *DescriptionChangeMutation {
	return dcc.mutation
}

// Save creates the Description_change in the database.
func (dcc *DescriptionChangeCreate) Save(ctx context.Context) (*Description_change, error) {
	dcc.defaults()
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DescriptionChangeCreate) SaveX(ctx context.Context) *Description_change {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DescriptionChangeCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DescriptionChangeCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DescriptionChangeCreate) defaults() {
	if _, ok := dcc.mutation.ChangedAt(); !ok {
		v := description_change.DefaultChangedAt()
		dcc.mutation.SetChangedAt(v)
	}
	if _, ok := dcc.mutation.ID(); !ok {
		v := description_change.DefaultID()
		dcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DescriptionChangeCreate) check() error {
	if _, ok := dcc.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`ent: missing required field "Description_change.raw"`)}
	}
	if _, ok := dcc.mutation.ChangedAt(); !ok {
		return &ValidationError{Name: "changed_at", err: errors.New(`ent: missing required field "Description_change.changed_at"`)}
	}
	if _, ok := dcc.mutation.DescriptionID(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required edge "Description_change.description"`)}
	}
	return nil
}

func (dcc *DescriptionChangeCreate) sqlSave(ctx context.Context) (*Description_change, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(pulid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Description_change.ID type: %T", _spec.ID.Value)
		}
	}
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DescriptionChangeCreate) createSpec() (*Description_change, *sqlgraph.CreateSpec) {
	var (
		_node = &Description_change{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(description_change.Table, sqlgraph.NewFieldSpec(description_change.FieldID, field.TypeString))
	)
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dcc.mutation.Raw(); ok {
		_spec.SetField(description_change.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	if value, ok := dcc.mutation.Variable(); ok {
		_spec.SetField(description_change.FieldVariable, field.TypeString, value)
		_node.Variable = value
	}
	if value, ok := dcc.mutation.NormalizedVariable(); ok {
		_spec.SetField(description_change.FieldNormalizedVariable, field.TypeString, value)
		_node.NormalizedVariable = value
	}
	if value, ok := dcc.mutation.ChangedAt(); ok {
		_spec.SetField(description_change.FieldChangedAt, field.TypeTime, value)
		_node.ChangedAt = value
	}
	if nodes := dcc.mutation.DescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description_change.DescriptionTable,
			Columns: []string{description_change.DescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.description_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DescriptionChangeCreateBulk is the builder for creating many Description_change entities in bulk.
type DescriptionChangeCreateBulk struct {
	config
	err      error
	builders []*DescriptionChangeCreate
}

// Save creates the Description_change entities in the database.
func (dccb *DescriptionChangeCreateBulk) Save(ctx context.Context) ([]*Description_change, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*Description_change, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DescriptionChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DescriptionChangeCreateBulk) SaveX(ctx context.Context) []*Description_change {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DescriptionChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DescriptionChangeCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
