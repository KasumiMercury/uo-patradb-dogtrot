// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description_change"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// DescriptionChangeQuery is the builder for querying Description_change entities.
type DescriptionChangeQuery struct {
	config
	ctx             *QueryContext
	order           []description_change.OrderOption
	inters          []Interceptor
	predicates      []predicate.Description_change
	withDescription *DescriptionQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DescriptionChangeQuery builder.
func (dcq *DescriptionChangeQuery) Where(ps ...predicate.Description_change) *DescriptionChangeQuery {
	dcq.predicates = append(dcq.predicates, ps...)
	return dcq
}

// Limit the number of records to be returned by this query.
func (dcq *DescriptionChangeQuery) Limit(limit int) *DescriptionChangeQuery {
	dcq.ctx.Limit = &limit
	return dcq
}

// Offset to start from.
func (dcq *DescriptionChangeQuery) Offset(offset int) *DescriptionChangeQuery {
	dcq.ctx.Offset = &offset
	return dcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dcq *DescriptionChangeQuery) Unique(unique bool) *DescriptionChangeQuery {
	dcq.ctx.Unique = &unique
	return dcq
}

// Order specifies how the records should be ordered.
func (dcq *DescriptionChangeQuery) Order(o ...description_change.OrderOption) *DescriptionChangeQuery {
	dcq.order = append(dcq.order, o...)
	return dcq
}

// QueryDescription chains the current query on the "description" edge.
func (dcq *DescriptionChangeQuery) QueryDescription() *DescriptionQuery {
	query := (&DescriptionClient{config: dcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(description_change.Table, description_change.FieldID, selector),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description_change.DescriptionTable, description_change.DescriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Description_change entity from the query.
// Returns a *NotFoundError when no Description_change was found.
func (dcq *DescriptionChangeQuery) First(ctx context.Context) (*Description_change, error) {
	nodes, err := dcq.Limit(1).All(setContextOp(ctx, dcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{description_change.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) FirstX(ctx context.Context) *Description_change {
	node, err := dcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Description_change ID from the query.
// Returns a *NotFoundError when no Description_change ID was found.
func (dcq *DescriptionChangeQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dcq.Limit(1).IDs(setContextOp(ctx, dcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{description_change.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := dcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Description_change entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Description_change entity is found.
// Returns a *NotFoundError when no Description_change entities are found.
func (dcq *DescriptionChangeQuery) Only(ctx context.Context) (*Description_change, error) {
	nodes, err := dcq.Limit(2).All(setContextOp(ctx, dcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{description_change.Label}
	default:
		return nil, &NotSingularError{description_change.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) OnlyX(ctx context.Context) *Description_change {
	node, err := dcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Description_change ID in the query.
// Returns a *NotSingularError when more than one Description_change ID is found.
// Returns a *NotFoundError when no entities are found.
func (dcq *DescriptionChangeQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dcq.Limit(2).IDs(setContextOp(ctx, dcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{description_change.Label}
	default:
		err = &NotSingularError{description_change.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := dcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Description_changes.
func (dcq *DescriptionChangeQuery) All(ctx context.Context) ([]*Description_change, error) {
	ctx = setContextOp(ctx, dcq.ctx, "All")
	if err := dcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Description_change, *DescriptionChangeQuery]()
	return withInterceptors[[]*Description_change](ctx, dcq, qr, dcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) AllX(ctx context.Context) []*Description_change {
	nodes, err := dcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Description_change IDs.
func (dcq *DescriptionChangeQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if dcq.ctx.Unique == nil && dcq.path != nil {
		dcq.Unique(true)
	}
	ctx = setContextOp(ctx, dcq.ctx, "IDs")
	if err = dcq.Select(description_change.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := dcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dcq *DescriptionChangeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Count")
	if err := dcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dcq, querierCount[*DescriptionChangeQuery](), dcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) CountX(ctx context.Context) int {
	count, err := dcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dcq *DescriptionChangeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dcq.ctx, "Exist")
	switch _, err := dcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dcq *DescriptionChangeQuery) ExistX(ctx context.Context) bool {
	exist, err := dcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DescriptionChangeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dcq *DescriptionChangeQuery) Clone() *DescriptionChangeQuery {
	if dcq == nil {
		return nil
	}
	return &DescriptionChangeQuery{
		config:          dcq.config,
		ctx:             dcq.ctx.Clone(),
		order:           append([]description_change.OrderOption{}, dcq.order...),
		inters:          append([]Interceptor{}, dcq.inters...),
		predicates:      append([]predicate.Description_change{}, dcq.predicates...),
		withDescription: dcq.withDescription.Clone(),
		// clone intermediate query.
		sql:  dcq.sql.Clone(),
		path: dcq.path,
	}
}

// WithDescription tells the query-builder to eager-load the nodes that are connected to
// the "description" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DescriptionChangeQuery) WithDescription(opts ...func(*DescriptionQuery)) *DescriptionChangeQuery {
	query := (&DescriptionClient{config: dcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDescription = query
	return dcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Raw string `json:"raw,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DescriptionChange.Query().
//		GroupBy(description_change.FieldRaw).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dcq *DescriptionChangeQuery) GroupBy(field string, fields ...string) *DescriptionChangeGroupBy {
	dcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DescriptionChangeGroupBy{build: dcq}
	grbuild.flds = &dcq.ctx.Fields
	grbuild.label = description_change.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Raw string `json:"raw,omitempty"`
//	}
//
//	client.DescriptionChange.Query().
//		Select(description_change.FieldRaw).
//		Scan(ctx, &v)
func (dcq *DescriptionChangeQuery) Select(fields ...string) *DescriptionChangeSelect {
	dcq.ctx.Fields = append(dcq.ctx.Fields, fields...)
	sbuild := &DescriptionChangeSelect{DescriptionChangeQuery: dcq}
	sbuild.label = description_change.Label
	sbuild.flds, sbuild.scan = &dcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DescriptionChangeSelect configured with the given aggregations.
func (dcq *DescriptionChangeQuery) Aggregate(fns ...AggregateFunc) *DescriptionChangeSelect {
	return dcq.Select().Aggregate(fns...)
}

func (dcq *DescriptionChangeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dcq); err != nil {
				return err
			}
		}
	}
	for _, f := range dcq.ctx.Fields {
		if !description_change.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dcq.path != nil {
		prev, err := dcq.path(ctx)
		if err != nil {
			return err
		}
		dcq.sql = prev
	}
	return nil
}

func (dcq *DescriptionChangeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Description_change, error) {
	var (
		nodes       = []*Description_change{}
		withFKs     = dcq.withFKs
		_spec       = dcq.querySpec()
		loadedTypes = [1]bool{
			dcq.withDescription != nil,
		}
	)
	if dcq.withDescription != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, description_change.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Description_change).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Description_change{config: dcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dcq.withDescription; query != nil {
		if err := dcq.loadDescription(ctx, query, nodes, nil,
			func(n *Description_change, e *Description) { n.Edges.Description = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dcq *DescriptionChangeQuery) loadDescription(ctx context.Context, query *DescriptionQuery, nodes []*Description_change, init func(*Description_change), assign func(*Description_change, *Description)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Description_change)
	for i := range nodes {
		if nodes[i].description_id == nil {
			continue
		}
		fk := *nodes[i].description_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(description.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "description_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dcq *DescriptionChangeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dcq.querySpec()
	_spec.Node.Columns = dcq.ctx.Fields
	if len(dcq.ctx.Fields) > 0 {
		_spec.Unique = dcq.ctx.Unique != nil && *dcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dcq.driver, _spec)
}

func (dcq *DescriptionChangeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(description_change.Table, description_change.Columns, sqlgraph.NewFieldSpec(description_change.FieldID, field.TypeString))
	_spec.From = dcq.sql
	if unique := dcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dcq.path != nil {
		_spec.Unique = true
	}
	if fields := dcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, description_change.FieldID)
		for i := range fields {
			if fields[i] != description_change.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dcq *DescriptionChangeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dcq.driver.Dialect())
	t1 := builder.Table(description_change.Table)
	columns := dcq.ctx.Fields
	if len(columns) == 0 {
		columns = description_change.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dcq.sql != nil {
		selector = dcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dcq.ctx.Unique != nil && *dcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dcq.predicates {
		p(selector)
	}
	for _, p := range dcq.order {
		p(selector)
	}
	if offset := dcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DescriptionChangeGroupBy is the group-by builder for Description_change entities.
type DescriptionChangeGroupBy struct {
	selector
	build *DescriptionChangeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dcgb *DescriptionChangeGroupBy) Aggregate(fns ...AggregateFunc) *DescriptionChangeGroupBy {
	dcgb.fns = append(dcgb.fns, fns...)
	return dcgb
}

// Scan applies the selector query and scans the result into the given value.
func (dcgb *DescriptionChangeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcgb.build.ctx, "GroupBy")
	if err := dcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DescriptionChangeQuery, *DescriptionChangeGroupBy](ctx, dcgb.build, dcgb, dcgb.build.inters, v)
}

func (dcgb *DescriptionChangeGroupBy) sqlScan(ctx context.Context, root *DescriptionChangeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dcgb.fns))
	for _, fn := range dcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dcgb.flds)+len(dcgb.fns))
		for _, f := range *dcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DescriptionChangeSelect is the builder for selecting fields of DescriptionChange entities.
type DescriptionChangeSelect struct {
	*DescriptionChangeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dcs *DescriptionChangeSelect) Aggregate(fns ...AggregateFunc) *DescriptionChangeSelect {
	dcs.fns = append(dcs.fns, fns...)
	return dcs
}

// Scan applies the selector query and scans the result into the given value.
func (dcs *DescriptionChangeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dcs.ctx, "Select")
	if err := dcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DescriptionChangeQuery, *DescriptionChangeSelect](ctx, dcs.DescriptionChangeQuery, dcs, dcs.inters, v)
}

func (dcs *DescriptionChangeSelect) sqlScan(ctx context.Context, root *DescriptionChangeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dcs.fns))
	for _, fn := range dcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
