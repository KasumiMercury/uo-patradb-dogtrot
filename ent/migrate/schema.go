// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoryDescriptionTemplatesColumns holds the columns for the "category_description_templates" table.
	CategoryDescriptionTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "text", Type: field.TypeString},
		{Name: "start_use_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_use_at", Type: field.TypeTime, Nullable: true},
	}
	// CategoryDescriptionTemplatesTable holds the schema information for the "category_description_templates" table.
	CategoryDescriptionTemplatesTable = &schema.Table{
		Name:       "category_description_templates",
		Columns:    CategoryDescriptionTemplatesColumns,
		PrimaryKey: []*schema.Column{CategoryDescriptionTemplatesColumns[0]},
	}
	// ChannelsColumns holds the columns for the "channels" table.
	ChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "display_name", Type: field.TypeString, Size: 100},
		{Name: "channel_id", Type: field.TypeString, Unique: true, Size: 26},
		{Name: "handle", Type: field.TypeString, Size: 30},
		{Name: "thumbnail_url", Type: field.TypeString, Size: 140},
	}
	// ChannelsTable holds the schema information for the "channels" table.
	ChannelsTable = &schema.Table{
		Name:       "channels",
		Columns:    ChannelsColumns,
		PrimaryKey: []*schema.Column{ChannelsColumns[0]},
	}
	// DescriptionsColumns holds the columns for the "descriptions" table.
	DescriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "raw", Type: field.TypeString, Size: 1000},
		{Name: "variable", Type: field.TypeString, Nullable: true},
		{Name: "normalized_variable", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "periodic_id", Type: field.TypeString, Nullable: true, Size: 26},
		{Name: "category_id", Type: field.TypeString, Nullable: true, Size: 26},
		{Name: "video_id", Type: field.TypeString, Unique: true, Size: 26},
	}
	// DescriptionsTable holds the schema information for the "descriptions" table.
	DescriptionsTable = &schema.Table{
		Name:       "descriptions",
		Columns:    DescriptionsColumns,
		PrimaryKey: []*schema.Column{DescriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "descriptions_periodic_description_templates_periodic_template",
				Columns:    []*schema.Column{DescriptionsColumns[6]},
				RefColumns: []*schema.Column{PeriodicDescriptionTemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "descriptions_category_description_templates_category_template",
				Columns:    []*schema.Column{DescriptionsColumns[7]},
				RefColumns: []*schema.Column{CategoryDescriptionTemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "descriptions_videos_descriptions",
				Columns:    []*schema.Column{DescriptionsColumns[8]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DescriptionChangesColumns holds the columns for the "description_changes" table.
	DescriptionChangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "raw", Type: field.TypeString, Size: 1000},
		{Name: "variable", Type: field.TypeString, Nullable: true},
		{Name: "normalized_variable", Type: field.TypeString, Nullable: true},
		{Name: "changed_at", Type: field.TypeTime},
		{Name: "description_id", Type: field.TypeString, Size: 26},
	}
	// DescriptionChangesTable holds the schema information for the "description_changes" table.
	DescriptionChangesTable = &schema.Table{
		Name:       "description_changes",
		Columns:    DescriptionChangesColumns,
		PrimaryKey: []*schema.Column{DescriptionChangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "description_changes_descriptions_description_changes",
				Columns:    []*schema.Column{DescriptionChangesColumns[5]},
				RefColumns: []*schema.Column{DescriptionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PatChatsColumns holds the columns for the "pat_chats" table.
	PatChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "message", Type: field.TypeString, Size: 200},
		{Name: "magnitude", Type: field.TypeFloat64},
		{Name: "score", Type: field.TypeFloat64},
		{Name: "is_negative", Type: field.TypeBool, Default: false},
		{Name: "published_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "video_id", Type: field.TypeString, Size: 26},
	}
	// PatChatsTable holds the schema information for the "pat_chats" table.
	PatChatsTable = &schema.Table{
		Name:       "pat_chats",
		Columns:    PatChatsColumns,
		PrimaryKey: []*schema.Column{PatChatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pat_chats_videos_Pat_chats",
				Columns:    []*schema.Column{PatChatsColumns[7]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PeriodicDescriptionTemplatesColumns holds the columns for the "periodic_description_templates" table.
	PeriodicDescriptionTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "text", Type: field.TypeString, Size: 1000},
		{Name: "start_use_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_use_at", Type: field.TypeTime, Nullable: true},
	}
	// PeriodicDescriptionTemplatesTable holds the schema information for the "periodic_description_templates" table.
	PeriodicDescriptionTemplatesTable = &schema.Table{
		Name:       "periodic_description_templates",
		Columns:    PeriodicDescriptionTemplatesColumns,
		PrimaryKey: []*schema.Column{PeriodicDescriptionTemplatesColumns[0]},
	}
	// VideosColumns holds the columns for the "videos" table.
	VideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "video_id", Type: field.TypeString, Unique: true, Size: 12},
		{Name: "title", Type: field.TypeString, Size: 100},
		{Name: "normalized_title", Type: field.TypeString, Nullable: true},
		{Name: "duration_seconds", Type: field.TypeInt, Nullable: true},
		{Name: "is_collaboration", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeString},
		{Name: "chat_id", Type: field.TypeString, Nullable: true},
		{Name: "has_time_range", Type: field.TypeBool, Default: false},
		{Name: "scheduled_at", Type: field.TypeTime, Nullable: true},
		{Name: "actual_start_at", Type: field.TypeTime, Nullable: true},
		{Name: "actual_end_at", Type: field.TypeTime, Nullable: true},
		{Name: "published_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// VideosTable holds the schema information for the "videos" table.
	VideosTable = &schema.Table{
		Name:       "videos",
		Columns:    VideosColumns,
		PrimaryKey: []*schema.Column{VideosColumns[0]},
	}
	// VideoDisallowRangesColumns holds the columns for the "video_disallow_ranges" table.
	VideoDisallowRangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "start_seconds", Type: field.TypeInt},
		{Name: "end_seconds", Type: field.TypeInt},
		{Name: "video_id", Type: field.TypeString, Size: 26},
	}
	// VideoDisallowRangesTable holds the schema information for the "video_disallow_ranges" table.
	VideoDisallowRangesTable = &schema.Table{
		Name:       "video_disallow_ranges",
		Columns:    VideoDisallowRangesColumns,
		PrimaryKey: []*schema.Column{VideoDisallowRangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_disallow_ranges_videos_video_disallow_ranges",
				Columns:    []*schema.Column{VideoDisallowRangesColumns[3]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// VideoPlayRangesColumns holds the columns for the "video_play_ranges" table.
	VideoPlayRangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "start_seconds", Type: field.TypeInt, Default: 0},
		{Name: "end_seconds", Type: field.TypeInt, Nullable: true},
		{Name: "video_id", Type: field.TypeString, Size: 26},
	}
	// VideoPlayRangesTable holds the schema information for the "video_play_ranges" table.
	VideoPlayRangesTable = &schema.Table{
		Name:       "video_play_ranges",
		Columns:    VideoPlayRangesColumns,
		PrimaryKey: []*schema.Column{VideoPlayRangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_play_ranges_videos_video_play_ranges",
				Columns:    []*schema.Column{VideoPlayRangesColumns[3]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// VideoTitleChangesColumns holds the columns for the "video_title_changes" table.
	VideoTitleChangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 26},
		{Name: "title", Type: field.TypeString, Size: 100},
		{Name: "normalized_title", Type: field.TypeString, Nullable: true},
		{Name: "changed_at", Type: field.TypeTime},
		{Name: "video_id", Type: field.TypeString, Size: 26},
	}
	// VideoTitleChangesTable holds the schema information for the "video_title_changes" table.
	VideoTitleChangesTable = &schema.Table{
		Name:       "video_title_changes",
		Columns:    VideoTitleChangesColumns,
		PrimaryKey: []*schema.Column{VideoTitleChangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_title_changes_videos_video_title_changes",
				Columns:    []*schema.Column{VideoTitleChangesColumns[4]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// VideoChannelColumns holds the columns for the "video_channel" table.
	VideoChannelColumns = []*schema.Column{
		{Name: "video_id", Type: field.TypeString, Size: 26},
		{Name: "channel_id", Type: field.TypeString, Size: 26},
	}
	// VideoChannelTable holds the schema information for the "video_channel" table.
	VideoChannelTable = &schema.Table{
		Name:       "video_channel",
		Columns:    VideoChannelColumns,
		PrimaryKey: []*schema.Column{VideoChannelColumns[0], VideoChannelColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_channel_video_id",
				Columns:    []*schema.Column{VideoChannelColumns[0]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "video_channel_channel_id",
				Columns:    []*schema.Column{VideoChannelColumns[1]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoryDescriptionTemplatesTable,
		ChannelsTable,
		DescriptionsTable,
		DescriptionChangesTable,
		PatChatsTable,
		PeriodicDescriptionTemplatesTable,
		VideosTable,
		VideoDisallowRangesTable,
		VideoPlayRangesTable,
		VideoTitleChangesTable,
		VideoChannelTable,
	}
)

func init() {
	DescriptionsTable.ForeignKeys[0].RefTable = PeriodicDescriptionTemplatesTable
	DescriptionsTable.ForeignKeys[1].RefTable = CategoryDescriptionTemplatesTable
	DescriptionsTable.ForeignKeys[2].RefTable = VideosTable
	DescriptionChangesTable.ForeignKeys[0].RefTable = DescriptionsTable
	PatChatsTable.ForeignKeys[0].RefTable = VideosTable
	VideoDisallowRangesTable.ForeignKeys[0].RefTable = VideosTable
	VideoPlayRangesTable.ForeignKeys[0].RefTable = VideosTable
	VideoTitleChangesTable.ForeignKeys[0].RefTable = VideosTable
	VideoChannelTable.ForeignKeys[0].RefTable = VideosTable
	VideoChannelTable.ForeignKeys[1].RefTable = ChannelsTable
}
