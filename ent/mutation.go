// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/categorydescriptiontemplate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/channel"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/descriptionchange"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/patchat"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/periodicdescriptiontemplate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videodisallowrange"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videoplayrange"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotitlechange"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategoryDescriptionTemplate = "CategoryDescriptionTemplate"
	TypeChannel                     = "Channel"
	TypeDescription                 = "Description"
	TypeDescriptionChange           = "DescriptionChange"
	TypePatChat                     = "PatChat"
	TypePeriodicDescriptionTemplate = "PeriodicDescriptionTemplate"
	TypeVideo                       = "Video"
	TypeVideoDisallowRange          = "VideoDisallowRange"
	TypeVideoPlayRange              = "VideoPlayRange"
	TypeVideoTitleChange            = "VideoTitleChange"
)

// CategoryDescriptionTemplateMutation represents an operation that mutates the CategoryDescriptionTemplate nodes in the graph.
type CategoryDescriptionTemplateMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	text                *string
	start_use_at        *time.Time
	last_use_at         *time.Time
	clearedFields       map[string]struct{}
	descriptions        map[string]struct{}
	removeddescriptions map[string]struct{}
	cleareddescriptions bool
	done                bool
	oldValue            func(context.Context) (*CategoryDescriptionTemplate, error)
	predicates          []predicate.CategoryDescriptionTemplate
}

var _ ent.Mutation = (*CategoryDescriptionTemplateMutation)(nil)

// categorydescriptiontemplateOption allows management of the mutation configuration using functional options.
type categorydescriptiontemplateOption func(*CategoryDescriptionTemplateMutation)

// newCategoryDescriptionTemplateMutation creates new mutation for the CategoryDescriptionTemplate entity.
func newCategoryDescriptionTemplateMutation(c config, op Op, opts ...categorydescriptiontemplateOption) *CategoryDescriptionTemplateMutation {
	m := &CategoryDescriptionTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeCategoryDescriptionTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryDescriptionTemplateID sets the ID field of the mutation.
func withCategoryDescriptionTemplateID(id string) categorydescriptiontemplateOption {
	return func(m *CategoryDescriptionTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *CategoryDescriptionTemplate
		)
		m.oldValue = func(ctx context.Context) (*CategoryDescriptionTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CategoryDescriptionTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategoryDescriptionTemplate sets the old CategoryDescriptionTemplate of the mutation.
func withCategoryDescriptionTemplate(node *CategoryDescriptionTemplate) categorydescriptiontemplateOption {
	return func(m *CategoryDescriptionTemplateMutation) {
		m.oldValue = func(context.Context) (*CategoryDescriptionTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryDescriptionTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryDescriptionTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CategoryDescriptionTemplate entities.
func (m *CategoryDescriptionTemplateMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryDescriptionTemplateMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryDescriptionTemplateMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CategoryDescriptionTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *CategoryDescriptionTemplateMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *CategoryDescriptionTemplateMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the CategoryDescriptionTemplate entity.
// If the CategoryDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryDescriptionTemplateMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *CategoryDescriptionTemplateMutation) ResetText() {
	m.text = nil
}

// SetStartUseAt sets the "start_use_at" field.
func (m *CategoryDescriptionTemplateMutation) SetStartUseAt(t time.Time) {
	m.start_use_at = &t
}

// StartUseAt returns the value of the "start_use_at" field in the mutation.
func (m *CategoryDescriptionTemplateMutation) StartUseAt() (r time.Time, exists bool) {
	v := m.start_use_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartUseAt returns the old "start_use_at" field's value of the CategoryDescriptionTemplate entity.
// If the CategoryDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryDescriptionTemplateMutation) OldStartUseAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartUseAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartUseAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartUseAt: %w", err)
	}
	return oldValue.StartUseAt, nil
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (m *CategoryDescriptionTemplateMutation) ClearStartUseAt() {
	m.start_use_at = nil
	m.clearedFields[categorydescriptiontemplate.FieldStartUseAt] = struct{}{}
}

// StartUseAtCleared returns if the "start_use_at" field was cleared in this mutation.
func (m *CategoryDescriptionTemplateMutation) StartUseAtCleared() bool {
	_, ok := m.clearedFields[categorydescriptiontemplate.FieldStartUseAt]
	return ok
}

// ResetStartUseAt resets all changes to the "start_use_at" field.
func (m *CategoryDescriptionTemplateMutation) ResetStartUseAt() {
	m.start_use_at = nil
	delete(m.clearedFields, categorydescriptiontemplate.FieldStartUseAt)
}

// SetLastUseAt sets the "last_use_at" field.
func (m *CategoryDescriptionTemplateMutation) SetLastUseAt(t time.Time) {
	m.last_use_at = &t
}

// LastUseAt returns the value of the "last_use_at" field in the mutation.
func (m *CategoryDescriptionTemplateMutation) LastUseAt() (r time.Time, exists bool) {
	v := m.last_use_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUseAt returns the old "last_use_at" field's value of the CategoryDescriptionTemplate entity.
// If the CategoryDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryDescriptionTemplateMutation) OldLastUseAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUseAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUseAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUseAt: %w", err)
	}
	return oldValue.LastUseAt, nil
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (m *CategoryDescriptionTemplateMutation) ClearLastUseAt() {
	m.last_use_at = nil
	m.clearedFields[categorydescriptiontemplate.FieldLastUseAt] = struct{}{}
}

// LastUseAtCleared returns if the "last_use_at" field was cleared in this mutation.
func (m *CategoryDescriptionTemplateMutation) LastUseAtCleared() bool {
	_, ok := m.clearedFields[categorydescriptiontemplate.FieldLastUseAt]
	return ok
}

// ResetLastUseAt resets all changes to the "last_use_at" field.
func (m *CategoryDescriptionTemplateMutation) ResetLastUseAt() {
	m.last_use_at = nil
	delete(m.clearedFields, categorydescriptiontemplate.FieldLastUseAt)
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by ids.
func (m *CategoryDescriptionTemplateMutation) AddDescriptionIDs(ids ...string) {
	if m.descriptions == nil {
		m.descriptions = make(map[string]struct{})
	}
	for i := range ids {
		m.descriptions[ids[i]] = struct{}{}
	}
}

// ClearDescriptions clears the "descriptions" edge to the Description entity.
func (m *CategoryDescriptionTemplateMutation) ClearDescriptions() {
	m.cleareddescriptions = true
}

// DescriptionsCleared reports if the "descriptions" edge to the Description entity was cleared.
func (m *CategoryDescriptionTemplateMutation) DescriptionsCleared() bool {
	return m.cleareddescriptions
}

// RemoveDescriptionIDs removes the "descriptions" edge to the Description entity by IDs.
func (m *CategoryDescriptionTemplateMutation) RemoveDescriptionIDs(ids ...string) {
	if m.removeddescriptions == nil {
		m.removeddescriptions = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.descriptions, ids[i])
		m.removeddescriptions[ids[i]] = struct{}{}
	}
}

// RemovedDescriptions returns the removed IDs of the "descriptions" edge to the Description entity.
func (m *CategoryDescriptionTemplateMutation) RemovedDescriptionsIDs() (ids []string) {
	for id := range m.removeddescriptions {
		ids = append(ids, id)
	}
	return
}

// DescriptionsIDs returns the "descriptions" edge IDs in the mutation.
func (m *CategoryDescriptionTemplateMutation) DescriptionsIDs() (ids []string) {
	for id := range m.descriptions {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptions resets all changes to the "descriptions" edge.
func (m *CategoryDescriptionTemplateMutation) ResetDescriptions() {
	m.descriptions = nil
	m.cleareddescriptions = false
	m.removeddescriptions = nil
}

// Where appends a list predicates to the CategoryDescriptionTemplateMutation builder.
func (m *CategoryDescriptionTemplateMutation) Where(ps ...predicate.CategoryDescriptionTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryDescriptionTemplateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryDescriptionTemplateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CategoryDescriptionTemplate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryDescriptionTemplateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryDescriptionTemplateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CategoryDescriptionTemplate).
func (m *CategoryDescriptionTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryDescriptionTemplateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.text != nil {
		fields = append(fields, categorydescriptiontemplate.FieldText)
	}
	if m.start_use_at != nil {
		fields = append(fields, categorydescriptiontemplate.FieldStartUseAt)
	}
	if m.last_use_at != nil {
		fields = append(fields, categorydescriptiontemplate.FieldLastUseAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryDescriptionTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categorydescriptiontemplate.FieldText:
		return m.Text()
	case categorydescriptiontemplate.FieldStartUseAt:
		return m.StartUseAt()
	case categorydescriptiontemplate.FieldLastUseAt:
		return m.LastUseAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryDescriptionTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case categorydescriptiontemplate.FieldText:
		return m.OldText(ctx)
	case categorydescriptiontemplate.FieldStartUseAt:
		return m.OldStartUseAt(ctx)
	case categorydescriptiontemplate.FieldLastUseAt:
		return m.OldLastUseAt(ctx)
	}
	return nil, fmt.Errorf("unknown CategoryDescriptionTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryDescriptionTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categorydescriptiontemplate.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case categorydescriptiontemplate.FieldStartUseAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartUseAt(v)
		return nil
	case categorydescriptiontemplate.FieldLastUseAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUseAt(v)
		return nil
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryDescriptionTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryDescriptionTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryDescriptionTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryDescriptionTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(categorydescriptiontemplate.FieldStartUseAt) {
		fields = append(fields, categorydescriptiontemplate.FieldStartUseAt)
	}
	if m.FieldCleared(categorydescriptiontemplate.FieldLastUseAt) {
		fields = append(fields, categorydescriptiontemplate.FieldLastUseAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryDescriptionTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryDescriptionTemplateMutation) ClearField(name string) error {
	switch name {
	case categorydescriptiontemplate.FieldStartUseAt:
		m.ClearStartUseAt()
		return nil
	case categorydescriptiontemplate.FieldLastUseAt:
		m.ClearLastUseAt()
		return nil
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryDescriptionTemplateMutation) ResetField(name string) error {
	switch name {
	case categorydescriptiontemplate.FieldText:
		m.ResetText()
		return nil
	case categorydescriptiontemplate.FieldStartUseAt:
		m.ResetStartUseAt()
		return nil
	case categorydescriptiontemplate.FieldLastUseAt:
		m.ResetLastUseAt()
		return nil
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryDescriptionTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.descriptions != nil {
		edges = append(edges, categorydescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryDescriptionTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case categorydescriptiontemplate.EdgeDescriptions:
		ids := make([]ent.Value, 0, len(m.descriptions))
		for id := range m.descriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryDescriptionTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddescriptions != nil {
		edges = append(edges, categorydescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryDescriptionTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case categorydescriptiontemplate.EdgeDescriptions:
		ids := make([]ent.Value, 0, len(m.removeddescriptions))
		for id := range m.removeddescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryDescriptionTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddescriptions {
		edges = append(edges, categorydescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryDescriptionTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case categorydescriptiontemplate.EdgeDescriptions:
		return m.cleareddescriptions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryDescriptionTemplateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryDescriptionTemplateMutation) ResetEdge(name string) error {
	switch name {
	case categorydescriptiontemplate.EdgeDescriptions:
		m.ResetDescriptions()
		return nil
	}
	return fmt.Errorf("unknown CategoryDescriptionTemplate edge %s", name)
}

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op            Op
	typ           string
	id            *string
	display_name  *string
	channel_id    *string
	handle        *string
	thumbnail_url *string
	clearedFields map[string]struct{}
	videos        map[string]struct{}
	removedvideos map[string]struct{}
	clearedvideos bool
	done          bool
	oldValue      func(context.Context) (*Channel, error)
	predicates    []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id string) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChannelMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChannelMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Channel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *ChannelMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ChannelMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ChannelMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetChannelID sets the "channel_id" field.
func (m *ChannelMutation) SetChannelID(s string) {
	m.channel_id = &s
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *ChannelMutation) ChannelID() (r string, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldChannelID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *ChannelMutation) ResetChannelID() {
	m.channel_id = nil
}

// SetHandle sets the "handle" field.
func (m *ChannelMutation) SetHandle(s string) {
	m.handle = &s
}

// Handle returns the value of the "handle" field in the mutation.
func (m *ChannelMutation) Handle() (r string, exists bool) {
	v := m.handle
	if v == nil {
		return
	}
	return *v, true
}

// OldHandle returns the old "handle" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldHandle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandle: %w", err)
	}
	return oldValue.Handle, nil
}

// ResetHandle resets all changes to the "handle" field.
func (m *ChannelMutation) ResetHandle() {
	m.handle = nil
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (m *ChannelMutation) SetThumbnailURL(s string) {
	m.thumbnail_url = &s
}

// ThumbnailURL returns the value of the "thumbnail_url" field in the mutation.
func (m *ChannelMutation) ThumbnailURL() (r string, exists bool) {
	v := m.thumbnail_url
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailURL returns the old "thumbnail_url" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldThumbnailURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailURL: %w", err)
	}
	return oldValue.ThumbnailURL, nil
}

// ResetThumbnailURL resets all changes to the "thumbnail_url" field.
func (m *ChannelMutation) ResetThumbnailURL() {
	m.thumbnail_url = nil
}

// AddVideoIDs adds the "videos" edge to the Video entity by ids.
func (m *ChannelMutation) AddVideoIDs(ids ...string) {
	if m.videos == nil {
		m.videos = make(map[string]struct{})
	}
	for i := range ids {
		m.videos[ids[i]] = struct{}{}
	}
}

// ClearVideos clears the "videos" edge to the Video entity.
func (m *ChannelMutation) ClearVideos() {
	m.clearedvideos = true
}

// VideosCleared reports if the "videos" edge to the Video entity was cleared.
func (m *ChannelMutation) VideosCleared() bool {
	return m.clearedvideos
}

// RemoveVideoIDs removes the "videos" edge to the Video entity by IDs.
func (m *ChannelMutation) RemoveVideoIDs(ids ...string) {
	if m.removedvideos == nil {
		m.removedvideos = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.videos, ids[i])
		m.removedvideos[ids[i]] = struct{}{}
	}
}

// RemovedVideos returns the removed IDs of the "videos" edge to the Video entity.
func (m *ChannelMutation) RemovedVideosIDs() (ids []string) {
	for id := range m.removedvideos {
		ids = append(ids, id)
	}
	return
}

// VideosIDs returns the "videos" edge IDs in the mutation.
func (m *ChannelMutation) VideosIDs() (ids []string) {
	for id := range m.videos {
		ids = append(ids, id)
	}
	return
}

// ResetVideos resets all changes to the "videos" edge.
func (m *ChannelMutation) ResetVideos() {
	m.videos = nil
	m.clearedvideos = false
	m.removedvideos = nil
}

// Where appends a list predicates to the ChannelMutation builder.
func (m *ChannelMutation) Where(ps ...predicate.Channel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChannelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChannelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Channel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChannelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.display_name != nil {
		fields = append(fields, channel.FieldDisplayName)
	}
	if m.channel_id != nil {
		fields = append(fields, channel.FieldChannelID)
	}
	if m.handle != nil {
		fields = append(fields, channel.FieldHandle)
	}
	if m.thumbnail_url != nil {
		fields = append(fields, channel.FieldThumbnailURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldDisplayName:
		return m.DisplayName()
	case channel.FieldChannelID:
		return m.ChannelID()
	case channel.FieldHandle:
		return m.Handle()
	case channel.FieldThumbnailURL:
		return m.ThumbnailURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case channel.FieldChannelID:
		return m.OldChannelID(ctx)
	case channel.FieldHandle:
		return m.OldHandle(ctx)
	case channel.FieldThumbnailURL:
		return m.OldThumbnailURL(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case channel.FieldChannelID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case channel.FieldHandle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandle(v)
		return nil
	case channel.FieldThumbnailURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailURL(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case channel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case channel.FieldHandle:
		m.ResetHandle()
		return nil
	case channel.FieldThumbnailURL:
		m.ResetThumbnailURL()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.videos != nil {
		edges = append(edges, channel.EdgeVideos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.videos))
		for id := range m.videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvideos != nil {
		edges = append(edges, channel.EdgeVideos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.removedvideos))
		for id := range m.removedvideos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvideos {
		edges = append(edges, channel.EdgeVideos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeVideos:
		return m.clearedvideos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeVideos:
		m.ResetVideos()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// DescriptionMutation represents an operation that mutates the Description nodes in the graph.
type DescriptionMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	raw                        *string
	variable                   *string
	normalized_variable        *string
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	video                      *string
	clearedvideo               bool
	periodic_template          *string
	clearedperiodic_template   bool
	category_template          *string
	clearedcategory_template   bool
	description_changes        map[string]struct{}
	removeddescription_changes map[string]struct{}
	cleareddescription_changes bool
	done                       bool
	oldValue                   func(context.Context) (*Description, error)
	predicates                 []predicate.Description
}

var _ ent.Mutation = (*DescriptionMutation)(nil)

// descriptionOption allows management of the mutation configuration using functional options.
type descriptionOption func(*DescriptionMutation)

// newDescriptionMutation creates new mutation for the Description entity.
func newDescriptionMutation(c config, op Op, opts ...descriptionOption) *DescriptionMutation {
	m := &DescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeDescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDescriptionID sets the ID field of the mutation.
func withDescriptionID(id string) descriptionOption {
	return func(m *DescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Description
		)
		m.oldValue = func(ctx context.Context) (*Description, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Description.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDescription sets the old Description of the mutation.
func withDescription(node *Description) descriptionOption {
	return func(m *DescriptionMutation) {
		m.oldValue = func(context.Context) (*Description, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Description entities.
func (m *DescriptionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DescriptionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DescriptionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Description.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRaw sets the "raw" field.
func (m *DescriptionMutation) SetRaw(s string) {
	m.raw = &s
}

// Raw returns the value of the "raw" field in the mutation.
func (m *DescriptionMutation) Raw() (r string, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the Description entity.
// If the Description object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionMutation) OldRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *DescriptionMutation) ResetRaw() {
	m.raw = nil
}

// SetVariable sets the "variable" field.
func (m *DescriptionMutation) SetVariable(s string) {
	m.variable = &s
}

// Variable returns the value of the "variable" field in the mutation.
func (m *DescriptionMutation) Variable() (r string, exists bool) {
	v := m.variable
	if v == nil {
		return
	}
	return *v, true
}

// OldVariable returns the old "variable" field's value of the Description entity.
// If the Description object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionMutation) OldVariable(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariable: %w", err)
	}
	return oldValue.Variable, nil
}

// ClearVariable clears the value of the "variable" field.
func (m *DescriptionMutation) ClearVariable() {
	m.variable = nil
	m.clearedFields[description.FieldVariable] = struct{}{}
}

// VariableCleared returns if the "variable" field was cleared in this mutation.
func (m *DescriptionMutation) VariableCleared() bool {
	_, ok := m.clearedFields[description.FieldVariable]
	return ok
}

// ResetVariable resets all changes to the "variable" field.
func (m *DescriptionMutation) ResetVariable() {
	m.variable = nil
	delete(m.clearedFields, description.FieldVariable)
}

// SetNormalizedVariable sets the "normalized_variable" field.
func (m *DescriptionMutation) SetNormalizedVariable(s string) {
	m.normalized_variable = &s
}

// NormalizedVariable returns the value of the "normalized_variable" field in the mutation.
func (m *DescriptionMutation) NormalizedVariable() (r string, exists bool) {
	v := m.normalized_variable
	if v == nil {
		return
	}
	return *v, true
}

// OldNormalizedVariable returns the old "normalized_variable" field's value of the Description entity.
// If the Description object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionMutation) OldNormalizedVariable(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNormalizedVariable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNormalizedVariable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNormalizedVariable: %w", err)
	}
	return oldValue.NormalizedVariable, nil
}

// ClearNormalizedVariable clears the value of the "normalized_variable" field.
func (m *DescriptionMutation) ClearNormalizedVariable() {
	m.normalized_variable = nil
	m.clearedFields[description.FieldNormalizedVariable] = struct{}{}
}

// NormalizedVariableCleared returns if the "normalized_variable" field was cleared in this mutation.
func (m *DescriptionMutation) NormalizedVariableCleared() bool {
	_, ok := m.clearedFields[description.FieldNormalizedVariable]
	return ok
}

// ResetNormalizedVariable resets all changes to the "normalized_variable" field.
func (m *DescriptionMutation) ResetNormalizedVariable() {
	m.normalized_variable = nil
	delete(m.clearedFields, description.FieldNormalizedVariable)
}

// SetCreatedAt sets the "created_at" field.
func (m *DescriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DescriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Description entity.
// If the Description object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DescriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DescriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DescriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Description entity.
// If the Description object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DescriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetVideoID sets the "video" edge to the Video entity by id.
func (m *DescriptionMutation) SetVideoID(id string) {
	m.video = &id
}

// ClearVideo clears the "video" edge to the Video entity.
func (m *DescriptionMutation) ClearVideo() {
	m.clearedvideo = true
}

// VideoCleared reports if the "video" edge to the Video entity was cleared.
func (m *DescriptionMutation) VideoCleared() bool {
	return m.clearedvideo
}

// VideoID returns the "video" edge ID in the mutation.
func (m *DescriptionMutation) VideoID() (id string, exists bool) {
	if m.video != nil {
		return *m.video, true
	}
	return
}

// VideoIDs returns the "video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VideoID instead. It exists only for internal usage by the builders.
func (m *DescriptionMutation) VideoIDs() (ids []string) {
	if id := m.video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVideo resets all changes to the "video" edge.
func (m *DescriptionMutation) ResetVideo() {
	m.video = nil
	m.clearedvideo = false
}

// SetPeriodicTemplateID sets the "periodic_template" edge to the PeriodicDescriptionTemplate entity by id.
func (m *DescriptionMutation) SetPeriodicTemplateID(id string) {
	m.periodic_template = &id
}

// ClearPeriodicTemplate clears the "periodic_template" edge to the PeriodicDescriptionTemplate entity.
func (m *DescriptionMutation) ClearPeriodicTemplate() {
	m.clearedperiodic_template = true
}

// PeriodicTemplateCleared reports if the "periodic_template" edge to the PeriodicDescriptionTemplate entity was cleared.
func (m *DescriptionMutation) PeriodicTemplateCleared() bool {
	return m.clearedperiodic_template
}

// PeriodicTemplateID returns the "periodic_template" edge ID in the mutation.
func (m *DescriptionMutation) PeriodicTemplateID() (id string, exists bool) {
	if m.periodic_template != nil {
		return *m.periodic_template, true
	}
	return
}

// PeriodicTemplateIDs returns the "periodic_template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PeriodicTemplateID instead. It exists only for internal usage by the builders.
func (m *DescriptionMutation) PeriodicTemplateIDs() (ids []string) {
	if id := m.periodic_template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPeriodicTemplate resets all changes to the "periodic_template" edge.
func (m *DescriptionMutation) ResetPeriodicTemplate() {
	m.periodic_template = nil
	m.clearedperiodic_template = false
}

// SetCategoryTemplateID sets the "category_template" edge to the CategoryDescriptionTemplate entity by id.
func (m *DescriptionMutation) SetCategoryTemplateID(id string) {
	m.category_template = &id
}

// ClearCategoryTemplate clears the "category_template" edge to the CategoryDescriptionTemplate entity.
func (m *DescriptionMutation) ClearCategoryTemplate() {
	m.clearedcategory_template = true
}

// CategoryTemplateCleared reports if the "category_template" edge to the CategoryDescriptionTemplate entity was cleared.
func (m *DescriptionMutation) CategoryTemplateCleared() bool {
	return m.clearedcategory_template
}

// CategoryTemplateID returns the "category_template" edge ID in the mutation.
func (m *DescriptionMutation) CategoryTemplateID() (id string, exists bool) {
	if m.category_template != nil {
		return *m.category_template, true
	}
	return
}

// CategoryTemplateIDs returns the "category_template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryTemplateID instead. It exists only for internal usage by the builders.
func (m *DescriptionMutation) CategoryTemplateIDs() (ids []string) {
	if id := m.category_template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategoryTemplate resets all changes to the "category_template" edge.
func (m *DescriptionMutation) ResetCategoryTemplate() {
	m.category_template = nil
	m.clearedcategory_template = false
}

// AddDescriptionChangeIDs adds the "description_changes" edge to the DescriptionChange entity by ids.
func (m *DescriptionMutation) AddDescriptionChangeIDs(ids ...string) {
	if m.description_changes == nil {
		m.description_changes = make(map[string]struct{})
	}
	for i := range ids {
		m.description_changes[ids[i]] = struct{}{}
	}
}

// ClearDescriptionChanges clears the "description_changes" edge to the DescriptionChange entity.
func (m *DescriptionMutation) ClearDescriptionChanges() {
	m.cleareddescription_changes = true
}

// DescriptionChangesCleared reports if the "description_changes" edge to the DescriptionChange entity was cleared.
func (m *DescriptionMutation) DescriptionChangesCleared() bool {
	return m.cleareddescription_changes
}

// RemoveDescriptionChangeIDs removes the "description_changes" edge to the DescriptionChange entity by IDs.
func (m *DescriptionMutation) RemoveDescriptionChangeIDs(ids ...string) {
	if m.removeddescription_changes == nil {
		m.removeddescription_changes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.description_changes, ids[i])
		m.removeddescription_changes[ids[i]] = struct{}{}
	}
}

// RemovedDescriptionChanges returns the removed IDs of the "description_changes" edge to the DescriptionChange entity.
func (m *DescriptionMutation) RemovedDescriptionChangesIDs() (ids []string) {
	for id := range m.removeddescription_changes {
		ids = append(ids, id)
	}
	return
}

// DescriptionChangesIDs returns the "description_changes" edge IDs in the mutation.
func (m *DescriptionMutation) DescriptionChangesIDs() (ids []string) {
	for id := range m.description_changes {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptionChanges resets all changes to the "description_changes" edge.
func (m *DescriptionMutation) ResetDescriptionChanges() {
	m.description_changes = nil
	m.cleareddescription_changes = false
	m.removeddescription_changes = nil
}

// Where appends a list predicates to the DescriptionMutation builder.
func (m *DescriptionMutation) Where(ps ...predicate.Description) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DescriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DescriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Description, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DescriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DescriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Description).
func (m *DescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DescriptionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.raw != nil {
		fields = append(fields, description.FieldRaw)
	}
	if m.variable != nil {
		fields = append(fields, description.FieldVariable)
	}
	if m.normalized_variable != nil {
		fields = append(fields, description.FieldNormalizedVariable)
	}
	if m.created_at != nil {
		fields = append(fields, description.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, description.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case description.FieldRaw:
		return m.Raw()
	case description.FieldVariable:
		return m.Variable()
	case description.FieldNormalizedVariable:
		return m.NormalizedVariable()
	case description.FieldCreatedAt:
		return m.CreatedAt()
	case description.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case description.FieldRaw:
		return m.OldRaw(ctx)
	case description.FieldVariable:
		return m.OldVariable(ctx)
	case description.FieldNormalizedVariable:
		return m.OldNormalizedVariable(ctx)
	case description.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case description.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Description field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case description.FieldRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	case description.FieldVariable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariable(v)
		return nil
	case description.FieldNormalizedVariable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNormalizedVariable(v)
		return nil
	case description.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case description.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Description field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DescriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DescriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Description numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DescriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(description.FieldVariable) {
		fields = append(fields, description.FieldVariable)
	}
	if m.FieldCleared(description.FieldNormalizedVariable) {
		fields = append(fields, description.FieldNormalizedVariable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DescriptionMutation) ClearField(name string) error {
	switch name {
	case description.FieldVariable:
		m.ClearVariable()
		return nil
	case description.FieldNormalizedVariable:
		m.ClearNormalizedVariable()
		return nil
	}
	return fmt.Errorf("unknown Description nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DescriptionMutation) ResetField(name string) error {
	switch name {
	case description.FieldRaw:
		m.ResetRaw()
		return nil
	case description.FieldVariable:
		m.ResetVariable()
		return nil
	case description.FieldNormalizedVariable:
		m.ResetNormalizedVariable()
		return nil
	case description.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case description.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Description field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.video != nil {
		edges = append(edges, description.EdgeVideo)
	}
	if m.periodic_template != nil {
		edges = append(edges, description.EdgePeriodicTemplate)
	}
	if m.category_template != nil {
		edges = append(edges, description.EdgeCategoryTemplate)
	}
	if m.description_changes != nil {
		edges = append(edges, description.EdgeDescriptionChanges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DescriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case description.EdgeVideo:
		if id := m.video; id != nil {
			return []ent.Value{*id}
		}
	case description.EdgePeriodicTemplate:
		if id := m.periodic_template; id != nil {
			return []ent.Value{*id}
		}
	case description.EdgeCategoryTemplate:
		if id := m.category_template; id != nil {
			return []ent.Value{*id}
		}
	case description.EdgeDescriptionChanges:
		ids := make([]ent.Value, 0, len(m.description_changes))
		for id := range m.description_changes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeddescription_changes != nil {
		edges = append(edges, description.EdgeDescriptionChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DescriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case description.EdgeDescriptionChanges:
		ids := make([]ent.Value, 0, len(m.removeddescription_changes))
		for id := range m.removeddescription_changes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedvideo {
		edges = append(edges, description.EdgeVideo)
	}
	if m.clearedperiodic_template {
		edges = append(edges, description.EdgePeriodicTemplate)
	}
	if m.clearedcategory_template {
		edges = append(edges, description.EdgeCategoryTemplate)
	}
	if m.cleareddescription_changes {
		edges = append(edges, description.EdgeDescriptionChanges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DescriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case description.EdgeVideo:
		return m.clearedvideo
	case description.EdgePeriodicTemplate:
		return m.clearedperiodic_template
	case description.EdgeCategoryTemplate:
		return m.clearedcategory_template
	case description.EdgeDescriptionChanges:
		return m.cleareddescription_changes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DescriptionMutation) ClearEdge(name string) error {
	switch name {
	case description.EdgeVideo:
		m.ClearVideo()
		return nil
	case description.EdgePeriodicTemplate:
		m.ClearPeriodicTemplate()
		return nil
	case description.EdgeCategoryTemplate:
		m.ClearCategoryTemplate()
		return nil
	}
	return fmt.Errorf("unknown Description unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DescriptionMutation) ResetEdge(name string) error {
	switch name {
	case description.EdgeVideo:
		m.ResetVideo()
		return nil
	case description.EdgePeriodicTemplate:
		m.ResetPeriodicTemplate()
		return nil
	case description.EdgeCategoryTemplate:
		m.ResetCategoryTemplate()
		return nil
	case description.EdgeDescriptionChanges:
		m.ResetDescriptionChanges()
		return nil
	}
	return fmt.Errorf("unknown Description edge %s", name)
}

// DescriptionChangeMutation represents an operation that mutates the DescriptionChange nodes in the graph.
type DescriptionChangeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	raw                 *string
	variable            *string
	normalized_variable *string
	changed_at          *time.Time
	clearedFields       map[string]struct{}
	description         *string
	cleareddescription  bool
	done                bool
	oldValue            func(context.Context) (*DescriptionChange, error)
	predicates          []predicate.DescriptionChange
}

var _ ent.Mutation = (*DescriptionChangeMutation)(nil)

// descriptionchangeOption allows management of the mutation configuration using functional options.
type descriptionchangeOption func(*DescriptionChangeMutation)

// newDescriptionChangeMutation creates new mutation for the DescriptionChange entity.
func newDescriptionChangeMutation(c config, op Op, opts ...descriptionchangeOption) *DescriptionChangeMutation {
	m := &DescriptionChangeMutation{
		config:        c,
		op:            op,
		typ:           TypeDescriptionChange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDescriptionChangeID sets the ID field of the mutation.
func withDescriptionChangeID(id string) descriptionchangeOption {
	return func(m *DescriptionChangeMutation) {
		var (
			err   error
			once  sync.Once
			value *DescriptionChange
		)
		m.oldValue = func(ctx context.Context) (*DescriptionChange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DescriptionChange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDescriptionChange sets the old DescriptionChange of the mutation.
func withDescriptionChange(node *DescriptionChange) descriptionchangeOption {
	return func(m *DescriptionChangeMutation) {
		m.oldValue = func(context.Context) (*DescriptionChange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DescriptionChangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DescriptionChangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DescriptionChange entities.
func (m *DescriptionChangeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DescriptionChangeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DescriptionChangeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DescriptionChange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRaw sets the "raw" field.
func (m *DescriptionChangeMutation) SetRaw(s string) {
	m.raw = &s
}

// Raw returns the value of the "raw" field in the mutation.
func (m *DescriptionChangeMutation) Raw() (r string, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the DescriptionChange entity.
// If the DescriptionChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionChangeMutation) OldRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *DescriptionChangeMutation) ResetRaw() {
	m.raw = nil
}

// SetVariable sets the "variable" field.
func (m *DescriptionChangeMutation) SetVariable(s string) {
	m.variable = &s
}

// Variable returns the value of the "variable" field in the mutation.
func (m *DescriptionChangeMutation) Variable() (r string, exists bool) {
	v := m.variable
	if v == nil {
		return
	}
	return *v, true
}

// OldVariable returns the old "variable" field's value of the DescriptionChange entity.
// If the DescriptionChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionChangeMutation) OldVariable(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariable: %w", err)
	}
	return oldValue.Variable, nil
}

// ClearVariable clears the value of the "variable" field.
func (m *DescriptionChangeMutation) ClearVariable() {
	m.variable = nil
	m.clearedFields[descriptionchange.FieldVariable] = struct{}{}
}

// VariableCleared returns if the "variable" field was cleared in this mutation.
func (m *DescriptionChangeMutation) VariableCleared() bool {
	_, ok := m.clearedFields[descriptionchange.FieldVariable]
	return ok
}

// ResetVariable resets all changes to the "variable" field.
func (m *DescriptionChangeMutation) ResetVariable() {
	m.variable = nil
	delete(m.clearedFields, descriptionchange.FieldVariable)
}

// SetNormalizedVariable sets the "normalized_variable" field.
func (m *DescriptionChangeMutation) SetNormalizedVariable(s string) {
	m.normalized_variable = &s
}

// NormalizedVariable returns the value of the "normalized_variable" field in the mutation.
func (m *DescriptionChangeMutation) NormalizedVariable() (r string, exists bool) {
	v := m.normalized_variable
	if v == nil {
		return
	}
	return *v, true
}

// OldNormalizedVariable returns the old "normalized_variable" field's value of the DescriptionChange entity.
// If the DescriptionChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionChangeMutation) OldNormalizedVariable(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNormalizedVariable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNormalizedVariable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNormalizedVariable: %w", err)
	}
	return oldValue.NormalizedVariable, nil
}

// ClearNormalizedVariable clears the value of the "normalized_variable" field.
func (m *DescriptionChangeMutation) ClearNormalizedVariable() {
	m.normalized_variable = nil
	m.clearedFields[descriptionchange.FieldNormalizedVariable] = struct{}{}
}

// NormalizedVariableCleared returns if the "normalized_variable" field was cleared in this mutation.
func (m *DescriptionChangeMutation) NormalizedVariableCleared() bool {
	_, ok := m.clearedFields[descriptionchange.FieldNormalizedVariable]
	return ok
}

// ResetNormalizedVariable resets all changes to the "normalized_variable" field.
func (m *DescriptionChangeMutation) ResetNormalizedVariable() {
	m.normalized_variable = nil
	delete(m.clearedFields, descriptionchange.FieldNormalizedVariable)
}

// SetChangedAt sets the "changed_at" field.
func (m *DescriptionChangeMutation) SetChangedAt(t time.Time) {
	m.changed_at = &t
}

// ChangedAt returns the value of the "changed_at" field in the mutation.
func (m *DescriptionChangeMutation) ChangedAt() (r time.Time, exists bool) {
	v := m.changed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldChangedAt returns the old "changed_at" field's value of the DescriptionChange entity.
// If the DescriptionChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionChangeMutation) OldChangedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangedAt: %w", err)
	}
	return oldValue.ChangedAt, nil
}

// ResetChangedAt resets all changes to the "changed_at" field.
func (m *DescriptionChangeMutation) ResetChangedAt() {
	m.changed_at = nil
}

// SetDescriptionID sets the "description" edge to the Description entity by id.
func (m *DescriptionChangeMutation) SetDescriptionID(id string) {
	m.description = &id
}

// ClearDescription clears the "description" edge to the Description entity.
func (m *DescriptionChangeMutation) ClearDescription() {
	m.cleareddescription = true
}

// DescriptionCleared reports if the "description" edge to the Description entity was cleared.
func (m *DescriptionChangeMutation) DescriptionCleared() bool {
	return m.cleareddescription
}

// DescriptionID returns the "description" edge ID in the mutation.
func (m *DescriptionChangeMutation) DescriptionID() (id string, exists bool) {
	if m.description != nil {
		return *m.description, true
	}
	return
}

// DescriptionIDs returns the "description" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DescriptionID instead. It exists only for internal usage by the builders.
func (m *DescriptionChangeMutation) DescriptionIDs() (ids []string) {
	if id := m.description; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDescription resets all changes to the "description" edge.
func (m *DescriptionChangeMutation) ResetDescription() {
	m.description = nil
	m.cleareddescription = false
}

// Where appends a list predicates to the DescriptionChangeMutation builder.
func (m *DescriptionChangeMutation) Where(ps ...predicate.DescriptionChange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DescriptionChangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DescriptionChangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DescriptionChange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DescriptionChangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DescriptionChangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DescriptionChange).
func (m *DescriptionChangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DescriptionChangeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.raw != nil {
		fields = append(fields, descriptionchange.FieldRaw)
	}
	if m.variable != nil {
		fields = append(fields, descriptionchange.FieldVariable)
	}
	if m.normalized_variable != nil {
		fields = append(fields, descriptionchange.FieldNormalizedVariable)
	}
	if m.changed_at != nil {
		fields = append(fields, descriptionchange.FieldChangedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DescriptionChangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case descriptionchange.FieldRaw:
		return m.Raw()
	case descriptionchange.FieldVariable:
		return m.Variable()
	case descriptionchange.FieldNormalizedVariable:
		return m.NormalizedVariable()
	case descriptionchange.FieldChangedAt:
		return m.ChangedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DescriptionChangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case descriptionchange.FieldRaw:
		return m.OldRaw(ctx)
	case descriptionchange.FieldVariable:
		return m.OldVariable(ctx)
	case descriptionchange.FieldNormalizedVariable:
		return m.OldNormalizedVariable(ctx)
	case descriptionchange.FieldChangedAt:
		return m.OldChangedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DescriptionChange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionChangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case descriptionchange.FieldRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	case descriptionchange.FieldVariable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariable(v)
		return nil
	case descriptionchange.FieldNormalizedVariable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNormalizedVariable(v)
		return nil
	case descriptionchange.FieldChangedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DescriptionChange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DescriptionChangeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DescriptionChangeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionChangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DescriptionChange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DescriptionChangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(descriptionchange.FieldVariable) {
		fields = append(fields, descriptionchange.FieldVariable)
	}
	if m.FieldCleared(descriptionchange.FieldNormalizedVariable) {
		fields = append(fields, descriptionchange.FieldNormalizedVariable)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DescriptionChangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DescriptionChangeMutation) ClearField(name string) error {
	switch name {
	case descriptionchange.FieldVariable:
		m.ClearVariable()
		return nil
	case descriptionchange.FieldNormalizedVariable:
		m.ClearNormalizedVariable()
		return nil
	}
	return fmt.Errorf("unknown DescriptionChange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DescriptionChangeMutation) ResetField(name string) error {
	switch name {
	case descriptionchange.FieldRaw:
		m.ResetRaw()
		return nil
	case descriptionchange.FieldVariable:
		m.ResetVariable()
		return nil
	case descriptionchange.FieldNormalizedVariable:
		m.ResetNormalizedVariable()
		return nil
	case descriptionchange.FieldChangedAt:
		m.ResetChangedAt()
		return nil
	}
	return fmt.Errorf("unknown DescriptionChange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DescriptionChangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.description != nil {
		edges = append(edges, descriptionchange.EdgeDescription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DescriptionChangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case descriptionchange.EdgeDescription:
		if id := m.description; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DescriptionChangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DescriptionChangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DescriptionChangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddescription {
		edges = append(edges, descriptionchange.EdgeDescription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DescriptionChangeMutation) EdgeCleared(name string) bool {
	switch name {
	case descriptionchange.EdgeDescription:
		return m.cleareddescription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DescriptionChangeMutation) ClearEdge(name string) error {
	switch name {
	case descriptionchange.EdgeDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown DescriptionChange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DescriptionChangeMutation) ResetEdge(name string) error {
	switch name {
	case descriptionchange.EdgeDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown DescriptionChange edge %s", name)
}

// PatChatMutation represents an operation that mutates the PatChat nodes in the graph.
type PatChatMutation struct {
	config
	op            Op
	typ           string
	id            *string
	message       *string
	magnitude     *float64
	addmagnitude  *float64
	score         *float64
	addscore      *float64
	is_negative   *bool
	published_at  *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	video         *string
	clearedvideo  bool
	done          bool
	oldValue      func(context.Context) (*PatChat, error)
	predicates    []predicate.PatChat
}

var _ ent.Mutation = (*PatChatMutation)(nil)

// patchatOption allows management of the mutation configuration using functional options.
type patchatOption func(*PatChatMutation)

// newPatChatMutation creates new mutation for the PatChat entity.
func newPatChatMutation(c config, op Op, opts ...patchatOption) *PatChatMutation {
	m := &PatChatMutation{
		config:        c,
		op:            op,
		typ:           TypePatChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatChatID sets the ID field of the mutation.
func withPatChatID(id string) patchatOption {
	return func(m *PatChatMutation) {
		var (
			err   error
			once  sync.Once
			value *PatChat
		)
		m.oldValue = func(ctx context.Context) (*PatChat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PatChat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatChat sets the old PatChat of the mutation.
func withPatChat(node *PatChat) patchatOption {
	return func(m *PatChatMutation) {
		m.oldValue = func(context.Context) (*PatChat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PatChat entities.
func (m *PatChatMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PatChatMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PatChatMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PatChat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *PatChatMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *PatChatMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *PatChatMutation) ResetMessage() {
	m.message = nil
}

// SetMagnitude sets the "magnitude" field.
func (m *PatChatMutation) SetMagnitude(f float64) {
	m.magnitude = &f
	m.addmagnitude = nil
}

// Magnitude returns the value of the "magnitude" field in the mutation.
func (m *PatChatMutation) Magnitude() (r float64, exists bool) {
	v := m.magnitude
	if v == nil {
		return
	}
	return *v, true
}

// OldMagnitude returns the old "magnitude" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldMagnitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMagnitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMagnitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMagnitude: %w", err)
	}
	return oldValue.Magnitude, nil
}

// AddMagnitude adds f to the "magnitude" field.
func (m *PatChatMutation) AddMagnitude(f float64) {
	if m.addmagnitude != nil {
		*m.addmagnitude += f
	} else {
		m.addmagnitude = &f
	}
}

// AddedMagnitude returns the value that was added to the "magnitude" field in this mutation.
func (m *PatChatMutation) AddedMagnitude() (r float64, exists bool) {
	v := m.addmagnitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetMagnitude resets all changes to the "magnitude" field.
func (m *PatChatMutation) ResetMagnitude() {
	m.magnitude = nil
	m.addmagnitude = nil
}

// SetScore sets the "score" field.
func (m *PatChatMutation) SetScore(f float64) {
	m.score = &f
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *PatChatMutation) Score() (r float64, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldScore(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds f to the "score" field.
func (m *PatChatMutation) AddScore(f float64) {
	if m.addscore != nil {
		*m.addscore += f
	} else {
		m.addscore = &f
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *PatChatMutation) AddedScore() (r float64, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *PatChatMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetIsNegative sets the "is_negative" field.
func (m *PatChatMutation) SetIsNegative(b bool) {
	m.is_negative = &b
}

// IsNegative returns the value of the "is_negative" field in the mutation.
func (m *PatChatMutation) IsNegative() (r bool, exists bool) {
	v := m.is_negative
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNegative returns the old "is_negative" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldIsNegative(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsNegative is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsNegative requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNegative: %w", err)
	}
	return oldValue.IsNegative, nil
}

// ResetIsNegative resets all changes to the "is_negative" field.
func (m *PatChatMutation) ResetIsNegative() {
	m.is_negative = nil
}

// SetPublishedAt sets the "published_at" field.
func (m *PatChatMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *PatChatMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *PatChatMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PatChatMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PatChatMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PatChat entity.
// If the PatChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatChatMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PatChatMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetVideoID sets the "video" edge to the Video entity by id.
func (m *PatChatMutation) SetVideoID(id string) {
	m.video = &id
}

// ClearVideo clears the "video" edge to the Video entity.
func (m *PatChatMutation) ClearVideo() {
	m.clearedvideo = true
}

// VideoCleared reports if the "video" edge to the Video entity was cleared.
func (m *PatChatMutation) VideoCleared() bool {
	return m.clearedvideo
}

// VideoID returns the "video" edge ID in the mutation.
func (m *PatChatMutation) VideoID() (id string, exists bool) {
	if m.video != nil {
		return *m.video, true
	}
	return
}

// VideoIDs returns the "video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VideoID instead. It exists only for internal usage by the builders.
func (m *PatChatMutation) VideoIDs() (ids []string) {
	if id := m.video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVideo resets all changes to the "video" edge.
func (m *PatChatMutation) ResetVideo() {
	m.video = nil
	m.clearedvideo = false
}

// Where appends a list predicates to the PatChatMutation builder.
func (m *PatChatMutation) Where(ps ...predicate.PatChat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PatChatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PatChatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PatChat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PatChatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PatChatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PatChat).
func (m *PatChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatChatMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.message != nil {
		fields = append(fields, patchat.FieldMessage)
	}
	if m.magnitude != nil {
		fields = append(fields, patchat.FieldMagnitude)
	}
	if m.score != nil {
		fields = append(fields, patchat.FieldScore)
	}
	if m.is_negative != nil {
		fields = append(fields, patchat.FieldIsNegative)
	}
	if m.published_at != nil {
		fields = append(fields, patchat.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, patchat.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patchat.FieldMessage:
		return m.Message()
	case patchat.FieldMagnitude:
		return m.Magnitude()
	case patchat.FieldScore:
		return m.Score()
	case patchat.FieldIsNegative:
		return m.IsNegative()
	case patchat.FieldPublishedAt:
		return m.PublishedAt()
	case patchat.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patchat.FieldMessage:
		return m.OldMessage(ctx)
	case patchat.FieldMagnitude:
		return m.OldMagnitude(ctx)
	case patchat.FieldScore:
		return m.OldScore(ctx)
	case patchat.FieldIsNegative:
		return m.OldIsNegative(ctx)
	case patchat.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case patchat.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PatChat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patchat.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case patchat.FieldMagnitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMagnitude(v)
		return nil
	case patchat.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case patchat.FieldIsNegative:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNegative(v)
		return nil
	case patchat.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case patchat.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PatChat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatChatMutation) AddedFields() []string {
	var fields []string
	if m.addmagnitude != nil {
		fields = append(fields, patchat.FieldMagnitude)
	}
	if m.addscore != nil {
		fields = append(fields, patchat.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatChatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patchat.FieldMagnitude:
		return m.AddedMagnitude()
	case patchat.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patchat.FieldMagnitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMagnitude(v)
		return nil
	case patchat.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown PatChat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PatChat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatChatMutation) ResetField(name string) error {
	switch name {
	case patchat.FieldMessage:
		m.ResetMessage()
		return nil
	case patchat.FieldMagnitude:
		m.ResetMagnitude()
		return nil
	case patchat.FieldScore:
		m.ResetScore()
		return nil
	case patchat.FieldIsNegative:
		m.ResetIsNegative()
		return nil
	case patchat.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case patchat.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown PatChat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.video != nil {
		edges = append(edges, patchat.EdgeVideo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patchat.EdgeVideo:
		if id := m.video; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatChatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvideo {
		edges = append(edges, patchat.EdgeVideo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatChatMutation) EdgeCleared(name string) bool {
	switch name {
	case patchat.EdgeVideo:
		return m.clearedvideo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatChatMutation) ClearEdge(name string) error {
	switch name {
	case patchat.EdgeVideo:
		m.ClearVideo()
		return nil
	}
	return fmt.Errorf("unknown PatChat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatChatMutation) ResetEdge(name string) error {
	switch name {
	case patchat.EdgeVideo:
		m.ResetVideo()
		return nil
	}
	return fmt.Errorf("unknown PatChat edge %s", name)
}

// PeriodicDescriptionTemplateMutation represents an operation that mutates the PeriodicDescriptionTemplate nodes in the graph.
type PeriodicDescriptionTemplateMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	text                *string
	start_use_at        *time.Time
	last_use_at         *time.Time
	clearedFields       map[string]struct{}
	descriptions        map[string]struct{}
	removeddescriptions map[string]struct{}
	cleareddescriptions bool
	done                bool
	oldValue            func(context.Context) (*PeriodicDescriptionTemplate, error)
	predicates          []predicate.PeriodicDescriptionTemplate
}

var _ ent.Mutation = (*PeriodicDescriptionTemplateMutation)(nil)

// periodicdescriptiontemplateOption allows management of the mutation configuration using functional options.
type periodicdescriptiontemplateOption func(*PeriodicDescriptionTemplateMutation)

// newPeriodicDescriptionTemplateMutation creates new mutation for the PeriodicDescriptionTemplate entity.
func newPeriodicDescriptionTemplateMutation(c config, op Op, opts ...periodicdescriptiontemplateOption) *PeriodicDescriptionTemplateMutation {
	m := &PeriodicDescriptionTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypePeriodicDescriptionTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPeriodicDescriptionTemplateID sets the ID field of the mutation.
func withPeriodicDescriptionTemplateID(id string) periodicdescriptiontemplateOption {
	return func(m *PeriodicDescriptionTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *PeriodicDescriptionTemplate
		)
		m.oldValue = func(ctx context.Context) (*PeriodicDescriptionTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PeriodicDescriptionTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPeriodicDescriptionTemplate sets the old PeriodicDescriptionTemplate of the mutation.
func withPeriodicDescriptionTemplate(node *PeriodicDescriptionTemplate) periodicdescriptiontemplateOption {
	return func(m *PeriodicDescriptionTemplateMutation) {
		m.oldValue = func(context.Context) (*PeriodicDescriptionTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PeriodicDescriptionTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PeriodicDescriptionTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PeriodicDescriptionTemplate entities.
func (m *PeriodicDescriptionTemplateMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PeriodicDescriptionTemplateMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PeriodicDescriptionTemplateMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PeriodicDescriptionTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *PeriodicDescriptionTemplateMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *PeriodicDescriptionTemplateMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the PeriodicDescriptionTemplate entity.
// If the PeriodicDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PeriodicDescriptionTemplateMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *PeriodicDescriptionTemplateMutation) ResetText() {
	m.text = nil
}

// SetStartUseAt sets the "start_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) SetStartUseAt(t time.Time) {
	m.start_use_at = &t
}

// StartUseAt returns the value of the "start_use_at" field in the mutation.
func (m *PeriodicDescriptionTemplateMutation) StartUseAt() (r time.Time, exists bool) {
	v := m.start_use_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartUseAt returns the old "start_use_at" field's value of the PeriodicDescriptionTemplate entity.
// If the PeriodicDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PeriodicDescriptionTemplateMutation) OldStartUseAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartUseAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartUseAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartUseAt: %w", err)
	}
	return oldValue.StartUseAt, nil
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) ClearStartUseAt() {
	m.start_use_at = nil
	m.clearedFields[periodicdescriptiontemplate.FieldStartUseAt] = struct{}{}
}

// StartUseAtCleared returns if the "start_use_at" field was cleared in this mutation.
func (m *PeriodicDescriptionTemplateMutation) StartUseAtCleared() bool {
	_, ok := m.clearedFields[periodicdescriptiontemplate.FieldStartUseAt]
	return ok
}

// ResetStartUseAt resets all changes to the "start_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) ResetStartUseAt() {
	m.start_use_at = nil
	delete(m.clearedFields, periodicdescriptiontemplate.FieldStartUseAt)
}

// SetLastUseAt sets the "last_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) SetLastUseAt(t time.Time) {
	m.last_use_at = &t
}

// LastUseAt returns the value of the "last_use_at" field in the mutation.
func (m *PeriodicDescriptionTemplateMutation) LastUseAt() (r time.Time, exists bool) {
	v := m.last_use_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUseAt returns the old "last_use_at" field's value of the PeriodicDescriptionTemplate entity.
// If the PeriodicDescriptionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PeriodicDescriptionTemplateMutation) OldLastUseAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUseAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUseAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUseAt: %w", err)
	}
	return oldValue.LastUseAt, nil
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) ClearLastUseAt() {
	m.last_use_at = nil
	m.clearedFields[periodicdescriptiontemplate.FieldLastUseAt] = struct{}{}
}

// LastUseAtCleared returns if the "last_use_at" field was cleared in this mutation.
func (m *PeriodicDescriptionTemplateMutation) LastUseAtCleared() bool {
	_, ok := m.clearedFields[periodicdescriptiontemplate.FieldLastUseAt]
	return ok
}

// ResetLastUseAt resets all changes to the "last_use_at" field.
func (m *PeriodicDescriptionTemplateMutation) ResetLastUseAt() {
	m.last_use_at = nil
	delete(m.clearedFields, periodicdescriptiontemplate.FieldLastUseAt)
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by ids.
func (m *PeriodicDescriptionTemplateMutation) AddDescriptionIDs(ids ...string) {
	if m.descriptions == nil {
		m.descriptions = make(map[string]struct{})
	}
	for i := range ids {
		m.descriptions[ids[i]] = struct{}{}
	}
}

// ClearDescriptions clears the "descriptions" edge to the Description entity.
func (m *PeriodicDescriptionTemplateMutation) ClearDescriptions() {
	m.cleareddescriptions = true
}

// DescriptionsCleared reports if the "descriptions" edge to the Description entity was cleared.
func (m *PeriodicDescriptionTemplateMutation) DescriptionsCleared() bool {
	return m.cleareddescriptions
}

// RemoveDescriptionIDs removes the "descriptions" edge to the Description entity by IDs.
func (m *PeriodicDescriptionTemplateMutation) RemoveDescriptionIDs(ids ...string) {
	if m.removeddescriptions == nil {
		m.removeddescriptions = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.descriptions, ids[i])
		m.removeddescriptions[ids[i]] = struct{}{}
	}
}

// RemovedDescriptions returns the removed IDs of the "descriptions" edge to the Description entity.
func (m *PeriodicDescriptionTemplateMutation) RemovedDescriptionsIDs() (ids []string) {
	for id := range m.removeddescriptions {
		ids = append(ids, id)
	}
	return
}

// DescriptionsIDs returns the "descriptions" edge IDs in the mutation.
func (m *PeriodicDescriptionTemplateMutation) DescriptionsIDs() (ids []string) {
	for id := range m.descriptions {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptions resets all changes to the "descriptions" edge.
func (m *PeriodicDescriptionTemplateMutation) ResetDescriptions() {
	m.descriptions = nil
	m.cleareddescriptions = false
	m.removeddescriptions = nil
}

// Where appends a list predicates to the PeriodicDescriptionTemplateMutation builder.
func (m *PeriodicDescriptionTemplateMutation) Where(ps ...predicate.PeriodicDescriptionTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PeriodicDescriptionTemplateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PeriodicDescriptionTemplateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PeriodicDescriptionTemplate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PeriodicDescriptionTemplateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PeriodicDescriptionTemplateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PeriodicDescriptionTemplate).
func (m *PeriodicDescriptionTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PeriodicDescriptionTemplateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.text != nil {
		fields = append(fields, periodicdescriptiontemplate.FieldText)
	}
	if m.start_use_at != nil {
		fields = append(fields, periodicdescriptiontemplate.FieldStartUseAt)
	}
	if m.last_use_at != nil {
		fields = append(fields, periodicdescriptiontemplate.FieldLastUseAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PeriodicDescriptionTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case periodicdescriptiontemplate.FieldText:
		return m.Text()
	case periodicdescriptiontemplate.FieldStartUseAt:
		return m.StartUseAt()
	case periodicdescriptiontemplate.FieldLastUseAt:
		return m.LastUseAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PeriodicDescriptionTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case periodicdescriptiontemplate.FieldText:
		return m.OldText(ctx)
	case periodicdescriptiontemplate.FieldStartUseAt:
		return m.OldStartUseAt(ctx)
	case periodicdescriptiontemplate.FieldLastUseAt:
		return m.OldLastUseAt(ctx)
	}
	return nil, fmt.Errorf("unknown PeriodicDescriptionTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeriodicDescriptionTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case periodicdescriptiontemplate.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case periodicdescriptiontemplate.FieldStartUseAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartUseAt(v)
		return nil
	case periodicdescriptiontemplate.FieldLastUseAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUseAt(v)
		return nil
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PeriodicDescriptionTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PeriodicDescriptionTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeriodicDescriptionTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PeriodicDescriptionTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(periodicdescriptiontemplate.FieldStartUseAt) {
		fields = append(fields, periodicdescriptiontemplate.FieldStartUseAt)
	}
	if m.FieldCleared(periodicdescriptiontemplate.FieldLastUseAt) {
		fields = append(fields, periodicdescriptiontemplate.FieldLastUseAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PeriodicDescriptionTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PeriodicDescriptionTemplateMutation) ClearField(name string) error {
	switch name {
	case periodicdescriptiontemplate.FieldStartUseAt:
		m.ClearStartUseAt()
		return nil
	case periodicdescriptiontemplate.FieldLastUseAt:
		m.ClearLastUseAt()
		return nil
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PeriodicDescriptionTemplateMutation) ResetField(name string) error {
	switch name {
	case periodicdescriptiontemplate.FieldText:
		m.ResetText()
		return nil
	case periodicdescriptiontemplate.FieldStartUseAt:
		m.ResetStartUseAt()
		return nil
	case periodicdescriptiontemplate.FieldLastUseAt:
		m.ResetLastUseAt()
		return nil
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PeriodicDescriptionTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.descriptions != nil {
		edges = append(edges, periodicdescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PeriodicDescriptionTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case periodicdescriptiontemplate.EdgeDescriptions:
		ids := make([]ent.Value, 0, len(m.descriptions))
		for id := range m.descriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PeriodicDescriptionTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddescriptions != nil {
		edges = append(edges, periodicdescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PeriodicDescriptionTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case periodicdescriptiontemplate.EdgeDescriptions:
		ids := make([]ent.Value, 0, len(m.removeddescriptions))
		for id := range m.removeddescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PeriodicDescriptionTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddescriptions {
		edges = append(edges, periodicdescriptiontemplate.EdgeDescriptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PeriodicDescriptionTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case periodicdescriptiontemplate.EdgeDescriptions:
		return m.cleareddescriptions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PeriodicDescriptionTemplateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PeriodicDescriptionTemplateMutation) ResetEdge(name string) error {
	switch name {
	case periodicdescriptiontemplate.EdgeDescriptions:
		m.ResetDescriptions()
		return nil
	}
	return fmt.Errorf("unknown PeriodicDescriptionTemplate edge %s", name)
}

// VideoMutation represents an operation that mutates the Video nodes in the graph.
type VideoMutation struct {
	config
	op                           Op
	typ                          string
	id                           *string
	video_id                     *string
	title                        *string
	normalized_title             *string
	duration_seconds             *int
	addduration_seconds          *int
	is_collaboration             *bool
	status                       *string
	chat_id                      *string
	has_time_range               *bool
	scheduled_at                 *time.Time
	actual_start_at              *time.Time
	actual_end_at                *time.Time
	published_at                 *time.Time
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	descriptions                 *string
	cleareddescriptions          bool
	channel                      map[string]struct{}
	removedchannel               map[string]struct{}
	clearedchannel               bool
	video_play_ranges            map[string]struct{}
	removedvideo_play_ranges     map[string]struct{}
	clearedvideo_play_ranges     bool
	video_disallow_ranges        map[string]struct{}
	removedvideo_disallow_ranges map[string]struct{}
	clearedvideo_disallow_ranges bool
	video_title_changes          map[string]struct{}
	removedvideo_title_changes   map[string]struct{}
	clearedvideo_title_changes   bool
	_Pat_chats                   map[string]struct{}
	removed_Pat_chats            map[string]struct{}
	cleared_Pat_chats            bool
	done                         bool
	oldValue                     func(context.Context) (*Video, error)
	predicates                   []predicate.Video
}

var _ ent.Mutation = (*VideoMutation)(nil)

// videoOption allows management of the mutation configuration using functional options.
type videoOption func(*VideoMutation)

// newVideoMutation creates new mutation for the Video entity.
func newVideoMutation(c config, op Op, opts ...videoOption) *VideoMutation {
	m := &VideoMutation{
		config:        c,
		op:            op,
		typ:           TypeVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoID sets the ID field of the mutation.
func withVideoID(id string) videoOption {
	return func(m *VideoMutation) {
		var (
			err   error
			once  sync.Once
			value *Video
		)
		m.oldValue = func(ctx context.Context) (*Video, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Video.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideo sets the old Video of the mutation.
func withVideo(node *Video) videoOption {
	return func(m *VideoMutation) {
		m.oldValue = func(context.Context) (*Video, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Video entities.
func (m *VideoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Video.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVideoID sets the "video_id" field.
func (m *VideoMutation) SetVideoID(s string) {
	m.video_id = &s
}

// VideoID returns the value of the "video_id" field in the mutation.
func (m *VideoMutation) VideoID() (r string, exists bool) {
	v := m.video_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoID returns the old "video_id" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldVideoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoID: %w", err)
	}
	return oldValue.VideoID, nil
}

// ResetVideoID resets all changes to the "video_id" field.
func (m *VideoMutation) ResetVideoID() {
	m.video_id = nil
}

// SetTitle sets the "title" field.
func (m *VideoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *VideoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *VideoMutation) ResetTitle() {
	m.title = nil
}

// SetNormalizedTitle sets the "normalized_title" field.
func (m *VideoMutation) SetNormalizedTitle(s string) {
	m.normalized_title = &s
}

// NormalizedTitle returns the value of the "normalized_title" field in the mutation.
func (m *VideoMutation) NormalizedTitle() (r string, exists bool) {
	v := m.normalized_title
	if v == nil {
		return
	}
	return *v, true
}

// OldNormalizedTitle returns the old "normalized_title" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldNormalizedTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNormalizedTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNormalizedTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNormalizedTitle: %w", err)
	}
	return oldValue.NormalizedTitle, nil
}

// ClearNormalizedTitle clears the value of the "normalized_title" field.
func (m *VideoMutation) ClearNormalizedTitle() {
	m.normalized_title = nil
	m.clearedFields[video.FieldNormalizedTitle] = struct{}{}
}

// NormalizedTitleCleared returns if the "normalized_title" field was cleared in this mutation.
func (m *VideoMutation) NormalizedTitleCleared() bool {
	_, ok := m.clearedFields[video.FieldNormalizedTitle]
	return ok
}

// ResetNormalizedTitle resets all changes to the "normalized_title" field.
func (m *VideoMutation) ResetNormalizedTitle() {
	m.normalized_title = nil
	delete(m.clearedFields, video.FieldNormalizedTitle)
}

// SetDurationSeconds sets the "duration_seconds" field.
func (m *VideoMutation) SetDurationSeconds(i int) {
	m.duration_seconds = &i
	m.addduration_seconds = nil
}

// DurationSeconds returns the value of the "duration_seconds" field in the mutation.
func (m *VideoMutation) DurationSeconds() (r int, exists bool) {
	v := m.duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationSeconds returns the old "duration_seconds" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldDurationSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationSeconds: %w", err)
	}
	return oldValue.DurationSeconds, nil
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (m *VideoMutation) AddDurationSeconds(i int) {
	if m.addduration_seconds != nil {
		*m.addduration_seconds += i
	} else {
		m.addduration_seconds = &i
	}
}

// AddedDurationSeconds returns the value that was added to the "duration_seconds" field in this mutation.
func (m *VideoMutation) AddedDurationSeconds() (r int, exists bool) {
	v := m.addduration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (m *VideoMutation) ClearDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
	m.clearedFields[video.FieldDurationSeconds] = struct{}{}
}

// DurationSecondsCleared returns if the "duration_seconds" field was cleared in this mutation.
func (m *VideoMutation) DurationSecondsCleared() bool {
	_, ok := m.clearedFields[video.FieldDurationSeconds]
	return ok
}

// ResetDurationSeconds resets all changes to the "duration_seconds" field.
func (m *VideoMutation) ResetDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
	delete(m.clearedFields, video.FieldDurationSeconds)
}

// SetIsCollaboration sets the "is_collaboration" field.
func (m *VideoMutation) SetIsCollaboration(b bool) {
	m.is_collaboration = &b
}

// IsCollaboration returns the value of the "is_collaboration" field in the mutation.
func (m *VideoMutation) IsCollaboration() (r bool, exists bool) {
	v := m.is_collaboration
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCollaboration returns the old "is_collaboration" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldIsCollaboration(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCollaboration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCollaboration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCollaboration: %w", err)
	}
	return oldValue.IsCollaboration, nil
}

// ResetIsCollaboration resets all changes to the "is_collaboration" field.
func (m *VideoMutation) ResetIsCollaboration() {
	m.is_collaboration = nil
}

// SetStatus sets the "status" field.
func (m *VideoMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *VideoMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *VideoMutation) ResetStatus() {
	m.status = nil
}

// SetChatID sets the "chat_id" field.
func (m *VideoMutation) SetChatID(s string) {
	m.chat_id = &s
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *VideoMutation) ChatID() (r string, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldChatID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ClearChatID clears the value of the "chat_id" field.
func (m *VideoMutation) ClearChatID() {
	m.chat_id = nil
	m.clearedFields[video.FieldChatID] = struct{}{}
}

// ChatIDCleared returns if the "chat_id" field was cleared in this mutation.
func (m *VideoMutation) ChatIDCleared() bool {
	_, ok := m.clearedFields[video.FieldChatID]
	return ok
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *VideoMutation) ResetChatID() {
	m.chat_id = nil
	delete(m.clearedFields, video.FieldChatID)
}

// SetHasTimeRange sets the "has_time_range" field.
func (m *VideoMutation) SetHasTimeRange(b bool) {
	m.has_time_range = &b
}

// HasTimeRange returns the value of the "has_time_range" field in the mutation.
func (m *VideoMutation) HasTimeRange() (r bool, exists bool) {
	v := m.has_time_range
	if v == nil {
		return
	}
	return *v, true
}

// OldHasTimeRange returns the old "has_time_range" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldHasTimeRange(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasTimeRange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasTimeRange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasTimeRange: %w", err)
	}
	return oldValue.HasTimeRange, nil
}

// ResetHasTimeRange resets all changes to the "has_time_range" field.
func (m *VideoMutation) ResetHasTimeRange() {
	m.has_time_range = nil
}

// SetScheduledAt sets the "scheduled_at" field.
func (m *VideoMutation) SetScheduledAt(t time.Time) {
	m.scheduled_at = &t
}

// ScheduledAt returns the value of the "scheduled_at" field in the mutation.
func (m *VideoMutation) ScheduledAt() (r time.Time, exists bool) {
	v := m.scheduled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledAt returns the old "scheduled_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldScheduledAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledAt: %w", err)
	}
	return oldValue.ScheduledAt, nil
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (m *VideoMutation) ClearScheduledAt() {
	m.scheduled_at = nil
	m.clearedFields[video.FieldScheduledAt] = struct{}{}
}

// ScheduledAtCleared returns if the "scheduled_at" field was cleared in this mutation.
func (m *VideoMutation) ScheduledAtCleared() bool {
	_, ok := m.clearedFields[video.FieldScheduledAt]
	return ok
}

// ResetScheduledAt resets all changes to the "scheduled_at" field.
func (m *VideoMutation) ResetScheduledAt() {
	m.scheduled_at = nil
	delete(m.clearedFields, video.FieldScheduledAt)
}

// SetActualStartAt sets the "actual_start_at" field.
func (m *VideoMutation) SetActualStartAt(t time.Time) {
	m.actual_start_at = &t
}

// ActualStartAt returns the value of the "actual_start_at" field in the mutation.
func (m *VideoMutation) ActualStartAt() (r time.Time, exists bool) {
	v := m.actual_start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldActualStartAt returns the old "actual_start_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldActualStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActualStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActualStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActualStartAt: %w", err)
	}
	return oldValue.ActualStartAt, nil
}

// ClearActualStartAt clears the value of the "actual_start_at" field.
func (m *VideoMutation) ClearActualStartAt() {
	m.actual_start_at = nil
	m.clearedFields[video.FieldActualStartAt] = struct{}{}
}

// ActualStartAtCleared returns if the "actual_start_at" field was cleared in this mutation.
func (m *VideoMutation) ActualStartAtCleared() bool {
	_, ok := m.clearedFields[video.FieldActualStartAt]
	return ok
}

// ResetActualStartAt resets all changes to the "actual_start_at" field.
func (m *VideoMutation) ResetActualStartAt() {
	m.actual_start_at = nil
	delete(m.clearedFields, video.FieldActualStartAt)
}

// SetActualEndAt sets the "actual_end_at" field.
func (m *VideoMutation) SetActualEndAt(t time.Time) {
	m.actual_end_at = &t
}

// ActualEndAt returns the value of the "actual_end_at" field in the mutation.
func (m *VideoMutation) ActualEndAt() (r time.Time, exists bool) {
	v := m.actual_end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldActualEndAt returns the old "actual_end_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldActualEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActualEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActualEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActualEndAt: %w", err)
	}
	return oldValue.ActualEndAt, nil
}

// ClearActualEndAt clears the value of the "actual_end_at" field.
func (m *VideoMutation) ClearActualEndAt() {
	m.actual_end_at = nil
	m.clearedFields[video.FieldActualEndAt] = struct{}{}
}

// ActualEndAtCleared returns if the "actual_end_at" field was cleared in this mutation.
func (m *VideoMutation) ActualEndAtCleared() bool {
	_, ok := m.clearedFields[video.FieldActualEndAt]
	return ok
}

// ResetActualEndAt resets all changes to the "actual_end_at" field.
func (m *VideoMutation) ResetActualEndAt() {
	m.actual_end_at = nil
	delete(m.clearedFields, video.FieldActualEndAt)
}

// SetPublishedAt sets the "published_at" field.
func (m *VideoMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *VideoMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *VideoMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *VideoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VideoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VideoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VideoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VideoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VideoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDescriptionsID sets the "descriptions" edge to the Description entity by id.
func (m *VideoMutation) SetDescriptionsID(id string) {
	m.descriptions = &id
}

// ClearDescriptions clears the "descriptions" edge to the Description entity.
func (m *VideoMutation) ClearDescriptions() {
	m.cleareddescriptions = true
}

// DescriptionsCleared reports if the "descriptions" edge to the Description entity was cleared.
func (m *VideoMutation) DescriptionsCleared() bool {
	return m.cleareddescriptions
}

// DescriptionsID returns the "descriptions" edge ID in the mutation.
func (m *VideoMutation) DescriptionsID() (id string, exists bool) {
	if m.descriptions != nil {
		return *m.descriptions, true
	}
	return
}

// DescriptionsIDs returns the "descriptions" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DescriptionsID instead. It exists only for internal usage by the builders.
func (m *VideoMutation) DescriptionsIDs() (ids []string) {
	if id := m.descriptions; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDescriptions resets all changes to the "descriptions" edge.
func (m *VideoMutation) ResetDescriptions() {
	m.descriptions = nil
	m.cleareddescriptions = false
}

// AddChannelIDs adds the "channel" edge to the Channel entity by ids.
func (m *VideoMutation) AddChannelIDs(ids ...string) {
	if m.channel == nil {
		m.channel = make(map[string]struct{})
	}
	for i := range ids {
		m.channel[ids[i]] = struct{}{}
	}
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *VideoMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *VideoMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// RemoveChannelIDs removes the "channel" edge to the Channel entity by IDs.
func (m *VideoMutation) RemoveChannelIDs(ids ...string) {
	if m.removedchannel == nil {
		m.removedchannel = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.channel, ids[i])
		m.removedchannel[ids[i]] = struct{}{}
	}
}

// RemovedChannel returns the removed IDs of the "channel" edge to the Channel entity.
func (m *VideoMutation) RemovedChannelIDs() (ids []string) {
	for id := range m.removedchannel {
		ids = append(ids, id)
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
func (m *VideoMutation) ChannelIDs() (ids []string) {
	for id := range m.channel {
		ids = append(ids, id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *VideoMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
	m.removedchannel = nil
}

// AddVideoPlayRangeIDs adds the "video_play_ranges" edge to the VideoPlayRange entity by ids.
func (m *VideoMutation) AddVideoPlayRangeIDs(ids ...string) {
	if m.video_play_ranges == nil {
		m.video_play_ranges = make(map[string]struct{})
	}
	for i := range ids {
		m.video_play_ranges[ids[i]] = struct{}{}
	}
}

// ClearVideoPlayRanges clears the "video_play_ranges" edge to the VideoPlayRange entity.
func (m *VideoMutation) ClearVideoPlayRanges() {
	m.clearedvideo_play_ranges = true
}

// VideoPlayRangesCleared reports if the "video_play_ranges" edge to the VideoPlayRange entity was cleared.
func (m *VideoMutation) VideoPlayRangesCleared() bool {
	return m.clearedvideo_play_ranges
}

// RemoveVideoPlayRangeIDs removes the "video_play_ranges" edge to the VideoPlayRange entity by IDs.
func (m *VideoMutation) RemoveVideoPlayRangeIDs(ids ...string) {
	if m.removedvideo_play_ranges == nil {
		m.removedvideo_play_ranges = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.video_play_ranges, ids[i])
		m.removedvideo_play_ranges[ids[i]] = struct{}{}
	}
}

// RemovedVideoPlayRanges returns the removed IDs of the "video_play_ranges" edge to the VideoPlayRange entity.
func (m *VideoMutation) RemovedVideoPlayRangesIDs() (ids []string) {
	for id := range m.removedvideo_play_ranges {
		ids = append(ids, id)
	}
	return
}

// VideoPlayRangesIDs returns the "video_play_ranges" edge IDs in the mutation.
func (m *VideoMutation) VideoPlayRangesIDs() (ids []string) {
	for id := range m.video_play_ranges {
		ids = append(ids, id)
	}
	return
}

// ResetVideoPlayRanges resets all changes to the "video_play_ranges" edge.
func (m *VideoMutation) ResetVideoPlayRanges() {
	m.video_play_ranges = nil
	m.clearedvideo_play_ranges = false
	m.removedvideo_play_ranges = nil
}

// AddVideoDisallowRangeIDs adds the "video_disallow_ranges" edge to the VideoDisallowRange entity by ids.
func (m *VideoMutation) AddVideoDisallowRangeIDs(ids ...string) {
	if m.video_disallow_ranges == nil {
		m.video_disallow_ranges = make(map[string]struct{})
	}
	for i := range ids {
		m.video_disallow_ranges[ids[i]] = struct{}{}
	}
}

// ClearVideoDisallowRanges clears the "video_disallow_ranges" edge to the VideoDisallowRange entity.
func (m *VideoMutation) ClearVideoDisallowRanges() {
	m.clearedvideo_disallow_ranges = true
}

// VideoDisallowRangesCleared reports if the "video_disallow_ranges" edge to the VideoDisallowRange entity was cleared.
func (m *VideoMutation) VideoDisallowRangesCleared() bool {
	return m.clearedvideo_disallow_ranges
}

// RemoveVideoDisallowRangeIDs removes the "video_disallow_ranges" edge to the VideoDisallowRange entity by IDs.
func (m *VideoMutation) RemoveVideoDisallowRangeIDs(ids ...string) {
	if m.removedvideo_disallow_ranges == nil {
		m.removedvideo_disallow_ranges = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.video_disallow_ranges, ids[i])
		m.removedvideo_disallow_ranges[ids[i]] = struct{}{}
	}
}

// RemovedVideoDisallowRanges returns the removed IDs of the "video_disallow_ranges" edge to the VideoDisallowRange entity.
func (m *VideoMutation) RemovedVideoDisallowRangesIDs() (ids []string) {
	for id := range m.removedvideo_disallow_ranges {
		ids = append(ids, id)
	}
	return
}

// VideoDisallowRangesIDs returns the "video_disallow_ranges" edge IDs in the mutation.
func (m *VideoMutation) VideoDisallowRangesIDs() (ids []string) {
	for id := range m.video_disallow_ranges {
		ids = append(ids, id)
	}
	return
}

// ResetVideoDisallowRanges resets all changes to the "video_disallow_ranges" edge.
func (m *VideoMutation) ResetVideoDisallowRanges() {
	m.video_disallow_ranges = nil
	m.clearedvideo_disallow_ranges = false
	m.removedvideo_disallow_ranges = nil
}

// AddVideoTitleChangeIDs adds the "video_title_changes" edge to the VideoTitleChange entity by ids.
func (m *VideoMutation) AddVideoTitleChangeIDs(ids ...string) {
	if m.video_title_changes == nil {
		m.video_title_changes = make(map[string]struct{})
	}
	for i := range ids {
		m.video_title_changes[ids[i]] = struct{}{}
	}
}

// ClearVideoTitleChanges clears the "video_title_changes" edge to the VideoTitleChange entity.
func (m *VideoMutation) ClearVideoTitleChanges() {
	m.clearedvideo_title_changes = true
}

// VideoTitleChangesCleared reports if the "video_title_changes" edge to the VideoTitleChange entity was cleared.
func (m *VideoMutation) VideoTitleChangesCleared() bool {
	return m.clearedvideo_title_changes
}

// RemoveVideoTitleChangeIDs removes the "video_title_changes" edge to the VideoTitleChange entity by IDs.
func (m *VideoMutation) RemoveVideoTitleChangeIDs(ids ...string) {
	if m.removedvideo_title_changes == nil {
		m.removedvideo_title_changes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.video_title_changes, ids[i])
		m.removedvideo_title_changes[ids[i]] = struct{}{}
	}
}

// RemovedVideoTitleChanges returns the removed IDs of the "video_title_changes" edge to the VideoTitleChange entity.
func (m *VideoMutation) RemovedVideoTitleChangesIDs() (ids []string) {
	for id := range m.removedvideo_title_changes {
		ids = append(ids, id)
	}
	return
}

// VideoTitleChangesIDs returns the "video_title_changes" edge IDs in the mutation.
func (m *VideoMutation) VideoTitleChangesIDs() (ids []string) {
	for id := range m.video_title_changes {
		ids = append(ids, id)
	}
	return
}

// ResetVideoTitleChanges resets all changes to the "video_title_changes" edge.
func (m *VideoMutation) ResetVideoTitleChanges() {
	m.video_title_changes = nil
	m.clearedvideo_title_changes = false
	m.removedvideo_title_changes = nil
}

// AddPatChatIDs adds the "Pat_chats" edge to the PatChat entity by ids.
func (m *VideoMutation) AddPatChatIDs(ids ...string) {
	if m._Pat_chats == nil {
		m._Pat_chats = make(map[string]struct{})
	}
	for i := range ids {
		m._Pat_chats[ids[i]] = struct{}{}
	}
}

// ClearPatChats clears the "Pat_chats" edge to the PatChat entity.
func (m *VideoMutation) ClearPatChats() {
	m.cleared_Pat_chats = true
}

// PatChatsCleared reports if the "Pat_chats" edge to the PatChat entity was cleared.
func (m *VideoMutation) PatChatsCleared() bool {
	return m.cleared_Pat_chats
}

// RemovePatChatIDs removes the "Pat_chats" edge to the PatChat entity by IDs.
func (m *VideoMutation) RemovePatChatIDs(ids ...string) {
	if m.removed_Pat_chats == nil {
		m.removed_Pat_chats = make(map[string]struct{})
	}
	for i := range ids {
		delete(m._Pat_chats, ids[i])
		m.removed_Pat_chats[ids[i]] = struct{}{}
	}
}

// RemovedPatChats returns the removed IDs of the "Pat_chats" edge to the PatChat entity.
func (m *VideoMutation) RemovedPatChatsIDs() (ids []string) {
	for id := range m.removed_Pat_chats {
		ids = append(ids, id)
	}
	return
}

// PatChatsIDs returns the "Pat_chats" edge IDs in the mutation.
func (m *VideoMutation) PatChatsIDs() (ids []string) {
	for id := range m._Pat_chats {
		ids = append(ids, id)
	}
	return
}

// ResetPatChats resets all changes to the "Pat_chats" edge.
func (m *VideoMutation) ResetPatChats() {
	m._Pat_chats = nil
	m.cleared_Pat_chats = false
	m.removed_Pat_chats = nil
}

// Where appends a list predicates to the VideoMutation builder.
func (m *VideoMutation) Where(ps ...predicate.Video) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Video, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Video).
func (m *VideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.video_id != nil {
		fields = append(fields, video.FieldVideoID)
	}
	if m.title != nil {
		fields = append(fields, video.FieldTitle)
	}
	if m.normalized_title != nil {
		fields = append(fields, video.FieldNormalizedTitle)
	}
	if m.duration_seconds != nil {
		fields = append(fields, video.FieldDurationSeconds)
	}
	if m.is_collaboration != nil {
		fields = append(fields, video.FieldIsCollaboration)
	}
	if m.status != nil {
		fields = append(fields, video.FieldStatus)
	}
	if m.chat_id != nil {
		fields = append(fields, video.FieldChatID)
	}
	if m.has_time_range != nil {
		fields = append(fields, video.FieldHasTimeRange)
	}
	if m.scheduled_at != nil {
		fields = append(fields, video.FieldScheduledAt)
	}
	if m.actual_start_at != nil {
		fields = append(fields, video.FieldActualStartAt)
	}
	if m.actual_end_at != nil {
		fields = append(fields, video.FieldActualEndAt)
	}
	if m.published_at != nil {
		fields = append(fields, video.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, video.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, video.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case video.FieldVideoID:
		return m.VideoID()
	case video.FieldTitle:
		return m.Title()
	case video.FieldNormalizedTitle:
		return m.NormalizedTitle()
	case video.FieldDurationSeconds:
		return m.DurationSeconds()
	case video.FieldIsCollaboration:
		return m.IsCollaboration()
	case video.FieldStatus:
		return m.Status()
	case video.FieldChatID:
		return m.ChatID()
	case video.FieldHasTimeRange:
		return m.HasTimeRange()
	case video.FieldScheduledAt:
		return m.ScheduledAt()
	case video.FieldActualStartAt:
		return m.ActualStartAt()
	case video.FieldActualEndAt:
		return m.ActualEndAt()
	case video.FieldPublishedAt:
		return m.PublishedAt()
	case video.FieldCreatedAt:
		return m.CreatedAt()
	case video.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case video.FieldVideoID:
		return m.OldVideoID(ctx)
	case video.FieldTitle:
		return m.OldTitle(ctx)
	case video.FieldNormalizedTitle:
		return m.OldNormalizedTitle(ctx)
	case video.FieldDurationSeconds:
		return m.OldDurationSeconds(ctx)
	case video.FieldIsCollaboration:
		return m.OldIsCollaboration(ctx)
	case video.FieldStatus:
		return m.OldStatus(ctx)
	case video.FieldChatID:
		return m.OldChatID(ctx)
	case video.FieldHasTimeRange:
		return m.OldHasTimeRange(ctx)
	case video.FieldScheduledAt:
		return m.OldScheduledAt(ctx)
	case video.FieldActualStartAt:
		return m.OldActualStartAt(ctx)
	case video.FieldActualEndAt:
		return m.OldActualEndAt(ctx)
	case video.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case video.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case video.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Video field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case video.FieldVideoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoID(v)
		return nil
	case video.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case video.FieldNormalizedTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNormalizedTitle(v)
		return nil
	case video.FieldDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationSeconds(v)
		return nil
	case video.FieldIsCollaboration:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCollaboration(v)
		return nil
	case video.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case video.FieldChatID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case video.FieldHasTimeRange:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasTimeRange(v)
		return nil
	case video.FieldScheduledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledAt(v)
		return nil
	case video.FieldActualStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActualStartAt(v)
		return nil
	case video.FieldActualEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActualEndAt(v)
		return nil
	case video.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case video.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case video.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoMutation) AddedFields() []string {
	var fields []string
	if m.addduration_seconds != nil {
		fields = append(fields, video.FieldDurationSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case video.FieldDurationSeconds:
		return m.AddedDurationSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case video.FieldDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown Video numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(video.FieldNormalizedTitle) {
		fields = append(fields, video.FieldNormalizedTitle)
	}
	if m.FieldCleared(video.FieldDurationSeconds) {
		fields = append(fields, video.FieldDurationSeconds)
	}
	if m.FieldCleared(video.FieldChatID) {
		fields = append(fields, video.FieldChatID)
	}
	if m.FieldCleared(video.FieldScheduledAt) {
		fields = append(fields, video.FieldScheduledAt)
	}
	if m.FieldCleared(video.FieldActualStartAt) {
		fields = append(fields, video.FieldActualStartAt)
	}
	if m.FieldCleared(video.FieldActualEndAt) {
		fields = append(fields, video.FieldActualEndAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoMutation) ClearField(name string) error {
	switch name {
	case video.FieldNormalizedTitle:
		m.ClearNormalizedTitle()
		return nil
	case video.FieldDurationSeconds:
		m.ClearDurationSeconds()
		return nil
	case video.FieldChatID:
		m.ClearChatID()
		return nil
	case video.FieldScheduledAt:
		m.ClearScheduledAt()
		return nil
	case video.FieldActualStartAt:
		m.ClearActualStartAt()
		return nil
	case video.FieldActualEndAt:
		m.ClearActualEndAt()
		return nil
	}
	return fmt.Errorf("unknown Video nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoMutation) ResetField(name string) error {
	switch name {
	case video.FieldVideoID:
		m.ResetVideoID()
		return nil
	case video.FieldTitle:
		m.ResetTitle()
		return nil
	case video.FieldNormalizedTitle:
		m.ResetNormalizedTitle()
		return nil
	case video.FieldDurationSeconds:
		m.ResetDurationSeconds()
		return nil
	case video.FieldIsCollaboration:
		m.ResetIsCollaboration()
		return nil
	case video.FieldStatus:
		m.ResetStatus()
		return nil
	case video.FieldChatID:
		m.ResetChatID()
		return nil
	case video.FieldHasTimeRange:
		m.ResetHasTimeRange()
		return nil
	case video.FieldScheduledAt:
		m.ResetScheduledAt()
		return nil
	case video.FieldActualStartAt:
		m.ResetActualStartAt()
		return nil
	case video.FieldActualEndAt:
		m.ResetActualEndAt()
		return nil
	case video.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case video.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case video.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.descriptions != nil {
		edges = append(edges, video.EdgeDescriptions)
	}
	if m.channel != nil {
		edges = append(edges, video.EdgeChannel)
	}
	if m.video_play_ranges != nil {
		edges = append(edges, video.EdgeVideoPlayRanges)
	}
	if m.video_disallow_ranges != nil {
		edges = append(edges, video.EdgeVideoDisallowRanges)
	}
	if m.video_title_changes != nil {
		edges = append(edges, video.EdgeVideoTitleChanges)
	}
	if m._Pat_chats != nil {
		edges = append(edges, video.EdgePatChats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeDescriptions:
		if id := m.descriptions; id != nil {
			return []ent.Value{*id}
		}
	case video.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.channel))
		for id := range m.channel {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoPlayRanges:
		ids := make([]ent.Value, 0, len(m.video_play_ranges))
		for id := range m.video_play_ranges {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoDisallowRanges:
		ids := make([]ent.Value, 0, len(m.video_disallow_ranges))
		for id := range m.video_disallow_ranges {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoTitleChanges:
		ids := make([]ent.Value, 0, len(m.video_title_changes))
		for id := range m.video_title_changes {
			ids = append(ids, id)
		}
		return ids
	case video.EdgePatChats:
		ids := make([]ent.Value, 0, len(m._Pat_chats))
		for id := range m._Pat_chats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedchannel != nil {
		edges = append(edges, video.EdgeChannel)
	}
	if m.removedvideo_play_ranges != nil {
		edges = append(edges, video.EdgeVideoPlayRanges)
	}
	if m.removedvideo_disallow_ranges != nil {
		edges = append(edges, video.EdgeVideoDisallowRanges)
	}
	if m.removedvideo_title_changes != nil {
		edges = append(edges, video.EdgeVideoTitleChanges)
	}
	if m.removed_Pat_chats != nil {
		edges = append(edges, video.EdgePatChats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.removedchannel))
		for id := range m.removedchannel {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoPlayRanges:
		ids := make([]ent.Value, 0, len(m.removedvideo_play_ranges))
		for id := range m.removedvideo_play_ranges {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoDisallowRanges:
		ids := make([]ent.Value, 0, len(m.removedvideo_disallow_ranges))
		for id := range m.removedvideo_disallow_ranges {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeVideoTitleChanges:
		ids := make([]ent.Value, 0, len(m.removedvideo_title_changes))
		for id := range m.removedvideo_title_changes {
			ids = append(ids, id)
		}
		return ids
	case video.EdgePatChats:
		ids := make([]ent.Value, 0, len(m.removed_Pat_chats))
		for id := range m.removed_Pat_chats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.cleareddescriptions {
		edges = append(edges, video.EdgeDescriptions)
	}
	if m.clearedchannel {
		edges = append(edges, video.EdgeChannel)
	}
	if m.clearedvideo_play_ranges {
		edges = append(edges, video.EdgeVideoPlayRanges)
	}
	if m.clearedvideo_disallow_ranges {
		edges = append(edges, video.EdgeVideoDisallowRanges)
	}
	if m.clearedvideo_title_changes {
		edges = append(edges, video.EdgeVideoTitleChanges)
	}
	if m.cleared_Pat_chats {
		edges = append(edges, video.EdgePatChats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoMutation) EdgeCleared(name string) bool {
	switch name {
	case video.EdgeDescriptions:
		return m.cleareddescriptions
	case video.EdgeChannel:
		return m.clearedchannel
	case video.EdgeVideoPlayRanges:
		return m.clearedvideo_play_ranges
	case video.EdgeVideoDisallowRanges:
		return m.clearedvideo_disallow_ranges
	case video.EdgeVideoTitleChanges:
		return m.clearedvideo_title_changes
	case video.EdgePatChats:
		return m.cleared_Pat_chats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoMutation) ClearEdge(name string) error {
	switch name {
	case video.EdgeDescriptions:
		m.ClearDescriptions()
		return nil
	}
	return fmt.Errorf("unknown Video unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoMutation) ResetEdge(name string) error {
	switch name {
	case video.EdgeDescriptions:
		m.ResetDescriptions()
		return nil
	case video.EdgeChannel:
		m.ResetChannel()
		return nil
	case video.EdgeVideoPlayRanges:
		m.ResetVideoPlayRanges()
		return nil
	case video.EdgeVideoDisallowRanges:
		m.ResetVideoDisallowRanges()
		return nil
	case video.EdgeVideoTitleChanges:
		m.ResetVideoTitleChanges()
		return nil
	case video.EdgePatChats:
		m.ResetPatChats()
		return nil
	}
	return fmt.Errorf("unknown Video edge %s", name)
}

// VideoDisallowRangeMutation represents an operation that mutates the VideoDisallowRange nodes in the graph.
type VideoDisallowRangeMutation struct {
	config
	op               Op
	typ              string
	id               *string
	start_seconds    *int
	addstart_seconds *int
	end_seconds      *int
	addend_seconds   *int
	clearedFields    map[string]struct{}
	video            *string
	clearedvideo     bool
	done             bool
	oldValue         func(context.Context) (*VideoDisallowRange, error)
	predicates       []predicate.VideoDisallowRange
}

var _ ent.Mutation = (*VideoDisallowRangeMutation)(nil)

// videodisallowrangeOption allows management of the mutation configuration using functional options.
type videodisallowrangeOption func(*VideoDisallowRangeMutation)

// newVideoDisallowRangeMutation creates new mutation for the VideoDisallowRange entity.
func newVideoDisallowRangeMutation(c config, op Op, opts ...videodisallowrangeOption) *VideoDisallowRangeMutation {
	m := &VideoDisallowRangeMutation{
		config:        c,
		op:            op,
		typ:           TypeVideoDisallowRange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoDisallowRangeID sets the ID field of the mutation.
func withVideoDisallowRangeID(id string) videodisallowrangeOption {
	return func(m *VideoDisallowRangeMutation) {
		var (
			err   error
			once  sync.Once
			value *VideoDisallowRange
		)
		m.oldValue = func(ctx context.Context) (*VideoDisallowRange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VideoDisallowRange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideoDisallowRange sets the old VideoDisallowRange of the mutation.
func withVideoDisallowRange(node *VideoDisallowRange) videodisallowrangeOption {
	return func(m *VideoDisallowRangeMutation) {
		m.oldValue = func(context.Context) (*VideoDisallowRange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoDisallowRangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoDisallowRangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VideoDisallowRange entities.
func (m *VideoDisallowRangeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoDisallowRangeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoDisallowRangeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VideoDisallowRange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartSeconds sets the "start_seconds" field.
func (m *VideoDisallowRangeMutation) SetStartSeconds(i int) {
	m.start_seconds = &i
	m.addstart_seconds = nil
}

// StartSeconds returns the value of the "start_seconds" field in the mutation.
func (m *VideoDisallowRangeMutation) StartSeconds() (r int, exists bool) {
	v := m.start_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldStartSeconds returns the old "start_seconds" field's value of the VideoDisallowRange entity.
// If the VideoDisallowRange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoDisallowRangeMutation) OldStartSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartSeconds: %w", err)
	}
	return oldValue.StartSeconds, nil
}

// AddStartSeconds adds i to the "start_seconds" field.
func (m *VideoDisallowRangeMutation) AddStartSeconds(i int) {
	if m.addstart_seconds != nil {
		*m.addstart_seconds += i
	} else {
		m.addstart_seconds = &i
	}
}

// AddedStartSeconds returns the value that was added to the "start_seconds" field in this mutation.
func (m *VideoDisallowRangeMutation) AddedStartSeconds() (r int, exists bool) {
	v := m.addstart_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartSeconds resets all changes to the "start_seconds" field.
func (m *VideoDisallowRangeMutation) ResetStartSeconds() {
	m.start_seconds = nil
	m.addstart_seconds = nil
}

// SetEndSeconds sets the "end_seconds" field.
func (m *VideoDisallowRangeMutation) SetEndSeconds(i int) {
	m.end_seconds = &i
	m.addend_seconds = nil
}

// EndSeconds returns the value of the "end_seconds" field in the mutation.
func (m *VideoDisallowRangeMutation) EndSeconds() (r int, exists bool) {
	v := m.end_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldEndSeconds returns the old "end_seconds" field's value of the VideoDisallowRange entity.
// If the VideoDisallowRange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoDisallowRangeMutation) OldEndSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndSeconds: %w", err)
	}
	return oldValue.EndSeconds, nil
}

// AddEndSeconds adds i to the "end_seconds" field.
func (m *VideoDisallowRangeMutation) AddEndSeconds(i int) {
	if m.addend_seconds != nil {
		*m.addend_seconds += i
	} else {
		m.addend_seconds = &i
	}
}

// AddedEndSeconds returns the value that was added to the "end_seconds" field in this mutation.
func (m *VideoDisallowRangeMutation) AddedEndSeconds() (r int, exists bool) {
	v := m.addend_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndSeconds resets all changes to the "end_seconds" field.
func (m *VideoDisallowRangeMutation) ResetEndSeconds() {
	m.end_seconds = nil
	m.addend_seconds = nil
}

// SetVideoID sets the "video" edge to the Video entity by id.
func (m *VideoDisallowRangeMutation) SetVideoID(id string) {
	m.video = &id
}

// ClearVideo clears the "video" edge to the Video entity.
func (m *VideoDisallowRangeMutation) ClearVideo() {
	m.clearedvideo = true
}

// VideoCleared reports if the "video" edge to the Video entity was cleared.
func (m *VideoDisallowRangeMutation) VideoCleared() bool {
	return m.clearedvideo
}

// VideoID returns the "video" edge ID in the mutation.
func (m *VideoDisallowRangeMutation) VideoID() (id string, exists bool) {
	if m.video != nil {
		return *m.video, true
	}
	return
}

// VideoIDs returns the "video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VideoID instead. It exists only for internal usage by the builders.
func (m *VideoDisallowRangeMutation) VideoIDs() (ids []string) {
	if id := m.video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVideo resets all changes to the "video" edge.
func (m *VideoDisallowRangeMutation) ResetVideo() {
	m.video = nil
	m.clearedvideo = false
}

// Where appends a list predicates to the VideoDisallowRangeMutation builder.
func (m *VideoDisallowRangeMutation) Where(ps ...predicate.VideoDisallowRange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoDisallowRangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoDisallowRangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VideoDisallowRange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoDisallowRangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoDisallowRangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VideoDisallowRange).
func (m *VideoDisallowRangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoDisallowRangeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.start_seconds != nil {
		fields = append(fields, videodisallowrange.FieldStartSeconds)
	}
	if m.end_seconds != nil {
		fields = append(fields, videodisallowrange.FieldEndSeconds)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoDisallowRangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		return m.StartSeconds()
	case videodisallowrange.FieldEndSeconds:
		return m.EndSeconds()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoDisallowRangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		return m.OldStartSeconds(ctx)
	case videodisallowrange.FieldEndSeconds:
		return m.OldEndSeconds(ctx)
	}
	return nil, fmt.Errorf("unknown VideoDisallowRange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoDisallowRangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartSeconds(v)
		return nil
	case videodisallowrange.FieldEndSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown VideoDisallowRange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoDisallowRangeMutation) AddedFields() []string {
	var fields []string
	if m.addstart_seconds != nil {
		fields = append(fields, videodisallowrange.FieldStartSeconds)
	}
	if m.addend_seconds != nil {
		fields = append(fields, videodisallowrange.FieldEndSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoDisallowRangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		return m.AddedStartSeconds()
	case videodisallowrange.FieldEndSeconds:
		return m.AddedEndSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoDisallowRangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartSeconds(v)
		return nil
	case videodisallowrange.FieldEndSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown VideoDisallowRange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoDisallowRangeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoDisallowRangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoDisallowRangeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VideoDisallowRange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoDisallowRangeMutation) ResetField(name string) error {
	switch name {
	case videodisallowrange.FieldStartSeconds:
		m.ResetStartSeconds()
		return nil
	case videodisallowrange.FieldEndSeconds:
		m.ResetEndSeconds()
		return nil
	}
	return fmt.Errorf("unknown VideoDisallowRange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoDisallowRangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.video != nil {
		edges = append(edges, videodisallowrange.EdgeVideo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoDisallowRangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case videodisallowrange.EdgeVideo:
		if id := m.video; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoDisallowRangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoDisallowRangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoDisallowRangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvideo {
		edges = append(edges, videodisallowrange.EdgeVideo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoDisallowRangeMutation) EdgeCleared(name string) bool {
	switch name {
	case videodisallowrange.EdgeVideo:
		return m.clearedvideo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoDisallowRangeMutation) ClearEdge(name string) error {
	switch name {
	case videodisallowrange.EdgeVideo:
		m.ClearVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoDisallowRange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoDisallowRangeMutation) ResetEdge(name string) error {
	switch name {
	case videodisallowrange.EdgeVideo:
		m.ResetVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoDisallowRange edge %s", name)
}

// VideoPlayRangeMutation represents an operation that mutates the VideoPlayRange nodes in the graph.
type VideoPlayRangeMutation struct {
	config
	op               Op
	typ              string
	id               *string
	start_seconds    *int
	addstart_seconds *int
	end_seconds      *int
	addend_seconds   *int
	clearedFields    map[string]struct{}
	video            *string
	clearedvideo     bool
	done             bool
	oldValue         func(context.Context) (*VideoPlayRange, error)
	predicates       []predicate.VideoPlayRange
}

var _ ent.Mutation = (*VideoPlayRangeMutation)(nil)

// videoplayrangeOption allows management of the mutation configuration using functional options.
type videoplayrangeOption func(*VideoPlayRangeMutation)

// newVideoPlayRangeMutation creates new mutation for the VideoPlayRange entity.
func newVideoPlayRangeMutation(c config, op Op, opts ...videoplayrangeOption) *VideoPlayRangeMutation {
	m := &VideoPlayRangeMutation{
		config:        c,
		op:            op,
		typ:           TypeVideoPlayRange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoPlayRangeID sets the ID field of the mutation.
func withVideoPlayRangeID(id string) videoplayrangeOption {
	return func(m *VideoPlayRangeMutation) {
		var (
			err   error
			once  sync.Once
			value *VideoPlayRange
		)
		m.oldValue = func(ctx context.Context) (*VideoPlayRange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VideoPlayRange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideoPlayRange sets the old VideoPlayRange of the mutation.
func withVideoPlayRange(node *VideoPlayRange) videoplayrangeOption {
	return func(m *VideoPlayRangeMutation) {
		m.oldValue = func(context.Context) (*VideoPlayRange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoPlayRangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoPlayRangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VideoPlayRange entities.
func (m *VideoPlayRangeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoPlayRangeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoPlayRangeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VideoPlayRange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartSeconds sets the "start_seconds" field.
func (m *VideoPlayRangeMutation) SetStartSeconds(i int) {
	m.start_seconds = &i
	m.addstart_seconds = nil
}

// StartSeconds returns the value of the "start_seconds" field in the mutation.
func (m *VideoPlayRangeMutation) StartSeconds() (r int, exists bool) {
	v := m.start_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldStartSeconds returns the old "start_seconds" field's value of the VideoPlayRange entity.
// If the VideoPlayRange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoPlayRangeMutation) OldStartSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartSeconds: %w", err)
	}
	return oldValue.StartSeconds, nil
}

// AddStartSeconds adds i to the "start_seconds" field.
func (m *VideoPlayRangeMutation) AddStartSeconds(i int) {
	if m.addstart_seconds != nil {
		*m.addstart_seconds += i
	} else {
		m.addstart_seconds = &i
	}
}

// AddedStartSeconds returns the value that was added to the "start_seconds" field in this mutation.
func (m *VideoPlayRangeMutation) AddedStartSeconds() (r int, exists bool) {
	v := m.addstart_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartSeconds resets all changes to the "start_seconds" field.
func (m *VideoPlayRangeMutation) ResetStartSeconds() {
	m.start_seconds = nil
	m.addstart_seconds = nil
}

// SetEndSeconds sets the "end_seconds" field.
func (m *VideoPlayRangeMutation) SetEndSeconds(i int) {
	m.end_seconds = &i
	m.addend_seconds = nil
}

// EndSeconds returns the value of the "end_seconds" field in the mutation.
func (m *VideoPlayRangeMutation) EndSeconds() (r int, exists bool) {
	v := m.end_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldEndSeconds returns the old "end_seconds" field's value of the VideoPlayRange entity.
// If the VideoPlayRange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoPlayRangeMutation) OldEndSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndSeconds: %w", err)
	}
	return oldValue.EndSeconds, nil
}

// AddEndSeconds adds i to the "end_seconds" field.
func (m *VideoPlayRangeMutation) AddEndSeconds(i int) {
	if m.addend_seconds != nil {
		*m.addend_seconds += i
	} else {
		m.addend_seconds = &i
	}
}

// AddedEndSeconds returns the value that was added to the "end_seconds" field in this mutation.
func (m *VideoPlayRangeMutation) AddedEndSeconds() (r int, exists bool) {
	v := m.addend_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (m *VideoPlayRangeMutation) ClearEndSeconds() {
	m.end_seconds = nil
	m.addend_seconds = nil
	m.clearedFields[videoplayrange.FieldEndSeconds] = struct{}{}
}

// EndSecondsCleared returns if the "end_seconds" field was cleared in this mutation.
func (m *VideoPlayRangeMutation) EndSecondsCleared() bool {
	_, ok := m.clearedFields[videoplayrange.FieldEndSeconds]
	return ok
}

// ResetEndSeconds resets all changes to the "end_seconds" field.
func (m *VideoPlayRangeMutation) ResetEndSeconds() {
	m.end_seconds = nil
	m.addend_seconds = nil
	delete(m.clearedFields, videoplayrange.FieldEndSeconds)
}

// SetVideoID sets the "video" edge to the Video entity by id.
func (m *VideoPlayRangeMutation) SetVideoID(id string) {
	m.video = &id
}

// ClearVideo clears the "video" edge to the Video entity.
func (m *VideoPlayRangeMutation) ClearVideo() {
	m.clearedvideo = true
}

// VideoCleared reports if the "video" edge to the Video entity was cleared.
func (m *VideoPlayRangeMutation) VideoCleared() bool {
	return m.clearedvideo
}

// VideoID returns the "video" edge ID in the mutation.
func (m *VideoPlayRangeMutation) VideoID() (id string, exists bool) {
	if m.video != nil {
		return *m.video, true
	}
	return
}

// VideoIDs returns the "video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VideoID instead. It exists only for internal usage by the builders.
func (m *VideoPlayRangeMutation) VideoIDs() (ids []string) {
	if id := m.video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVideo resets all changes to the "video" edge.
func (m *VideoPlayRangeMutation) ResetVideo() {
	m.video = nil
	m.clearedvideo = false
}

// Where appends a list predicates to the VideoPlayRangeMutation builder.
func (m *VideoPlayRangeMutation) Where(ps ...predicate.VideoPlayRange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoPlayRangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoPlayRangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VideoPlayRange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoPlayRangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoPlayRangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VideoPlayRange).
func (m *VideoPlayRangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoPlayRangeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.start_seconds != nil {
		fields = append(fields, videoplayrange.FieldStartSeconds)
	}
	if m.end_seconds != nil {
		fields = append(fields, videoplayrange.FieldEndSeconds)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoPlayRangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videoplayrange.FieldStartSeconds:
		return m.StartSeconds()
	case videoplayrange.FieldEndSeconds:
		return m.EndSeconds()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoPlayRangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videoplayrange.FieldStartSeconds:
		return m.OldStartSeconds(ctx)
	case videoplayrange.FieldEndSeconds:
		return m.OldEndSeconds(ctx)
	}
	return nil, fmt.Errorf("unknown VideoPlayRange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoPlayRangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videoplayrange.FieldStartSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartSeconds(v)
		return nil
	case videoplayrange.FieldEndSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoPlayRangeMutation) AddedFields() []string {
	var fields []string
	if m.addstart_seconds != nil {
		fields = append(fields, videoplayrange.FieldStartSeconds)
	}
	if m.addend_seconds != nil {
		fields = append(fields, videoplayrange.FieldEndSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoPlayRangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case videoplayrange.FieldStartSeconds:
		return m.AddedStartSeconds()
	case videoplayrange.FieldEndSeconds:
		return m.AddedEndSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoPlayRangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case videoplayrange.FieldStartSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartSeconds(v)
		return nil
	case videoplayrange.FieldEndSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoPlayRangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(videoplayrange.FieldEndSeconds) {
		fields = append(fields, videoplayrange.FieldEndSeconds)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoPlayRangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoPlayRangeMutation) ClearField(name string) error {
	switch name {
	case videoplayrange.FieldEndSeconds:
		m.ClearEndSeconds()
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoPlayRangeMutation) ResetField(name string) error {
	switch name {
	case videoplayrange.FieldStartSeconds:
		m.ResetStartSeconds()
		return nil
	case videoplayrange.FieldEndSeconds:
		m.ResetEndSeconds()
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoPlayRangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.video != nil {
		edges = append(edges, videoplayrange.EdgeVideo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoPlayRangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case videoplayrange.EdgeVideo:
		if id := m.video; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoPlayRangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoPlayRangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoPlayRangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvideo {
		edges = append(edges, videoplayrange.EdgeVideo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoPlayRangeMutation) EdgeCleared(name string) bool {
	switch name {
	case videoplayrange.EdgeVideo:
		return m.clearedvideo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoPlayRangeMutation) ClearEdge(name string) error {
	switch name {
	case videoplayrange.EdgeVideo:
		m.ClearVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoPlayRangeMutation) ResetEdge(name string) error {
	switch name {
	case videoplayrange.EdgeVideo:
		m.ResetVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoPlayRange edge %s", name)
}

// VideoTitleChangeMutation represents an operation that mutates the VideoTitleChange nodes in the graph.
type VideoTitleChangeMutation struct {
	config
	op               Op
	typ              string
	id               *string
	title            *string
	normalized_title *string
	changed_at       *time.Time
	clearedFields    map[string]struct{}
	video            *string
	clearedvideo     bool
	done             bool
	oldValue         func(context.Context) (*VideoTitleChange, error)
	predicates       []predicate.VideoTitleChange
}

var _ ent.Mutation = (*VideoTitleChangeMutation)(nil)

// videotitlechangeOption allows management of the mutation configuration using functional options.
type videotitlechangeOption func(*VideoTitleChangeMutation)

// newVideoTitleChangeMutation creates new mutation for the VideoTitleChange entity.
func newVideoTitleChangeMutation(c config, op Op, opts ...videotitlechangeOption) *VideoTitleChangeMutation {
	m := &VideoTitleChangeMutation{
		config:        c,
		op:            op,
		typ:           TypeVideoTitleChange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoTitleChangeID sets the ID field of the mutation.
func withVideoTitleChangeID(id string) videotitlechangeOption {
	return func(m *VideoTitleChangeMutation) {
		var (
			err   error
			once  sync.Once
			value *VideoTitleChange
		)
		m.oldValue = func(ctx context.Context) (*VideoTitleChange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VideoTitleChange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideoTitleChange sets the old VideoTitleChange of the mutation.
func withVideoTitleChange(node *VideoTitleChange) videotitlechangeOption {
	return func(m *VideoTitleChangeMutation) {
		m.oldValue = func(context.Context) (*VideoTitleChange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoTitleChangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoTitleChangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VideoTitleChange entities.
func (m *VideoTitleChangeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoTitleChangeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoTitleChangeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VideoTitleChange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *VideoTitleChangeMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *VideoTitleChangeMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the VideoTitleChange entity.
// If the VideoTitleChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoTitleChangeMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *VideoTitleChangeMutation) ResetTitle() {
	m.title = nil
}

// SetNormalizedTitle sets the "normalized_title" field.
func (m *VideoTitleChangeMutation) SetNormalizedTitle(s string) {
	m.normalized_title = &s
}

// NormalizedTitle returns the value of the "normalized_title" field in the mutation.
func (m *VideoTitleChangeMutation) NormalizedTitle() (r string, exists bool) {
	v := m.normalized_title
	if v == nil {
		return
	}
	return *v, true
}

// OldNormalizedTitle returns the old "normalized_title" field's value of the VideoTitleChange entity.
// If the VideoTitleChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoTitleChangeMutation) OldNormalizedTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNormalizedTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNormalizedTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNormalizedTitle: %w", err)
	}
	return oldValue.NormalizedTitle, nil
}

// ResetNormalizedTitle resets all changes to the "normalized_title" field.
func (m *VideoTitleChangeMutation) ResetNormalizedTitle() {
	m.normalized_title = nil
}

// SetChangedAt sets the "changed_at" field.
func (m *VideoTitleChangeMutation) SetChangedAt(t time.Time) {
	m.changed_at = &t
}

// ChangedAt returns the value of the "changed_at" field in the mutation.
func (m *VideoTitleChangeMutation) ChangedAt() (r time.Time, exists bool) {
	v := m.changed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldChangedAt returns the old "changed_at" field's value of the VideoTitleChange entity.
// If the VideoTitleChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoTitleChangeMutation) OldChangedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangedAt: %w", err)
	}
	return oldValue.ChangedAt, nil
}

// ResetChangedAt resets all changes to the "changed_at" field.
func (m *VideoTitleChangeMutation) ResetChangedAt() {
	m.changed_at = nil
}

// SetVideoID sets the "video" edge to the Video entity by id.
func (m *VideoTitleChangeMutation) SetVideoID(id string) {
	m.video = &id
}

// ClearVideo clears the "video" edge to the Video entity.
func (m *VideoTitleChangeMutation) ClearVideo() {
	m.clearedvideo = true
}

// VideoCleared reports if the "video" edge to the Video entity was cleared.
func (m *VideoTitleChangeMutation) VideoCleared() bool {
	return m.clearedvideo
}

// VideoID returns the "video" edge ID in the mutation.
func (m *VideoTitleChangeMutation) VideoID() (id string, exists bool) {
	if m.video != nil {
		return *m.video, true
	}
	return
}

// VideoIDs returns the "video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VideoID instead. It exists only for internal usage by the builders.
func (m *VideoTitleChangeMutation) VideoIDs() (ids []string) {
	if id := m.video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVideo resets all changes to the "video" edge.
func (m *VideoTitleChangeMutation) ResetVideo() {
	m.video = nil
	m.clearedvideo = false
}

// Where appends a list predicates to the VideoTitleChangeMutation builder.
func (m *VideoTitleChangeMutation) Where(ps ...predicate.VideoTitleChange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoTitleChangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoTitleChangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VideoTitleChange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoTitleChangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoTitleChangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VideoTitleChange).
func (m *VideoTitleChangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoTitleChangeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, videotitlechange.FieldTitle)
	}
	if m.normalized_title != nil {
		fields = append(fields, videotitlechange.FieldNormalizedTitle)
	}
	if m.changed_at != nil {
		fields = append(fields, videotitlechange.FieldChangedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoTitleChangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videotitlechange.FieldTitle:
		return m.Title()
	case videotitlechange.FieldNormalizedTitle:
		return m.NormalizedTitle()
	case videotitlechange.FieldChangedAt:
		return m.ChangedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoTitleChangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videotitlechange.FieldTitle:
		return m.OldTitle(ctx)
	case videotitlechange.FieldNormalizedTitle:
		return m.OldNormalizedTitle(ctx)
	case videotitlechange.FieldChangedAt:
		return m.OldChangedAt(ctx)
	}
	return nil, fmt.Errorf("unknown VideoTitleChange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoTitleChangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videotitlechange.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case videotitlechange.FieldNormalizedTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNormalizedTitle(v)
		return nil
	case videotitlechange.FieldChangedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangedAt(v)
		return nil
	}
	return fmt.Errorf("unknown VideoTitleChange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoTitleChangeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoTitleChangeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoTitleChangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VideoTitleChange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoTitleChangeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoTitleChangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoTitleChangeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VideoTitleChange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoTitleChangeMutation) ResetField(name string) error {
	switch name {
	case videotitlechange.FieldTitle:
		m.ResetTitle()
		return nil
	case videotitlechange.FieldNormalizedTitle:
		m.ResetNormalizedTitle()
		return nil
	case videotitlechange.FieldChangedAt:
		m.ResetChangedAt()
		return nil
	}
	return fmt.Errorf("unknown VideoTitleChange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoTitleChangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.video != nil {
		edges = append(edges, videotitlechange.EdgeVideo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoTitleChangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case videotitlechange.EdgeVideo:
		if id := m.video; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoTitleChangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoTitleChangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoTitleChangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvideo {
		edges = append(edges, videotitlechange.EdgeVideo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoTitleChangeMutation) EdgeCleared(name string) bool {
	switch name {
	case videotitlechange.EdgeVideo:
		return m.clearedvideo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoTitleChangeMutation) ClearEdge(name string) error {
	switch name {
	case videotitlechange.EdgeVideo:
		m.ClearVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoTitleChange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoTitleChangeMutation) ResetEdge(name string) error {
	switch name {
	case videotitlechange.EdgeVideo:
		m.ResetVideo()
		return nil
	}
	return fmt.Errorf("unknown VideoTitleChange edge %s", name)
}
