// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/pat_chat"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
)

// PatChatCreate is the builder for creating a Pat_chat entity.
type PatChatCreate struct {
	config
	mutation *PatChatMutation
	hooks    []Hook
}

// SetMessage sets the "message" field.
func (pcc *PatChatCreate) SetMessage(s string) *PatChatCreate {
	pcc.mutation.SetMessage(s)
	return pcc
}

// SetMagnitude sets the "magnitude" field.
func (pcc *PatChatCreate) SetMagnitude(f float64) *PatChatCreate {
	pcc.mutation.SetMagnitude(f)
	return pcc
}

// SetScore sets the "score" field.
func (pcc *PatChatCreate) SetScore(f float64) *PatChatCreate {
	pcc.mutation.SetScore(f)
	return pcc
}

// SetIsNegative sets the "is_negative" field.
func (pcc *PatChatCreate) SetIsNegative(b bool) *PatChatCreate {
	pcc.mutation.SetIsNegative(b)
	return pcc
}

// SetNillableIsNegative sets the "is_negative" field if the given value is not nil.
func (pcc *PatChatCreate) SetNillableIsNegative(b *bool) *PatChatCreate {
	if b != nil {
		pcc.SetIsNegative(*b)
	}
	return pcc
}

// SetPublishedAt sets the "published_at" field.
func (pcc *PatChatCreate) SetPublishedAt(t time.Time) *PatChatCreate {
	pcc.mutation.SetPublishedAt(t)
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PatChatCreate) SetCreatedAt(t time.Time) *PatChatCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PatChatCreate) SetNillableCreatedAt(t *time.Time) *PatChatCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PatChatCreate) SetID(pu pulid.ID) *PatChatCreate {
	pcc.mutation.SetID(pu)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PatChatCreate) SetNillableID(pu *pulid.ID) *PatChatCreate {
	if pu != nil {
		pcc.SetID(*pu)
	}
	return pcc
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (pcc *PatChatCreate) SetVideoID(id pulid.ID) *PatChatCreate {
	pcc.mutation.SetVideoID(id)
	return pcc
}

// SetVideo sets the "video" edge to the Video entity.
func (pcc *PatChatCreate) SetVideo(v *Video) *PatChatCreate {
	return pcc.SetVideoID(v.ID)
}

// Mutation returns the PatChatMutation object of the builder.
func (pcc *PatChatCreate) Mutation() *PatChatMutation {
	return pcc.mutation
}

// Save creates the Pat_chat in the database.
func (pcc *PatChatCreate) Save(ctx context.Context) (*Pat_chat, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PatChatCreate) SaveX(ctx context.Context) *Pat_chat {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PatChatCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PatChatCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PatChatCreate) defaults() {
	if _, ok := pcc.mutation.IsNegative(); !ok {
		v := pat_chat.DefaultIsNegative
		pcc.mutation.SetIsNegative(v)
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := pat_chat.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := pat_chat.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PatChatCreate) check() error {
	if _, ok := pcc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Pat_chat.message"`)}
	}
	if _, ok := pcc.mutation.Magnitude(); !ok {
		return &ValidationError{Name: "magnitude", err: errors.New(`ent: missing required field "Pat_chat.magnitude"`)}
	}
	if _, ok := pcc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "Pat_chat.score"`)}
	}
	if _, ok := pcc.mutation.IsNegative(); !ok {
		return &ValidationError{Name: "is_negative", err: errors.New(`ent: missing required field "Pat_chat.is_negative"`)}
	}
	if _, ok := pcc.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "Pat_chat.published_at"`)}
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pat_chat.created_at"`)}
	}
	if _, ok := pcc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required edge "Pat_chat.video"`)}
	}
	return nil
}

func (pcc *PatChatCreate) sqlSave(ctx context.Context) (*Pat_chat, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(pulid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Pat_chat.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PatChatCreate) createSpec() (*Pat_chat, *sqlgraph.CreateSpec) {
	var (
		_node = &Pat_chat{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(pat_chat.Table, sqlgraph.NewFieldSpec(pat_chat.FieldID, field.TypeString))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.Message(); ok {
		_spec.SetField(pat_chat.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := pcc.mutation.Magnitude(); ok {
		_spec.SetField(pat_chat.FieldMagnitude, field.TypeFloat64, value)
		_node.Magnitude = value
	}
	if value, ok := pcc.mutation.Score(); ok {
		_spec.SetField(pat_chat.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := pcc.mutation.IsNegative(); ok {
		_spec.SetField(pat_chat.FieldIsNegative, field.TypeBool, value)
		_node.IsNegative = value
	}
	if value, ok := pcc.mutation.PublishedAt(); ok {
		_spec.SetField(pat_chat.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(pat_chat.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pcc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pat_chat.VideoTable,
			Columns: []string{pat_chat.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.video_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatChatCreateBulk is the builder for creating many Pat_chat entities in bulk.
type PatChatCreateBulk struct {
	config
	err      error
	builders []*PatChatCreate
}

// Save creates the Pat_chat entities in the database.
func (pccb *PatChatCreateBulk) Save(ctx context.Context) ([]*Pat_chat, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*Pat_chat, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatChatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PatChatCreateBulk) SaveX(ctx context.Context) []*Pat_chat {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PatChatCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PatChatCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
