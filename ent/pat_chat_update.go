// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/pat_chat"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
)

// PatChatUpdate is the builder for updating Pat_chat entities.
type PatChatUpdate struct {
	config
	hooks    []Hook
	mutation *PatChatMutation
}

// Where appends a list predicates to the PatChatUpdate builder.
func (pcu *PatChatUpdate) Where(ps ...predicate.Pat_chat) *PatChatUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetMessage sets the "message" field.
func (pcu *PatChatUpdate) SetMessage(s string) *PatChatUpdate {
	pcu.mutation.SetMessage(s)
	return pcu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillableMessage(s *string) *PatChatUpdate {
	if s != nil {
		pcu.SetMessage(*s)
	}
	return pcu
}

// SetMagnitude sets the "magnitude" field.
func (pcu *PatChatUpdate) SetMagnitude(f float64) *PatChatUpdate {
	pcu.mutation.ResetMagnitude()
	pcu.mutation.SetMagnitude(f)
	return pcu
}

// SetNillableMagnitude sets the "magnitude" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillableMagnitude(f *float64) *PatChatUpdate {
	if f != nil {
		pcu.SetMagnitude(*f)
	}
	return pcu
}

// AddMagnitude adds f to the "magnitude" field.
func (pcu *PatChatUpdate) AddMagnitude(f float64) *PatChatUpdate {
	pcu.mutation.AddMagnitude(f)
	return pcu
}

// SetScore sets the "score" field.
func (pcu *PatChatUpdate) SetScore(f float64) *PatChatUpdate {
	pcu.mutation.ResetScore()
	pcu.mutation.SetScore(f)
	return pcu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillableScore(f *float64) *PatChatUpdate {
	if f != nil {
		pcu.SetScore(*f)
	}
	return pcu
}

// AddScore adds f to the "score" field.
func (pcu *PatChatUpdate) AddScore(f float64) *PatChatUpdate {
	pcu.mutation.AddScore(f)
	return pcu
}

// SetIsNegative sets the "is_negative" field.
func (pcu *PatChatUpdate) SetIsNegative(b bool) *PatChatUpdate {
	pcu.mutation.SetIsNegative(b)
	return pcu
}

// SetNillableIsNegative sets the "is_negative" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillableIsNegative(b *bool) *PatChatUpdate {
	if b != nil {
		pcu.SetIsNegative(*b)
	}
	return pcu
}

// SetPublishedAt sets the "published_at" field.
func (pcu *PatChatUpdate) SetPublishedAt(t time.Time) *PatChatUpdate {
	pcu.mutation.SetPublishedAt(t)
	return pcu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillablePublishedAt(t *time.Time) *PatChatUpdate {
	if t != nil {
		pcu.SetPublishedAt(*t)
	}
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *PatChatUpdate) SetCreatedAt(t time.Time) *PatChatUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *PatChatUpdate) SetNillableCreatedAt(t *time.Time) *PatChatUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (pcu *PatChatUpdate) SetVideoID(id pulid.ID) *PatChatUpdate {
	pcu.mutation.SetVideoID(id)
	return pcu
}

// SetVideo sets the "video" edge to the Video entity.
func (pcu *PatChatUpdate) SetVideo(v *Video) *PatChatUpdate {
	return pcu.SetVideoID(v.ID)
}

// Mutation returns the PatChatMutation object of the builder.
func (pcu *PatChatUpdate) Mutation() *PatChatMutation {
	return pcu.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (pcu *PatChatUpdate) ClearVideo() *PatChatUpdate {
	pcu.mutation.ClearVideo()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PatChatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PatChatUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PatChatUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PatChatUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PatChatUpdate) check() error {
	if _, ok := pcu.mutation.VideoID(); pcu.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Pat_chat.video"`)
	}
	return nil
}

func (pcu *PatChatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pat_chat.Table, pat_chat.Columns, sqlgraph.NewFieldSpec(pat_chat.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Message(); ok {
		_spec.SetField(pat_chat.FieldMessage, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Magnitude(); ok {
		_spec.SetField(pat_chat.FieldMagnitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedMagnitude(); ok {
		_spec.AddField(pat_chat.FieldMagnitude, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.Score(); ok {
		_spec.SetField(pat_chat.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedScore(); ok {
		_spec.AddField(pat_chat.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.IsNegative(); ok {
		_spec.SetField(pat_chat.FieldIsNegative, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.PublishedAt(); ok {
		_spec.SetField(pat_chat.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(pat_chat.FieldCreatedAt, field.TypeTime, value)
	}
	if pcu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pat_chat.VideoTable,
			Columns: []string{pat_chat.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pat_chat.VideoTable,
			Columns: []string{pat_chat.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pat_chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PatChatUpdateOne is the builder for updating a single Pat_chat entity.
type PatChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatChatMutation
}

// SetMessage sets the "message" field.
func (pcuo *PatChatUpdateOne) SetMessage(s string) *PatChatUpdateOne {
	pcuo.mutation.SetMessage(s)
	return pcuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillableMessage(s *string) *PatChatUpdateOne {
	if s != nil {
		pcuo.SetMessage(*s)
	}
	return pcuo
}

// SetMagnitude sets the "magnitude" field.
func (pcuo *PatChatUpdateOne) SetMagnitude(f float64) *PatChatUpdateOne {
	pcuo.mutation.ResetMagnitude()
	pcuo.mutation.SetMagnitude(f)
	return pcuo
}

// SetNillableMagnitude sets the "magnitude" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillableMagnitude(f *float64) *PatChatUpdateOne {
	if f != nil {
		pcuo.SetMagnitude(*f)
	}
	return pcuo
}

// AddMagnitude adds f to the "magnitude" field.
func (pcuo *PatChatUpdateOne) AddMagnitude(f float64) *PatChatUpdateOne {
	pcuo.mutation.AddMagnitude(f)
	return pcuo
}

// SetScore sets the "score" field.
func (pcuo *PatChatUpdateOne) SetScore(f float64) *PatChatUpdateOne {
	pcuo.mutation.ResetScore()
	pcuo.mutation.SetScore(f)
	return pcuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillableScore(f *float64) *PatChatUpdateOne {
	if f != nil {
		pcuo.SetScore(*f)
	}
	return pcuo
}

// AddScore adds f to the "score" field.
func (pcuo *PatChatUpdateOne) AddScore(f float64) *PatChatUpdateOne {
	pcuo.mutation.AddScore(f)
	return pcuo
}

// SetIsNegative sets the "is_negative" field.
func (pcuo *PatChatUpdateOne) SetIsNegative(b bool) *PatChatUpdateOne {
	pcuo.mutation.SetIsNegative(b)
	return pcuo
}

// SetNillableIsNegative sets the "is_negative" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillableIsNegative(b *bool) *PatChatUpdateOne {
	if b != nil {
		pcuo.SetIsNegative(*b)
	}
	return pcuo
}

// SetPublishedAt sets the "published_at" field.
func (pcuo *PatChatUpdateOne) SetPublishedAt(t time.Time) *PatChatUpdateOne {
	pcuo.mutation.SetPublishedAt(t)
	return pcuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillablePublishedAt(t *time.Time) *PatChatUpdateOne {
	if t != nil {
		pcuo.SetPublishedAt(*t)
	}
	return pcuo
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *PatChatUpdateOne) SetCreatedAt(t time.Time) *PatChatUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *PatChatUpdateOne) SetNillableCreatedAt(t *time.Time) *PatChatUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (pcuo *PatChatUpdateOne) SetVideoID(id pulid.ID) *PatChatUpdateOne {
	pcuo.mutation.SetVideoID(id)
	return pcuo
}

// SetVideo sets the "video" edge to the Video entity.
func (pcuo *PatChatUpdateOne) SetVideo(v *Video) *PatChatUpdateOne {
	return pcuo.SetVideoID(v.ID)
}

// Mutation returns the PatChatMutation object of the builder.
func (pcuo *PatChatUpdateOne) Mutation() *PatChatMutation {
	return pcuo.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (pcuo *PatChatUpdateOne) ClearVideo() *PatChatUpdateOne {
	pcuo.mutation.ClearVideo()
	return pcuo
}

// Where appends a list predicates to the PatChatUpdate builder.
func (pcuo *PatChatUpdateOne) Where(ps ...predicate.Pat_chat) *PatChatUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PatChatUpdateOne) Select(field string, fields ...string) *PatChatUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated Pat_chat entity.
func (pcuo *PatChatUpdateOne) Save(ctx context.Context) (*Pat_chat, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PatChatUpdateOne) SaveX(ctx context.Context) *Pat_chat {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PatChatUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PatChatUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PatChatUpdateOne) check() error {
	if _, ok := pcuo.mutation.VideoID(); pcuo.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Pat_chat.video"`)
	}
	return nil
}

func (pcuo *PatChatUpdateOne) sqlSave(ctx context.Context) (_node *Pat_chat, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pat_chat.Table, pat_chat.Columns, sqlgraph.NewFieldSpec(pat_chat.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pat_chat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pat_chat.FieldID)
		for _, f := range fields {
			if !pat_chat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pat_chat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Message(); ok {
		_spec.SetField(pat_chat.FieldMessage, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Magnitude(); ok {
		_spec.SetField(pat_chat.FieldMagnitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedMagnitude(); ok {
		_spec.AddField(pat_chat.FieldMagnitude, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.Score(); ok {
		_spec.SetField(pat_chat.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedScore(); ok {
		_spec.AddField(pat_chat.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.IsNegative(); ok {
		_spec.SetField(pat_chat.FieldIsNegative, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.PublishedAt(); ok {
		_spec.SetField(pat_chat.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(pat_chat.FieldCreatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pat_chat.VideoTable,
			Columns: []string{pat_chat.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pat_chat.VideoTable,
			Columns: []string{pat_chat.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pat_chat{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pat_chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
