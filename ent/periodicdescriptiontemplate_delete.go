// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/periodicdescriptiontemplate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
)

// PeriodicDescriptionTemplateDelete is the builder for deleting a PeriodicDescriptionTemplate entity.
type PeriodicDescriptionTemplateDelete struct {
	config
	hooks    []Hook
	mutation *PeriodicDescriptionTemplateMutation
}

// Where appends a list predicates to the PeriodicDescriptionTemplateDelete builder.
func (pdtd *PeriodicDescriptionTemplateDelete) Where(ps ...predicate.PeriodicDescriptionTemplate) *PeriodicDescriptionTemplateDelete {
	pdtd.mutation.Where(ps...)
	return pdtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pdtd *PeriodicDescriptionTemplateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pdtd.sqlExec, pdtd.mutation, pdtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtd *PeriodicDescriptionTemplateDelete) ExecX(ctx context.Context) int {
	n, err := pdtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pdtd *PeriodicDescriptionTemplateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(periodicdescriptiontemplate.Table, sqlgraph.NewFieldSpec(periodicdescriptiontemplate.FieldID, field.TypeString))
	if ps := pdtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pdtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pdtd.mutation.done = true
	return affected, err
}

// PeriodicDescriptionTemplateDeleteOne is the builder for deleting a single PeriodicDescriptionTemplate entity.
type PeriodicDescriptionTemplateDeleteOne struct {
	pdtd *PeriodicDescriptionTemplateDelete
}

// Where appends a list predicates to the PeriodicDescriptionTemplateDelete builder.
func (pdtdo *PeriodicDescriptionTemplateDeleteOne) Where(ps ...predicate.PeriodicDescriptionTemplate) *PeriodicDescriptionTemplateDeleteOne {
	pdtdo.pdtd.mutation.Where(ps...)
	return pdtdo
}

// Exec executes the deletion query.
func (pdtdo *PeriodicDescriptionTemplateDeleteOne) Exec(ctx context.Context) error {
	n, err := pdtdo.pdtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{periodicdescriptiontemplate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtdo *PeriodicDescriptionTemplateDeleteOne) ExecX(ctx context.Context) {
	if err := pdtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
