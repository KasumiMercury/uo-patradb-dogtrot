// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/periodicdescriptiontemplate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
)

// PeriodicDescriptionTemplateUpdate is the builder for updating PeriodicDescriptionTemplate entities.
type PeriodicDescriptionTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *PeriodicDescriptionTemplateMutation
}

// Where appends a list predicates to the PeriodicDescriptionTemplateUpdate builder.
func (pdtu *PeriodicDescriptionTemplateUpdate) Where(ps ...predicate.PeriodicDescriptionTemplate) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.Where(ps...)
	return pdtu
}

// SetText sets the "text" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetText(s string) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.SetText(s)
	return pdtu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetNillableText(s *string) *PeriodicDescriptionTemplateUpdate {
	if s != nil {
		pdtu.SetText(*s)
	}
	return pdtu
}

// SetStartUseAt sets the "start_use_at" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetStartUseAt(t time.Time) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.SetStartUseAt(t)
	return pdtu
}

// SetNillableStartUseAt sets the "start_use_at" field if the given value is not nil.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetNillableStartUseAt(t *time.Time) *PeriodicDescriptionTemplateUpdate {
	if t != nil {
		pdtu.SetStartUseAt(*t)
	}
	return pdtu
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) ClearStartUseAt() *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.ClearStartUseAt()
	return pdtu
}

// SetLastUseAt sets the "last_use_at" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetLastUseAt(t time.Time) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.SetLastUseAt(t)
	return pdtu
}

// SetNillableLastUseAt sets the "last_use_at" field if the given value is not nil.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetNillableLastUseAt(t *time.Time) *PeriodicDescriptionTemplateUpdate {
	if t != nil {
		pdtu.SetLastUseAt(*t)
	}
	return pdtu
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) ClearLastUseAt() *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.ClearLastUseAt()
	return pdtu
}

// SetHash sets the "hash" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetHash(u uint64) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.ResetHash()
	pdtu.mutation.SetHash(u)
	return pdtu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (pdtu *PeriodicDescriptionTemplateUpdate) SetNillableHash(u *uint64) *PeriodicDescriptionTemplateUpdate {
	if u != nil {
		pdtu.SetHash(*u)
	}
	return pdtu
}

// AddHash adds u to the "hash" field.
func (pdtu *PeriodicDescriptionTemplateUpdate) AddHash(u int64) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.AddHash(u)
	return pdtu
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (pdtu *PeriodicDescriptionTemplateUpdate) AddDescriptionIDs(ids ...string) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.AddDescriptionIDs(ids...)
	return pdtu
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (pdtu *PeriodicDescriptionTemplateUpdate) AddDescriptions(d ...*Description) *PeriodicDescriptionTemplateUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pdtu.AddDescriptionIDs(ids...)
}

// Mutation returns the PeriodicDescriptionTemplateMutation object of the builder.
func (pdtu *PeriodicDescriptionTemplateUpdate) Mutation() *PeriodicDescriptionTemplateMutation {
	return pdtu.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (pdtu *PeriodicDescriptionTemplateUpdate) ClearDescriptions() *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.ClearDescriptions()
	return pdtu
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (pdtu *PeriodicDescriptionTemplateUpdate) RemoveDescriptionIDs(ids ...string) *PeriodicDescriptionTemplateUpdate {
	pdtu.mutation.RemoveDescriptionIDs(ids...)
	return pdtu
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (pdtu *PeriodicDescriptionTemplateUpdate) RemoveDescriptions(d ...*Description) *PeriodicDescriptionTemplateUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pdtu.RemoveDescriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdtu *PeriodicDescriptionTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdtu.sqlSave, pdtu.mutation, pdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdtu *PeriodicDescriptionTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := pdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdtu *PeriodicDescriptionTemplateUpdate) Exec(ctx context.Context) error {
	_, err := pdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtu *PeriodicDescriptionTemplateUpdate) ExecX(ctx context.Context) {
	if err := pdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdtu *PeriodicDescriptionTemplateUpdate) check() error {
	if v, ok := pdtu.mutation.Text(); ok {
		if err := periodicdescriptiontemplate.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "PeriodicDescriptionTemplate.text": %w`, err)}
		}
	}
	return nil
}

func (pdtu *PeriodicDescriptionTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(periodicdescriptiontemplate.Table, periodicdescriptiontemplate.Columns, sqlgraph.NewFieldSpec(periodicdescriptiontemplate.FieldID, field.TypeString))
	if ps := pdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdtu.mutation.Text(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldText, field.TypeString, value)
	}
	if value, ok := pdtu.mutation.StartUseAt(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldStartUseAt, field.TypeTime, value)
	}
	if pdtu.mutation.StartUseAtCleared() {
		_spec.ClearField(periodicdescriptiontemplate.FieldStartUseAt, field.TypeTime)
	}
	if value, ok := pdtu.mutation.LastUseAt(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldLastUseAt, field.TypeTime, value)
	}
	if pdtu.mutation.LastUseAtCleared() {
		_spec.ClearField(periodicdescriptiontemplate.FieldLastUseAt, field.TypeTime)
	}
	if value, ok := pdtu.mutation.Hash(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldHash, field.TypeUint64, value)
	}
	if value, ok := pdtu.mutation.AddedHash(); ok {
		_spec.AddField(periodicdescriptiontemplate.FieldHash, field.TypeUint64, value)
	}
	if pdtu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtu.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !pdtu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtu.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{periodicdescriptiontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdtu.mutation.done = true
	return n, nil
}

// PeriodicDescriptionTemplateUpdateOne is the builder for updating a single PeriodicDescriptionTemplate entity.
type PeriodicDescriptionTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PeriodicDescriptionTemplateMutation
}

// SetText sets the "text" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetText(s string) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.SetText(s)
	return pdtuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetNillableText(s *string) *PeriodicDescriptionTemplateUpdateOne {
	if s != nil {
		pdtuo.SetText(*s)
	}
	return pdtuo
}

// SetStartUseAt sets the "start_use_at" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetStartUseAt(t time.Time) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.SetStartUseAt(t)
	return pdtuo
}

// SetNillableStartUseAt sets the "start_use_at" field if the given value is not nil.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetNillableStartUseAt(t *time.Time) *PeriodicDescriptionTemplateUpdateOne {
	if t != nil {
		pdtuo.SetStartUseAt(*t)
	}
	return pdtuo
}

// ClearStartUseAt clears the value of the "start_use_at" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) ClearStartUseAt() *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.ClearStartUseAt()
	return pdtuo
}

// SetLastUseAt sets the "last_use_at" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetLastUseAt(t time.Time) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.SetLastUseAt(t)
	return pdtuo
}

// SetNillableLastUseAt sets the "last_use_at" field if the given value is not nil.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetNillableLastUseAt(t *time.Time) *PeriodicDescriptionTemplateUpdateOne {
	if t != nil {
		pdtuo.SetLastUseAt(*t)
	}
	return pdtuo
}

// ClearLastUseAt clears the value of the "last_use_at" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) ClearLastUseAt() *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.ClearLastUseAt()
	return pdtuo
}

// SetHash sets the "hash" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetHash(u uint64) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.ResetHash()
	pdtuo.mutation.SetHash(u)
	return pdtuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SetNillableHash(u *uint64) *PeriodicDescriptionTemplateUpdateOne {
	if u != nil {
		pdtuo.SetHash(*u)
	}
	return pdtuo
}

// AddHash adds u to the "hash" field.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) AddHash(u int64) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.AddHash(u)
	return pdtuo
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) AddDescriptionIDs(ids ...string) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.AddDescriptionIDs(ids...)
	return pdtuo
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) AddDescriptions(d ...*Description) *PeriodicDescriptionTemplateUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pdtuo.AddDescriptionIDs(ids...)
}

// Mutation returns the PeriodicDescriptionTemplateMutation object of the builder.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) Mutation() *PeriodicDescriptionTemplateMutation {
	return pdtuo.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) ClearDescriptions() *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.ClearDescriptions()
	return pdtuo
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) RemoveDescriptionIDs(ids ...string) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.RemoveDescriptionIDs(ids...)
	return pdtuo
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) RemoveDescriptions(d ...*Description) *PeriodicDescriptionTemplateUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pdtuo.RemoveDescriptionIDs(ids...)
}

// Where appends a list predicates to the PeriodicDescriptionTemplateUpdate builder.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) Where(ps ...predicate.PeriodicDescriptionTemplate) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.mutation.Where(ps...)
	return pdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) Select(field string, fields ...string) *PeriodicDescriptionTemplateUpdateOne {
	pdtuo.fields = append([]string{field}, fields...)
	return pdtuo
}

// Save executes the query and returns the updated PeriodicDescriptionTemplate entity.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) Save(ctx context.Context) (*PeriodicDescriptionTemplate, error) {
	return withHooks(ctx, pdtuo.sqlSave, pdtuo.mutation, pdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) SaveX(ctx context.Context) *PeriodicDescriptionTemplate {
	node, err := pdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := pdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := pdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdtuo *PeriodicDescriptionTemplateUpdateOne) check() error {
	if v, ok := pdtuo.mutation.Text(); ok {
		if err := periodicdescriptiontemplate.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "PeriodicDescriptionTemplate.text": %w`, err)}
		}
	}
	return nil
}

func (pdtuo *PeriodicDescriptionTemplateUpdateOne) sqlSave(ctx context.Context) (_node *PeriodicDescriptionTemplate, err error) {
	if err := pdtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(periodicdescriptiontemplate.Table, periodicdescriptiontemplate.Columns, sqlgraph.NewFieldSpec(periodicdescriptiontemplate.FieldID, field.TypeString))
	id, ok := pdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PeriodicDescriptionTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, periodicdescriptiontemplate.FieldID)
		for _, f := range fields {
			if !periodicdescriptiontemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != periodicdescriptiontemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdtuo.mutation.Text(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldText, field.TypeString, value)
	}
	if value, ok := pdtuo.mutation.StartUseAt(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldStartUseAt, field.TypeTime, value)
	}
	if pdtuo.mutation.StartUseAtCleared() {
		_spec.ClearField(periodicdescriptiontemplate.FieldStartUseAt, field.TypeTime)
	}
	if value, ok := pdtuo.mutation.LastUseAt(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldLastUseAt, field.TypeTime, value)
	}
	if pdtuo.mutation.LastUseAtCleared() {
		_spec.ClearField(periodicdescriptiontemplate.FieldLastUseAt, field.TypeTime)
	}
	if value, ok := pdtuo.mutation.Hash(); ok {
		_spec.SetField(periodicdescriptiontemplate.FieldHash, field.TypeUint64, value)
	}
	if value, ok := pdtuo.mutation.AddedHash(); ok {
		_spec.AddField(periodicdescriptiontemplate.FieldHash, field.TypeUint64, value)
	}
	if pdtuo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtuo.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !pdtuo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtuo.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   periodicdescriptiontemplate.DescriptionsTable,
			Columns: []string{periodicdescriptiontemplate.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PeriodicDescriptionTemplate{config: pdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{periodicdescriptiontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pdtuo.mutation.done = true
	return _node, nil
}
