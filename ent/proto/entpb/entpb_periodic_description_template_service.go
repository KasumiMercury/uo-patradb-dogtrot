// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/KasumiMercury/uo-patradb-dogtrot/ent"
	periodicdescriptiontemplate "github.com/KasumiMercury/uo-patradb-dogtrot/ent/periodicdescriptiontemplate"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// PeriodicDescriptionTemplateService implements PeriodicDescriptionTemplateServiceServer
type PeriodicDescriptionTemplateService struct {
	client *ent.Client
	UnimplementedPeriodicDescriptionTemplateServiceServer
}

// NewPeriodicDescriptionTemplateService returns a new PeriodicDescriptionTemplateService
func NewPeriodicDescriptionTemplateService(client *ent.Client) *PeriodicDescriptionTemplateService {
	return &PeriodicDescriptionTemplateService{
		client: client,
	}
}

// toProtoPeriodicDescriptionTemplate transforms the ent type to the pb type
func toProtoPeriodicDescriptionTemplate(e *ent.PeriodicDescriptionTemplate) (*PeriodicDescriptionTemplate, error) {
	v := &PeriodicDescriptionTemplate{}
	id := e.ID
	v.Id = id
	last_use_at := timestamppb.New(e.LastUseAt)
	v.LastUseAt = last_use_at
	start_use_at := timestamppb.New(e.StartUseAt)
	v.StartUseAt = start_use_at
	text := e.Text
	v.Text = text
	return v, nil
}

// toProtoPeriodicDescriptionTemplateList transforms a list of ent type to a list of pb type
func toProtoPeriodicDescriptionTemplateList(e []*ent.PeriodicDescriptionTemplate) ([]*PeriodicDescriptionTemplate, error) {
	var pbList []*PeriodicDescriptionTemplate
	for _, entEntity := range e {
		pbEntity, err := toProtoPeriodicDescriptionTemplate(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements PeriodicDescriptionTemplateServiceServer.Create
func (svc *PeriodicDescriptionTemplateService) Create(ctx context.Context, req *CreatePeriodicDescriptionTemplateRequest) (*PeriodicDescriptionTemplate, error) {
	periodicdescriptiontemplate := req.GetPeriodicDescriptionTemplate()
	m, err := svc.createBuilder(periodicdescriptiontemplate)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPeriodicDescriptionTemplate(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements PeriodicDescriptionTemplateServiceServer.Get
func (svc *PeriodicDescriptionTemplateService) Get(ctx context.Context, req *GetPeriodicDescriptionTemplateRequest) (*PeriodicDescriptionTemplate, error) {
	var (
		err error
		get *ent.PeriodicDescriptionTemplate
	)
	id := req.GetId()
	switch req.GetView() {
	case GetPeriodicDescriptionTemplateRequest_VIEW_UNSPECIFIED, GetPeriodicDescriptionTemplateRequest_BASIC:
		get, err = svc.client.PeriodicDescriptionTemplate.Get(ctx, id)
	case GetPeriodicDescriptionTemplateRequest_WITH_EDGE_IDS:
		get, err = svc.client.PeriodicDescriptionTemplate.Query().
			Where(periodicdescriptiontemplate.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoPeriodicDescriptionTemplate(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements PeriodicDescriptionTemplateServiceServer.Update
func (svc *PeriodicDescriptionTemplateService) Update(ctx context.Context, req *UpdatePeriodicDescriptionTemplateRequest) (*PeriodicDescriptionTemplate, error) {
	periodicdescriptiontemplate := req.GetPeriodicDescriptionTemplate()
	periodicdescriptiontemplateID := periodicdescriptiontemplate.GetId()
	m := svc.client.PeriodicDescriptionTemplate.UpdateOneID(periodicdescriptiontemplateID)
	if periodicdescriptiontemplate.GetLastUseAt() != nil {
		periodicdescriptiontemplateLastUseAt := runtime.ExtractTime(periodicdescriptiontemplate.GetLastUseAt())
		m.SetLastUseAt(periodicdescriptiontemplateLastUseAt)
	}
	if periodicdescriptiontemplate.GetStartUseAt() != nil {
		periodicdescriptiontemplateStartUseAt := runtime.ExtractTime(periodicdescriptiontemplate.GetStartUseAt())
		m.SetStartUseAt(periodicdescriptiontemplateStartUseAt)
	}
	periodicdescriptiontemplateText := periodicdescriptiontemplate.GetText()
	m.SetText(periodicdescriptiontemplateText)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPeriodicDescriptionTemplate(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements PeriodicDescriptionTemplateServiceServer.Delete
func (svc *PeriodicDescriptionTemplateService) Delete(ctx context.Context, req *DeletePeriodicDescriptionTemplateRequest) (*empty.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.PeriodicDescriptionTemplate.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements PeriodicDescriptionTemplateServiceServer.List
func (svc *PeriodicDescriptionTemplateService) List(ctx context.Context, req *ListPeriodicDescriptionTemplateRequest) (*ListPeriodicDescriptionTemplateResponse, error) {
	var (
		err      error
		entList  []*ent.PeriodicDescriptionTemplate
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.PeriodicDescriptionTemplate.Query().
		Order(ent.Desc(periodicdescriptiontemplate.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(periodicdescriptiontemplate.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListPeriodicDescriptionTemplateRequest_VIEW_UNSPECIFIED, ListPeriodicDescriptionTemplateRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListPeriodicDescriptionTemplateRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoPeriodicDescriptionTemplateList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListPeriodicDescriptionTemplateResponse{
			PeriodicDescriptionTemplateList: protoList,
			NextPageToken:                   nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements PeriodicDescriptionTemplateServiceServer.BatchCreate
func (svc *PeriodicDescriptionTemplateService) BatchCreate(ctx context.Context, req *BatchCreatePeriodicDescriptionTemplatesRequest) (*BatchCreatePeriodicDescriptionTemplatesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.PeriodicDescriptionTemplateCreate, len(requests))
	for i, req := range requests {
		periodicdescriptiontemplate := req.GetPeriodicDescriptionTemplate()
		var err error
		bulk[i], err = svc.createBuilder(periodicdescriptiontemplate)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.PeriodicDescriptionTemplate.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoPeriodicDescriptionTemplateList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreatePeriodicDescriptionTemplatesResponse{
			PeriodicDescriptionTemplates: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *PeriodicDescriptionTemplateService) createBuilder(periodicdescriptiontemplate *PeriodicDescriptionTemplate) (*ent.PeriodicDescriptionTemplateCreate, error) {
	m := svc.client.PeriodicDescriptionTemplate.Create()
	if periodicdescriptiontemplate.GetLastUseAt() != nil {
		periodicdescriptiontemplateLastUseAt := runtime.ExtractTime(periodicdescriptiontemplate.GetLastUseAt())
		m.SetLastUseAt(periodicdescriptiontemplateLastUseAt)
	}
	if periodicdescriptiontemplate.GetStartUseAt() != nil {
		periodicdescriptiontemplateStartUseAt := runtime.ExtractTime(periodicdescriptiontemplate.GetStartUseAt())
		m.SetStartUseAt(periodicdescriptiontemplateStartUseAt)
	}
	periodicdescriptiontemplateText := periodicdescriptiontemplate.GetText()
	m.SetText(periodicdescriptiontemplateText)
	return m, nil
}
