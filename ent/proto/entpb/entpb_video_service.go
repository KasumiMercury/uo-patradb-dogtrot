// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/KasumiMercury/uo-patradb-dogtrot/ent"
	channel "github.com/KasumiMercury/uo-patradb-dogtrot/ent/channel"
	video "github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// VideoService implements VideoServiceServer
type VideoService struct {
	client *ent.Client
	UnimplementedVideoServiceServer
}

// NewVideoService returns a new VideoService
func NewVideoService(client *ent.Client) *VideoService {
	return &VideoService{
		client: client,
	}
}

// toProtoVideo transforms the ent type to the pb type
func toProtoVideo(e *ent.Video) (*Video, error) {
	v := &Video{}
	actual_end_at := timestamppb.New(e.ActualEndAt)
	v.ActualEndAt = actual_end_at
	actual_start_at := timestamppb.New(e.ActualStartAt)
	v.ActualStartAt = actual_start_at
	capture_permission := e.CapturePermission
	v.CapturePermission = capture_permission
	duration_seconds := wrapperspb.Int64(int64(e.DurationSeconds))
	v.DurationSeconds = duration_seconds
	has_time_range := e.HasTimeRange
	v.HasTimeRange = has_time_range
	id := e.ID
	v.Id = id
	is_collaboration := e.IsCollaboration
	v.IsCollaboration = is_collaboration
	published_at := timestamppb.New(e.PublishedAt)
	v.PublishedAt = published_at
	scheduled_at := timestamppb.New(e.ScheduledAt)
	v.ScheduledAt = scheduled_at
	source_id := e.SourceID
	v.SourceId = source_id
	status := e.Status
	v.Status = status
	title := e.Title
	v.Title = title
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	for _, edg := range e.Edges.Channel {
		id := edg.ID
		v.Channel = append(v.Channel, &Channel{
			Id: id,
		})
	}
	return v, nil
}

// toProtoVideoList transforms a list of ent type to a list of pb type
func toProtoVideoList(e []*ent.Video) ([]*Video, error) {
	var pbList []*Video
	for _, entEntity := range e {
		pbEntity, err := toProtoVideo(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements VideoServiceServer.Create
func (svc *VideoService) Create(ctx context.Context, req *CreateVideoRequest) (*Video, error) {
	video := req.GetVideo()
	m, err := svc.createBuilder(video)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVideo(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements VideoServiceServer.Get
func (svc *VideoService) Get(ctx context.Context, req *GetVideoRequest) (*Video, error) {
	var (
		err error
		get *ent.Video
	)
	id := req.GetId()
	switch req.GetView() {
	case GetVideoRequest_VIEW_UNSPECIFIED, GetVideoRequest_BASIC:
		get, err = svc.client.Video.Get(ctx, id)
	case GetVideoRequest_WITH_EDGE_IDS:
		get, err = svc.client.Video.Query().
			Where(video.ID(id)).
			WithChannel(func(query *ent.ChannelQuery) {
				query.Select(channel.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoVideo(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements VideoServiceServer.Update
func (svc *VideoService) Update(ctx context.Context, req *UpdateVideoRequest) (*Video, error) {
	video := req.GetVideo()
	videoID := video.GetId()
	m := svc.client.Video.UpdateOneID(videoID)
	if video.GetActualEndAt() != nil {
		videoActualEndAt := runtime.ExtractTime(video.GetActualEndAt())
		m.SetActualEndAt(videoActualEndAt)
	}
	if video.GetActualStartAt() != nil {
		videoActualStartAt := runtime.ExtractTime(video.GetActualStartAt())
		m.SetActualStartAt(videoActualStartAt)
	}
	videoCapturePermission := video.GetCapturePermission()
	m.SetCapturePermission(videoCapturePermission)
	if video.GetDurationSeconds() != nil {
		videoDurationSeconds := int(video.GetDurationSeconds().GetValue())
		m.SetDurationSeconds(videoDurationSeconds)
	}
	videoHasTimeRange := video.GetHasTimeRange()
	m.SetHasTimeRange(videoHasTimeRange)
	videoIsCollaboration := video.GetIsCollaboration()
	m.SetIsCollaboration(videoIsCollaboration)
	videoPublishedAt := runtime.ExtractTime(video.GetPublishedAt())
	m.SetPublishedAt(videoPublishedAt)
	if video.GetScheduledAt() != nil {
		videoScheduledAt := runtime.ExtractTime(video.GetScheduledAt())
		m.SetScheduledAt(videoScheduledAt)
	}
	videoSourceID := video.GetSourceId()
	m.SetSourceID(videoSourceID)
	videoStatus := video.GetStatus()
	m.SetStatus(videoStatus)
	videoTitle := video.GetTitle()
	m.SetTitle(videoTitle)
	videoUpdatedAt := runtime.ExtractTime(video.GetUpdatedAt())
	m.SetUpdatedAt(videoUpdatedAt)
	for _, item := range video.GetChannel() {
		channel := item.GetId()
		m.AddChannelIDs(channel)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVideo(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements VideoServiceServer.Delete
func (svc *VideoService) Delete(ctx context.Context, req *DeleteVideoRequest) (*empty.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.Video.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements VideoServiceServer.List
func (svc *VideoService) List(ctx context.Context, req *ListVideoRequest) (*ListVideoResponse, error) {
	var (
		err      error
		entList  []*ent.Video
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Video.Query().
		Order(ent.Desc(video.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(video.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListVideoRequest_VIEW_UNSPECIFIED, ListVideoRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListVideoRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithChannel(func(query *ent.ChannelQuery) {
				query.Select(channel.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoVideoList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListVideoResponse{
			VideoList:     protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements VideoServiceServer.BatchCreate
func (svc *VideoService) BatchCreate(ctx context.Context, req *BatchCreateVideosRequest) (*BatchCreateVideosResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.VideoCreate, len(requests))
	for i, req := range requests {
		video := req.GetVideo()
		var err error
		bulk[i], err = svc.createBuilder(video)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Video.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoVideoList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateVideosResponse{
			Videos: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *VideoService) createBuilder(video *Video) (*ent.VideoCreate, error) {
	m := svc.client.Video.Create()
	if video.GetActualEndAt() != nil {
		videoActualEndAt := runtime.ExtractTime(video.GetActualEndAt())
		m.SetActualEndAt(videoActualEndAt)
	}
	if video.GetActualStartAt() != nil {
		videoActualStartAt := runtime.ExtractTime(video.GetActualStartAt())
		m.SetActualStartAt(videoActualStartAt)
	}
	videoCapturePermission := video.GetCapturePermission()
	m.SetCapturePermission(videoCapturePermission)
	if video.GetDurationSeconds() != nil {
		videoDurationSeconds := int(video.GetDurationSeconds().GetValue())
		m.SetDurationSeconds(videoDurationSeconds)
	}
	videoHasTimeRange := video.GetHasTimeRange()
	m.SetHasTimeRange(videoHasTimeRange)
	videoIsCollaboration := video.GetIsCollaboration()
	m.SetIsCollaboration(videoIsCollaboration)
	videoPublishedAt := runtime.ExtractTime(video.GetPublishedAt())
	m.SetPublishedAt(videoPublishedAt)
	if video.GetScheduledAt() != nil {
		videoScheduledAt := runtime.ExtractTime(video.GetScheduledAt())
		m.SetScheduledAt(videoScheduledAt)
	}
	videoSourceID := video.GetSourceId()
	m.SetSourceID(videoSourceID)
	videoStatus := video.GetStatus()
	m.SetStatus(videoStatus)
	videoTitle := video.GetTitle()
	m.SetTitle(videoTitle)
	videoUpdatedAt := runtime.ExtractTime(video.GetUpdatedAt())
	m.SetUpdatedAt(videoUpdatedAt)
	for _, item := range video.GetChannel() {
		channel := item.GetId()
		m.AddChannelIDs(channel)
	}
	return m, nil
}
