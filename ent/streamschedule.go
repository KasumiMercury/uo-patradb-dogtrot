// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/streamschedule"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
)

// StreamSchedule is the model entity for the StreamSchedule schema.
type StreamSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ScheduledAt holds the value of the "scheduled_at" field.
	ScheduledAt time.Time `json:"scheduled_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StreamScheduleQuery when eager-loading is set.
	Edges        StreamScheduleEdges `json:"edges"`
	video_id     *string
	selectValues sql.SelectValues
}

// StreamScheduleEdges holds the relations/edges for other nodes in the graph.
type StreamScheduleEdges struct {
	// Videos holds the value of the videos edge.
	Videos *Video `json:"videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VideosOrErr returns the Videos value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StreamScheduleEdges) VideosOrErr() (*Video, error) {
	if e.loadedTypes[0] {
		if e.Videos == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: video.Label}
		}
		return e.Videos, nil
	}
	return nil, &NotLoadedError{edge: "videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StreamSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case streamschedule.FieldID, streamschedule.FieldTitle:
			values[i] = new(sql.NullString)
		case streamschedule.FieldScheduledAt, streamschedule.FieldCreatedAt, streamschedule.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case streamschedule.ForeignKeys[0]: // video_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StreamSchedule fields.
func (ss *StreamSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case streamschedule.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = value.String
			}
		case streamschedule.FieldScheduledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_at", values[i])
			} else if value.Valid {
				ss.ScheduledAt = value.Time
			}
		case streamschedule.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ss.Title = value.String
			}
		case streamschedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Time
			}
		case streamschedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Time
			}
		case streamschedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				ss.video_id = new(string)
				*ss.video_id = value.String
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StreamSchedule.
// This includes values selected through modifiers, order, etc.
func (ss *StreamSchedule) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryVideos queries the "videos" edge of the StreamSchedule entity.
func (ss *StreamSchedule) QueryVideos() *VideoQuery {
	return NewStreamScheduleClient(ss.config).QueryVideos(ss)
}

// Update returns a builder for updating this StreamSchedule.
// Note that you need to call StreamSchedule.Unwrap() before calling this method if this StreamSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *StreamSchedule) Update() *StreamScheduleUpdateOne {
	return NewStreamScheduleClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the StreamSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *StreamSchedule) Unwrap() *StreamSchedule {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: StreamSchedule is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *StreamSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("StreamSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("scheduled_at=")
	builder.WriteString(ss.ScheduledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ss.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ss.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ss.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StreamSchedules is a parsable slice of StreamSchedule.
type StreamSchedules []*StreamSchedule
