// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/streamschedule"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
)

// StreamScheduleCreate is the builder for creating a StreamSchedule entity.
type StreamScheduleCreate struct {
	config
	mutation *StreamScheduleMutation
	hooks    []Hook
}

// SetScheduledAt sets the "scheduled_at" field.
func (ssc *StreamScheduleCreate) SetScheduledAt(t time.Time) *StreamScheduleCreate {
	ssc.mutation.SetScheduledAt(t)
	return ssc
}

// SetTitle sets the "Title" field.
func (ssc *StreamScheduleCreate) SetTitle(s string) *StreamScheduleCreate {
	ssc.mutation.SetTitle(s)
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *StreamScheduleCreate) SetCreatedAt(t time.Time) *StreamScheduleCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *StreamScheduleCreate) SetUpdatedAt(t time.Time) *StreamScheduleCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetID sets the "id" field.
func (ssc *StreamScheduleCreate) SetID(s string) *StreamScheduleCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ssc *StreamScheduleCreate) SetNillableID(s *string) *StreamScheduleCreate {
	if s != nil {
		ssc.SetID(*s)
	}
	return ssc
}

// SetVideosID sets the "videos" edge to the Video entity by ID.
func (ssc *StreamScheduleCreate) SetVideosID(id string) *StreamScheduleCreate {
	ssc.mutation.SetVideosID(id)
	return ssc
}

// SetNillableVideosID sets the "videos" edge to the Video entity by ID if the given value is not nil.
func (ssc *StreamScheduleCreate) SetNillableVideosID(id *string) *StreamScheduleCreate {
	if id != nil {
		ssc = ssc.SetVideosID(*id)
	}
	return ssc
}

// SetVideos sets the "videos" edge to the Video entity.
func (ssc *StreamScheduleCreate) SetVideos(v *Video) *StreamScheduleCreate {
	return ssc.SetVideosID(v.ID)
}

// Mutation returns the StreamScheduleMutation object of the builder.
func (ssc *StreamScheduleCreate) Mutation() *StreamScheduleMutation {
	return ssc.mutation
}

// Save creates the StreamSchedule in the database.
func (ssc *StreamScheduleCreate) Save(ctx context.Context) (*StreamSchedule, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *StreamScheduleCreate) SaveX(ctx context.Context) *StreamSchedule {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *StreamScheduleCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *StreamScheduleCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *StreamScheduleCreate) defaults() {
	if _, ok := ssc.mutation.ID(); !ok {
		v := streamschedule.DefaultID()
		ssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *StreamScheduleCreate) check() error {
	if _, ok := ssc.mutation.ScheduledAt(); !ok {
		return &ValidationError{Name: "scheduled_at", err: errors.New(`ent: missing required field "StreamSchedule.scheduled_at"`)}
	}
	if _, ok := ssc.mutation.Title(); !ok {
		return &ValidationError{Name: "Title", err: errors.New(`ent: missing required field "StreamSchedule.Title"`)}
	}
	if v, ok := ssc.mutation.Title(); ok {
		if err := streamschedule.TitleValidator(v); err != nil {
			return &ValidationError{Name: "Title", err: fmt.Errorf(`ent: validator failed for field "StreamSchedule.Title": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StreamSchedule.created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StreamSchedule.updated_at"`)}
	}
	if v, ok := ssc.mutation.ID(); ok {
		if err := streamschedule.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "StreamSchedule.id": %w`, err)}
		}
	}
	return nil
}

func (ssc *StreamScheduleCreate) sqlSave(ctx context.Context) (*StreamSchedule, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected StreamSchedule.ID type: %T", _spec.ID.Value)
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *StreamScheduleCreate) createSpec() (*StreamSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &StreamSchedule{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(streamschedule.Table, sqlgraph.NewFieldSpec(streamschedule.FieldID, field.TypeString))
	)
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.ScheduledAt(); ok {
		_spec.SetField(streamschedule.FieldScheduledAt, field.TypeTime, value)
		_node.ScheduledAt = value
	}
	if value, ok := ssc.mutation.Title(); ok {
		_spec.SetField(streamschedule.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(streamschedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(streamschedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ssc.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   streamschedule.VideosTable,
			Columns: []string{streamschedule.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.video_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StreamScheduleCreateBulk is the builder for creating many StreamSchedule entities in bulk.
type StreamScheduleCreateBulk struct {
	config
	err      error
	builders []*StreamScheduleCreate
}

// Save creates the StreamSchedule entities in the database.
func (sscb *StreamScheduleCreateBulk) Save(ctx context.Context) ([]*StreamSchedule, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*StreamSchedule, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StreamScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *StreamScheduleCreateBulk) SaveX(ctx context.Context) []*StreamSchedule {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *StreamScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *StreamScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
