// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/streamschedule"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
)

// StreamScheduleUpdate is the builder for updating StreamSchedule entities.
type StreamScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *StreamScheduleMutation
}

// Where appends a list predicates to the StreamScheduleUpdate builder.
func (ssu *StreamScheduleUpdate) Where(ps ...predicate.StreamSchedule) *StreamScheduleUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetScheduledAt sets the "scheduled_at" field.
func (ssu *StreamScheduleUpdate) SetScheduledAt(t time.Time) *StreamScheduleUpdate {
	ssu.mutation.SetScheduledAt(t)
	return ssu
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (ssu *StreamScheduleUpdate) SetNillableScheduledAt(t *time.Time) *StreamScheduleUpdate {
	if t != nil {
		ssu.SetScheduledAt(*t)
	}
	return ssu
}

// SetTitle sets the "title" field.
func (ssu *StreamScheduleUpdate) SetTitle(s string) *StreamScheduleUpdate {
	ssu.mutation.SetTitle(s)
	return ssu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ssu *StreamScheduleUpdate) SetNillableTitle(s *string) *StreamScheduleUpdate {
	if s != nil {
		ssu.SetTitle(*s)
	}
	return ssu
}

// SetCreatedAt sets the "created_at" field.
func (ssu *StreamScheduleUpdate) SetCreatedAt(t time.Time) *StreamScheduleUpdate {
	ssu.mutation.SetCreatedAt(t)
	return ssu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssu *StreamScheduleUpdate) SetNillableCreatedAt(t *time.Time) *StreamScheduleUpdate {
	if t != nil {
		ssu.SetCreatedAt(*t)
	}
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *StreamScheduleUpdate) SetUpdatedAt(t time.Time) *StreamScheduleUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssu *StreamScheduleUpdate) SetNillableUpdatedAt(t *time.Time) *StreamScheduleUpdate {
	if t != nil {
		ssu.SetUpdatedAt(*t)
	}
	return ssu
}

// SetVideosID sets the "videos" edge to the Video entity by ID.
func (ssu *StreamScheduleUpdate) SetVideosID(id string) *StreamScheduleUpdate {
	ssu.mutation.SetVideosID(id)
	return ssu
}

// SetNillableVideosID sets the "videos" edge to the Video entity by ID if the given value is not nil.
func (ssu *StreamScheduleUpdate) SetNillableVideosID(id *string) *StreamScheduleUpdate {
	if id != nil {
		ssu = ssu.SetVideosID(*id)
	}
	return ssu
}

// SetVideos sets the "videos" edge to the Video entity.
func (ssu *StreamScheduleUpdate) SetVideos(v *Video) *StreamScheduleUpdate {
	return ssu.SetVideosID(v.ID)
}

// Mutation returns the StreamScheduleMutation object of the builder.
func (ssu *StreamScheduleUpdate) Mutation() *StreamScheduleMutation {
	return ssu.mutation
}

// ClearVideos clears the "videos" edge to the Video entity.
func (ssu *StreamScheduleUpdate) ClearVideos() *StreamScheduleUpdate {
	ssu.mutation.ClearVideos()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *StreamScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *StreamScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *StreamScheduleUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *StreamScheduleUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *StreamScheduleUpdate) check() error {
	if v, ok := ssu.mutation.Title(); ok {
		if err := streamschedule.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "StreamSchedule.title": %w`, err)}
		}
	}
	return nil
}

func (ssu *StreamScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(streamschedule.Table, streamschedule.Columns, sqlgraph.NewFieldSpec(streamschedule.FieldID, field.TypeString))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.ScheduledAt(); ok {
		_spec.SetField(streamschedule.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Title(); ok {
		_spec.SetField(streamschedule.FieldTitle, field.TypeString, value)
	}
	if value, ok := ssu.mutation.CreatedAt(); ok {
		_spec.SetField(streamschedule.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(streamschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   streamschedule.VideosTable,
			Columns: []string{streamschedule.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   streamschedule.VideosTable,
			Columns: []string{streamschedule.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{streamschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// StreamScheduleUpdateOne is the builder for updating a single StreamSchedule entity.
type StreamScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StreamScheduleMutation
}

// SetScheduledAt sets the "scheduled_at" field.
func (ssuo *StreamScheduleUpdateOne) SetScheduledAt(t time.Time) *StreamScheduleUpdateOne {
	ssuo.mutation.SetScheduledAt(t)
	return ssuo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (ssuo *StreamScheduleUpdateOne) SetNillableScheduledAt(t *time.Time) *StreamScheduleUpdateOne {
	if t != nil {
		ssuo.SetScheduledAt(*t)
	}
	return ssuo
}

// SetTitle sets the "title" field.
func (ssuo *StreamScheduleUpdateOne) SetTitle(s string) *StreamScheduleUpdateOne {
	ssuo.mutation.SetTitle(s)
	return ssuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ssuo *StreamScheduleUpdateOne) SetNillableTitle(s *string) *StreamScheduleUpdateOne {
	if s != nil {
		ssuo.SetTitle(*s)
	}
	return ssuo
}

// SetCreatedAt sets the "created_at" field.
func (ssuo *StreamScheduleUpdateOne) SetCreatedAt(t time.Time) *StreamScheduleUpdateOne {
	ssuo.mutation.SetCreatedAt(t)
	return ssuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssuo *StreamScheduleUpdateOne) SetNillableCreatedAt(t *time.Time) *StreamScheduleUpdateOne {
	if t != nil {
		ssuo.SetCreatedAt(*t)
	}
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *StreamScheduleUpdateOne) SetUpdatedAt(t time.Time) *StreamScheduleUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssuo *StreamScheduleUpdateOne) SetNillableUpdatedAt(t *time.Time) *StreamScheduleUpdateOne {
	if t != nil {
		ssuo.SetUpdatedAt(*t)
	}
	return ssuo
}

// SetVideosID sets the "videos" edge to the Video entity by ID.
func (ssuo *StreamScheduleUpdateOne) SetVideosID(id string) *StreamScheduleUpdateOne {
	ssuo.mutation.SetVideosID(id)
	return ssuo
}

// SetNillableVideosID sets the "videos" edge to the Video entity by ID if the given value is not nil.
func (ssuo *StreamScheduleUpdateOne) SetNillableVideosID(id *string) *StreamScheduleUpdateOne {
	if id != nil {
		ssuo = ssuo.SetVideosID(*id)
	}
	return ssuo
}

// SetVideos sets the "videos" edge to the Video entity.
func (ssuo *StreamScheduleUpdateOne) SetVideos(v *Video) *StreamScheduleUpdateOne {
	return ssuo.SetVideosID(v.ID)
}

// Mutation returns the StreamScheduleMutation object of the builder.
func (ssuo *StreamScheduleUpdateOne) Mutation() *StreamScheduleMutation {
	return ssuo.mutation
}

// ClearVideos clears the "videos" edge to the Video entity.
func (ssuo *StreamScheduleUpdateOne) ClearVideos() *StreamScheduleUpdateOne {
	ssuo.mutation.ClearVideos()
	return ssuo
}

// Where appends a list predicates to the StreamScheduleUpdate builder.
func (ssuo *StreamScheduleUpdateOne) Where(ps ...predicate.StreamSchedule) *StreamScheduleUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *StreamScheduleUpdateOne) Select(field string, fields ...string) *StreamScheduleUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated StreamSchedule entity.
func (ssuo *StreamScheduleUpdateOne) Save(ctx context.Context) (*StreamSchedule, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *StreamScheduleUpdateOne) SaveX(ctx context.Context) *StreamSchedule {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *StreamScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *StreamScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *StreamScheduleUpdateOne) check() error {
	if v, ok := ssuo.mutation.Title(); ok {
		if err := streamschedule.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "StreamSchedule.title": %w`, err)}
		}
	}
	return nil
}

func (ssuo *StreamScheduleUpdateOne) sqlSave(ctx context.Context) (_node *StreamSchedule, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(streamschedule.Table, streamschedule.Columns, sqlgraph.NewFieldSpec(streamschedule.FieldID, field.TypeString))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StreamSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, streamschedule.FieldID)
		for _, f := range fields {
			if !streamschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != streamschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.ScheduledAt(); ok {
		_spec.SetField(streamschedule.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Title(); ok {
		_spec.SetField(streamschedule.FieldTitle, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.CreatedAt(); ok {
		_spec.SetField(streamschedule.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(streamschedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if ssuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   streamschedule.VideosTable,
			Columns: []string{streamschedule.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   streamschedule.VideosTable,
			Columns: []string{streamschedule.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StreamSchedule{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{streamschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
