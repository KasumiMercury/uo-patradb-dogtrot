// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_disallow_range"
)

// VideoDisallowRangeCreate is the builder for creating a Video_disallow_range entity.
type VideoDisallowRangeCreate struct {
	config
	mutation *VideoDisallowRangeMutation
	hooks    []Hook
}

// SetStartSeconds sets the "start_seconds" field.
func (vdrc *VideoDisallowRangeCreate) SetStartSeconds(i int) *VideoDisallowRangeCreate {
	vdrc.mutation.SetStartSeconds(i)
	return vdrc
}

// SetEndSeconds sets the "end_seconds" field.
func (vdrc *VideoDisallowRangeCreate) SetEndSeconds(i int) *VideoDisallowRangeCreate {
	vdrc.mutation.SetEndSeconds(i)
	return vdrc
}

// SetID sets the "id" field.
func (vdrc *VideoDisallowRangeCreate) SetID(pu pulid.ID) *VideoDisallowRangeCreate {
	vdrc.mutation.SetID(pu)
	return vdrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vdrc *VideoDisallowRangeCreate) SetNillableID(pu *pulid.ID) *VideoDisallowRangeCreate {
	if pu != nil {
		vdrc.SetID(*pu)
	}
	return vdrc
}

// AddVideoIDs adds the "video" edge to the Video entity by IDs.
func (vdrc *VideoDisallowRangeCreate) AddVideoIDs(ids ...pulid.ID) *VideoDisallowRangeCreate {
	vdrc.mutation.AddVideoIDs(ids...)
	return vdrc
}

// AddVideo adds the "video" edges to the Video entity.
func (vdrc *VideoDisallowRangeCreate) AddVideo(v ...*Video) *VideoDisallowRangeCreate {
	ids := make([]pulid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdrc.AddVideoIDs(ids...)
}

// Mutation returns the VideoDisallowRangeMutation object of the builder.
func (vdrc *VideoDisallowRangeCreate) Mutation() *VideoDisallowRangeMutation {
	return vdrc.mutation
}

// Save creates the Video_disallow_range in the database.
func (vdrc *VideoDisallowRangeCreate) Save(ctx context.Context) (*Video_disallow_range, error) {
	vdrc.defaults()
	return withHooks(ctx, vdrc.sqlSave, vdrc.mutation, vdrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdrc *VideoDisallowRangeCreate) SaveX(ctx context.Context) *Video_disallow_range {
	v, err := vdrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdrc *VideoDisallowRangeCreate) Exec(ctx context.Context) error {
	_, err := vdrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdrc *VideoDisallowRangeCreate) ExecX(ctx context.Context) {
	if err := vdrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdrc *VideoDisallowRangeCreate) defaults() {
	if _, ok := vdrc.mutation.ID(); !ok {
		v := video_disallow_range.DefaultID()
		vdrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdrc *VideoDisallowRangeCreate) check() error {
	if _, ok := vdrc.mutation.StartSeconds(); !ok {
		return &ValidationError{Name: "start_seconds", err: errors.New(`ent: missing required field "Video_disallow_range.start_seconds"`)}
	}
	if _, ok := vdrc.mutation.EndSeconds(); !ok {
		return &ValidationError{Name: "end_seconds", err: errors.New(`ent: missing required field "Video_disallow_range.end_seconds"`)}
	}
	if len(vdrc.mutation.VideoIDs()) == 0 {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required edge "Video_disallow_range.video"`)}
	}
	return nil
}

func (vdrc *VideoDisallowRangeCreate) sqlSave(ctx context.Context) (*Video_disallow_range, error) {
	if err := vdrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(pulid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Video_disallow_range.ID type: %T", _spec.ID.Value)
		}
	}
	vdrc.mutation.id = &_node.ID
	vdrc.mutation.done = true
	return _node, nil
}

func (vdrc *VideoDisallowRangeCreate) createSpec() (*Video_disallow_range, *sqlgraph.CreateSpec) {
	var (
		_node = &Video_disallow_range{config: vdrc.config}
		_spec = sqlgraph.NewCreateSpec(video_disallow_range.Table, sqlgraph.NewFieldSpec(video_disallow_range.FieldID, field.TypeString))
	)
	if id, ok := vdrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vdrc.mutation.StartSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldStartSeconds, field.TypeInt, value)
		_node.StartSeconds = value
	}
	if value, ok := vdrc.mutation.EndSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldEndSeconds, field.TypeInt, value)
		_node.EndSeconds = value
	}
	if nodes := vdrc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoDisallowRangeCreateBulk is the builder for creating many Video_disallow_range entities in bulk.
type VideoDisallowRangeCreateBulk struct {
	config
	err      error
	builders []*VideoDisallowRangeCreate
}

// Save creates the Video_disallow_range entities in the database.
func (vdrcb *VideoDisallowRangeCreateBulk) Save(ctx context.Context) ([]*Video_disallow_range, error) {
	if vdrcb.err != nil {
		return nil, vdrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vdrcb.builders))
	nodes := make([]*Video_disallow_range, len(vdrcb.builders))
	mutators := make([]Mutator, len(vdrcb.builders))
	for i := range vdrcb.builders {
		func(i int, root context.Context) {
			builder := vdrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoDisallowRangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdrcb *VideoDisallowRangeCreateBulk) SaveX(ctx context.Context) []*Video_disallow_range {
	v, err := vdrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdrcb *VideoDisallowRangeCreateBulk) Exec(ctx context.Context) error {
	_, err := vdrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdrcb *VideoDisallowRangeCreateBulk) ExecX(ctx context.Context) {
	if err := vdrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
