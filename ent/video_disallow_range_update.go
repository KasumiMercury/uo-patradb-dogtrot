// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_disallow_range"
)

// VideoDisallowRangeUpdate is the builder for updating Video_disallow_range entities.
type VideoDisallowRangeUpdate struct {
	config
	hooks    []Hook
	mutation *VideoDisallowRangeMutation
}

// Where appends a list predicates to the VideoDisallowRangeUpdate builder.
func (vdru *VideoDisallowRangeUpdate) Where(ps ...predicate.Video_disallow_range) *VideoDisallowRangeUpdate {
	vdru.mutation.Where(ps...)
	return vdru
}

// SetStartSeconds sets the "start_seconds" field.
func (vdru *VideoDisallowRangeUpdate) SetStartSeconds(i int) *VideoDisallowRangeUpdate {
	vdru.mutation.ResetStartSeconds()
	vdru.mutation.SetStartSeconds(i)
	return vdru
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (vdru *VideoDisallowRangeUpdate) SetNillableStartSeconds(i *int) *VideoDisallowRangeUpdate {
	if i != nil {
		vdru.SetStartSeconds(*i)
	}
	return vdru
}

// AddStartSeconds adds i to the "start_seconds" field.
func (vdru *VideoDisallowRangeUpdate) AddStartSeconds(i int) *VideoDisallowRangeUpdate {
	vdru.mutation.AddStartSeconds(i)
	return vdru
}

// SetEndSeconds sets the "end_seconds" field.
func (vdru *VideoDisallowRangeUpdate) SetEndSeconds(i int) *VideoDisallowRangeUpdate {
	vdru.mutation.ResetEndSeconds()
	vdru.mutation.SetEndSeconds(i)
	return vdru
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (vdru *VideoDisallowRangeUpdate) SetNillableEndSeconds(i *int) *VideoDisallowRangeUpdate {
	if i != nil {
		vdru.SetEndSeconds(*i)
	}
	return vdru
}

// AddEndSeconds adds i to the "end_seconds" field.
func (vdru *VideoDisallowRangeUpdate) AddEndSeconds(i int) *VideoDisallowRangeUpdate {
	vdru.mutation.AddEndSeconds(i)
	return vdru
}

// AddVideoIDs adds the "video" edge to the Video entity by IDs.
func (vdru *VideoDisallowRangeUpdate) AddVideoIDs(ids ...pulid.ID) *VideoDisallowRangeUpdate {
	vdru.mutation.AddVideoIDs(ids...)
	return vdru
}

// AddVideo adds the "video" edges to the Video entity.
func (vdru *VideoDisallowRangeUpdate) AddVideo(v ...*Video) *VideoDisallowRangeUpdate {
	ids := make([]pulid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdru.AddVideoIDs(ids...)
}

// Mutation returns the VideoDisallowRangeMutation object of the builder.
func (vdru *VideoDisallowRangeUpdate) Mutation() *VideoDisallowRangeMutation {
	return vdru.mutation
}

// ClearVideo clears all "video" edges to the Video entity.
func (vdru *VideoDisallowRangeUpdate) ClearVideo() *VideoDisallowRangeUpdate {
	vdru.mutation.ClearVideo()
	return vdru
}

// RemoveVideoIDs removes the "video" edge to Video entities by IDs.
func (vdru *VideoDisallowRangeUpdate) RemoveVideoIDs(ids ...pulid.ID) *VideoDisallowRangeUpdate {
	vdru.mutation.RemoveVideoIDs(ids...)
	return vdru
}

// RemoveVideo removes "video" edges to Video entities.
func (vdru *VideoDisallowRangeUpdate) RemoveVideo(v ...*Video) *VideoDisallowRangeUpdate {
	ids := make([]pulid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdru.RemoveVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdru *VideoDisallowRangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vdru.sqlSave, vdru.mutation, vdru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdru *VideoDisallowRangeUpdate) SaveX(ctx context.Context) int {
	affected, err := vdru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdru *VideoDisallowRangeUpdate) Exec(ctx context.Context) error {
	_, err := vdru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdru *VideoDisallowRangeUpdate) ExecX(ctx context.Context) {
	if err := vdru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vdru *VideoDisallowRangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(video_disallow_range.Table, video_disallow_range.Columns, sqlgraph.NewFieldSpec(video_disallow_range.FieldID, field.TypeString))
	if ps := vdru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdru.mutation.StartSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vdru.mutation.AddedStartSeconds(); ok {
		_spec.AddField(video_disallow_range.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vdru.mutation.EndSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldEndSeconds, field.TypeInt, value)
	}
	if value, ok := vdru.mutation.AddedEndSeconds(); ok {
		_spec.AddField(video_disallow_range.FieldEndSeconds, field.TypeInt, value)
	}
	if vdru.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdru.mutation.RemovedVideoIDs(); len(nodes) > 0 && !vdru.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdru.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video_disallow_range.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdru.mutation.done = true
	return n, nil
}

// VideoDisallowRangeUpdateOne is the builder for updating a single Video_disallow_range entity.
type VideoDisallowRangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoDisallowRangeMutation
}

// SetStartSeconds sets the "start_seconds" field.
func (vdruo *VideoDisallowRangeUpdateOne) SetStartSeconds(i int) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.ResetStartSeconds()
	vdruo.mutation.SetStartSeconds(i)
	return vdruo
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (vdruo *VideoDisallowRangeUpdateOne) SetNillableStartSeconds(i *int) *VideoDisallowRangeUpdateOne {
	if i != nil {
		vdruo.SetStartSeconds(*i)
	}
	return vdruo
}

// AddStartSeconds adds i to the "start_seconds" field.
func (vdruo *VideoDisallowRangeUpdateOne) AddStartSeconds(i int) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.AddStartSeconds(i)
	return vdruo
}

// SetEndSeconds sets the "end_seconds" field.
func (vdruo *VideoDisallowRangeUpdateOne) SetEndSeconds(i int) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.ResetEndSeconds()
	vdruo.mutation.SetEndSeconds(i)
	return vdruo
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (vdruo *VideoDisallowRangeUpdateOne) SetNillableEndSeconds(i *int) *VideoDisallowRangeUpdateOne {
	if i != nil {
		vdruo.SetEndSeconds(*i)
	}
	return vdruo
}

// AddEndSeconds adds i to the "end_seconds" field.
func (vdruo *VideoDisallowRangeUpdateOne) AddEndSeconds(i int) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.AddEndSeconds(i)
	return vdruo
}

// AddVideoIDs adds the "video" edge to the Video entity by IDs.
func (vdruo *VideoDisallowRangeUpdateOne) AddVideoIDs(ids ...pulid.ID) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.AddVideoIDs(ids...)
	return vdruo
}

// AddVideo adds the "video" edges to the Video entity.
func (vdruo *VideoDisallowRangeUpdateOne) AddVideo(v ...*Video) *VideoDisallowRangeUpdateOne {
	ids := make([]pulid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdruo.AddVideoIDs(ids...)
}

// Mutation returns the VideoDisallowRangeMutation object of the builder.
func (vdruo *VideoDisallowRangeUpdateOne) Mutation() *VideoDisallowRangeMutation {
	return vdruo.mutation
}

// ClearVideo clears all "video" edges to the Video entity.
func (vdruo *VideoDisallowRangeUpdateOne) ClearVideo() *VideoDisallowRangeUpdateOne {
	vdruo.mutation.ClearVideo()
	return vdruo
}

// RemoveVideoIDs removes the "video" edge to Video entities by IDs.
func (vdruo *VideoDisallowRangeUpdateOne) RemoveVideoIDs(ids ...pulid.ID) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.RemoveVideoIDs(ids...)
	return vdruo
}

// RemoveVideo removes "video" edges to Video entities.
func (vdruo *VideoDisallowRangeUpdateOne) RemoveVideo(v ...*Video) *VideoDisallowRangeUpdateOne {
	ids := make([]pulid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdruo.RemoveVideoIDs(ids...)
}

// Where appends a list predicates to the VideoDisallowRangeUpdate builder.
func (vdruo *VideoDisallowRangeUpdateOne) Where(ps ...predicate.Video_disallow_range) *VideoDisallowRangeUpdateOne {
	vdruo.mutation.Where(ps...)
	return vdruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vdruo *VideoDisallowRangeUpdateOne) Select(field string, fields ...string) *VideoDisallowRangeUpdateOne {
	vdruo.fields = append([]string{field}, fields...)
	return vdruo
}

// Save executes the query and returns the updated Video_disallow_range entity.
func (vdruo *VideoDisallowRangeUpdateOne) Save(ctx context.Context) (*Video_disallow_range, error) {
	return withHooks(ctx, vdruo.sqlSave, vdruo.mutation, vdruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdruo *VideoDisallowRangeUpdateOne) SaveX(ctx context.Context) *Video_disallow_range {
	node, err := vdruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vdruo *VideoDisallowRangeUpdateOne) Exec(ctx context.Context) error {
	_, err := vdruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdruo *VideoDisallowRangeUpdateOne) ExecX(ctx context.Context) {
	if err := vdruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vdruo *VideoDisallowRangeUpdateOne) sqlSave(ctx context.Context) (_node *Video_disallow_range, err error) {
	_spec := sqlgraph.NewUpdateSpec(video_disallow_range.Table, video_disallow_range.Columns, sqlgraph.NewFieldSpec(video_disallow_range.FieldID, field.TypeString))
	id, ok := vdruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Video_disallow_range.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vdruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video_disallow_range.FieldID)
		for _, f := range fields {
			if !video_disallow_range.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != video_disallow_range.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vdruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdruo.mutation.StartSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vdruo.mutation.AddedStartSeconds(); ok {
		_spec.AddField(video_disallow_range.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vdruo.mutation.EndSeconds(); ok {
		_spec.SetField(video_disallow_range.FieldEndSeconds, field.TypeInt, value)
	}
	if value, ok := vdruo.mutation.AddedEndSeconds(); ok {
		_spec.AddField(video_disallow_range.FieldEndSeconds, field.TypeInt, value)
	}
	if vdruo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdruo.mutation.RemovedVideoIDs(); len(nodes) > 0 && !vdruo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdruo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video_disallow_range.VideoTable,
			Columns: video_disallow_range.VideoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video_disallow_range{config: vdruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vdruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video_disallow_range.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vdruo.mutation.done = true
	return _node, nil
}
