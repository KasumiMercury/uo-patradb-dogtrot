// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_play_range"
)

// VideoPlayRangeDelete is the builder for deleting a Video_play_range entity.
type VideoPlayRangeDelete struct {
	config
	hooks    []Hook
	mutation *VideoPlayRangeMutation
}

// Where appends a list predicates to the VideoPlayRangeDelete builder.
func (vprd *VideoPlayRangeDelete) Where(ps ...predicate.Video_play_range) *VideoPlayRangeDelete {
	vprd.mutation.Where(ps...)
	return vprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vprd *VideoPlayRangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vprd.sqlExec, vprd.mutation, vprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vprd *VideoPlayRangeDelete) ExecX(ctx context.Context) int {
	n, err := vprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vprd *VideoPlayRangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(video_play_range.Table, sqlgraph.NewFieldSpec(video_play_range.FieldID, field.TypeString))
	if ps := vprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vprd.mutation.done = true
	return affected, err
}

// VideoPlayRangeDeleteOne is the builder for deleting a single Video_play_range entity.
type VideoPlayRangeDeleteOne struct {
	vprd *VideoPlayRangeDelete
}

// Where appends a list predicates to the VideoPlayRangeDelete builder.
func (vprdo *VideoPlayRangeDeleteOne) Where(ps ...predicate.Video_play_range) *VideoPlayRangeDeleteOne {
	vprdo.vprd.mutation.Where(ps...)
	return vprdo
}

// Exec executes the deletion query.
func (vprdo *VideoPlayRangeDeleteOne) Exec(ctx context.Context) error {
	n, err := vprdo.vprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{video_play_range.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vprdo *VideoPlayRangeDeleteOne) ExecX(ctx context.Context) {
	if err := vprdo.Exec(ctx); err != nil {
		panic(err)
	}
}
