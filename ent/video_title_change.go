// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video_title_change"
)

// Video_title_change is the model entity for the Video_title_change schema.
type Video_title_change struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// NormalizedTitle holds the value of the "normalized_title" field.
	NormalizedTitle string `json:"normalized_title,omitempty"`
	// ChangedAt holds the value of the "changed_at" field.
	ChangedAt time.Time `json:"changed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Video_title_changeQuery when eager-loading is set.
	Edges        Video_title_changeEdges `json:"edges"`
	video_id     *pulid.ID
	selectValues sql.SelectValues
}

// Video_title_changeEdges holds the relations/edges for other nodes in the graph.
type Video_title_changeEdges struct {
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Video_title_changeEdges) VideoOrErr() (*Video, error) {
	if e.loadedTypes[0] {
		if e.Video == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: video.Label}
		}
		return e.Video, nil
	}
	return nil, &NotLoadedError{edge: "video"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video_title_change) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case video_title_change.FieldID, video_title_change.FieldTitle, video_title_change.FieldNormalizedTitle:
			values[i] = new(sql.NullString)
		case video_title_change.FieldChangedAt:
			values[i] = new(sql.NullTime)
		case video_title_change.ForeignKeys[0]: // video_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video_title_change fields.
func (vtc *Video_title_change) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video_title_change.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vtc.ID = pulid.ID(value.String)
			}
		case video_title_change.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				vtc.Title = value.String
			}
		case video_title_change.FieldNormalizedTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field normalized_title", values[i])
			} else if value.Valid {
				vtc.NormalizedTitle = value.String
			}
		case video_title_change.FieldChangedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field changed_at", values[i])
			} else if value.Valid {
				vtc.ChangedAt = value.Time
			}
		case video_title_change.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				vtc.video_id = new(pulid.ID)
				*vtc.video_id = pulid.ID(value.String)
			}
		default:
			vtc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Video_title_change.
// This includes values selected through modifiers, order, etc.
func (vtc *Video_title_change) Value(name string) (ent.Value, error) {
	return vtc.selectValues.Get(name)
}

// QueryVideo queries the "video" edge of the Video_title_change entity.
func (vtc *Video_title_change) QueryVideo() *VideoQuery {
	return NewVideoTitleChangeClient(vtc.config).QueryVideo(vtc)
}

// Update returns a builder for updating this Video_title_change.
// Note that you need to call Video_title_change.Unwrap() before calling this method if this Video_title_change
// was returned from a transaction, and the transaction was committed or rolled back.
func (vtc *Video_title_change) Update() *VideoTitleChangeUpdateOne {
	return NewVideoTitleChangeClient(vtc.config).UpdateOne(vtc)
}

// Unwrap unwraps the Video_title_change entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vtc *Video_title_change) Unwrap() *Video_title_change {
	_tx, ok := vtc.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video_title_change is not a transactional entity")
	}
	vtc.config.driver = _tx.drv
	return vtc
}

// String implements the fmt.Stringer.
func (vtc *Video_title_change) String() string {
	var builder strings.Builder
	builder.WriteString("Video_title_change(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vtc.ID))
	builder.WriteString("title=")
	builder.WriteString(vtc.Title)
	builder.WriteString(", ")
	builder.WriteString("normalized_title=")
	builder.WriteString(vtc.NormalizedTitle)
	builder.WriteString(", ")
	builder.WriteString("changed_at=")
	builder.WriteString(vtc.ChangedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Video_title_changes is a parsable slice of Video_title_change.
type Video_title_changes []*Video_title_change
