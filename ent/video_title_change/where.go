// Code generated by ent, DO NOT EDIT.

package video_title_change

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/schema/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldTitle, v))
}

// NormalizedTitle applies equality check predicate on the "normalized_title" field. It's identical to NormalizedTitleEQ.
func NormalizedTitle(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldNormalizedTitle, v))
}

// ChangedAt applies equality check predicate on the "changed_at" field. It's identical to ChangedAtEQ.
func ChangedAt(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldChangedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldContainsFold(FieldTitle, v))
}

// NormalizedTitleEQ applies the EQ predicate on the "normalized_title" field.
func NormalizedTitleEQ(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldNormalizedTitle, v))
}

// NormalizedTitleNEQ applies the NEQ predicate on the "normalized_title" field.
func NormalizedTitleNEQ(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNEQ(FieldNormalizedTitle, v))
}

// NormalizedTitleIn applies the In predicate on the "normalized_title" field.
func NormalizedTitleIn(vs ...string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldIn(FieldNormalizedTitle, vs...))
}

// NormalizedTitleNotIn applies the NotIn predicate on the "normalized_title" field.
func NormalizedTitleNotIn(vs ...string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNotIn(FieldNormalizedTitle, vs...))
}

// NormalizedTitleGT applies the GT predicate on the "normalized_title" field.
func NormalizedTitleGT(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGT(FieldNormalizedTitle, v))
}

// NormalizedTitleGTE applies the GTE predicate on the "normalized_title" field.
func NormalizedTitleGTE(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGTE(FieldNormalizedTitle, v))
}

// NormalizedTitleLT applies the LT predicate on the "normalized_title" field.
func NormalizedTitleLT(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLT(FieldNormalizedTitle, v))
}

// NormalizedTitleLTE applies the LTE predicate on the "normalized_title" field.
func NormalizedTitleLTE(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLTE(FieldNormalizedTitle, v))
}

// NormalizedTitleContains applies the Contains predicate on the "normalized_title" field.
func NormalizedTitleContains(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldContains(FieldNormalizedTitle, v))
}

// NormalizedTitleHasPrefix applies the HasPrefix predicate on the "normalized_title" field.
func NormalizedTitleHasPrefix(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldHasPrefix(FieldNormalizedTitle, v))
}

// NormalizedTitleHasSuffix applies the HasSuffix predicate on the "normalized_title" field.
func NormalizedTitleHasSuffix(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldHasSuffix(FieldNormalizedTitle, v))
}

// NormalizedTitleEqualFold applies the EqualFold predicate on the "normalized_title" field.
func NormalizedTitleEqualFold(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEqualFold(FieldNormalizedTitle, v))
}

// NormalizedTitleContainsFold applies the ContainsFold predicate on the "normalized_title" field.
func NormalizedTitleContainsFold(v string) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldContainsFold(FieldNormalizedTitle, v))
}

// ChangedAtEQ applies the EQ predicate on the "changed_at" field.
func ChangedAtEQ(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldEQ(FieldChangedAt, v))
}

// ChangedAtNEQ applies the NEQ predicate on the "changed_at" field.
func ChangedAtNEQ(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNEQ(FieldChangedAt, v))
}

// ChangedAtIn applies the In predicate on the "changed_at" field.
func ChangedAtIn(vs ...time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldIn(FieldChangedAt, vs...))
}

// ChangedAtNotIn applies the NotIn predicate on the "changed_at" field.
func ChangedAtNotIn(vs ...time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldNotIn(FieldChangedAt, vs...))
}

// ChangedAtGT applies the GT predicate on the "changed_at" field.
func ChangedAtGT(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGT(FieldChangedAt, v))
}

// ChangedAtGTE applies the GTE predicate on the "changed_at" field.
func ChangedAtGTE(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldGTE(FieldChangedAt, v))
}

// ChangedAtLT applies the LT predicate on the "changed_at" field.
func ChangedAtLT(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLT(FieldChangedAt, v))
}

// ChangedAtLTE applies the LTE predicate on the "changed_at" field.
func ChangedAtLTE(v time.Time) predicate.Video_title_change {
	return predicate.Video_title_change(sql.FieldLTE(FieldChangedAt, v))
}

// HasVideo applies the HasEdge predicate on the "video" edge.
func HasVideo() predicate.Video_title_change {
	return predicate.Video_title_change(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoWith applies the HasEdge predicate on the "video" edge with a given conditions (other predicates).
func HasVideoWith(preds ...predicate.Video) predicate.Video_title_change {
	return predicate.Video_title_change(func(s *sql.Selector) {
		step := newVideoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Video_title_change) predicate.Video_title_change {
	return predicate.Video_title_change(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Video_title_change) predicate.Video_title_change {
	return predicate.Video_title_change(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Video_title_change) predicate.Video_title_change {
	return predicate.Video_title_change(sql.NotPredicates(p))
}
