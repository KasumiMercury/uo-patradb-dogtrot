// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/channel"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/description"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/patchat"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videodisallowrange"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videoplayrange"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotitlechange"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// Where appends a list predicates to the VideoUpdate builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVideoID sets the "video_id" field.
func (vu *VideoUpdate) SetVideoID(s string) *VideoUpdate {
	vu.mutation.SetVideoID(s)
	return vu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableVideoID(s *string) *VideoUpdate {
	if s != nil {
		vu.SetVideoID(*s)
	}
	return vu
}

// SetTitle sets the "title" field.
func (vu *VideoUpdate) SetTitle(s string) *VideoUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableTitle(s *string) *VideoUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vu *VideoUpdate) SetNormalizedTitle(s string) *VideoUpdate {
	vu.mutation.SetNormalizedTitle(s)
	return vu
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableNormalizedTitle(s *string) *VideoUpdate {
	if s != nil {
		vu.SetNormalizedTitle(*s)
	}
	return vu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (vu *VideoUpdate) SetDurationSeconds(i int) *VideoUpdate {
	vu.mutation.ResetDurationSeconds()
	vu.mutation.SetDurationSeconds(i)
	return vu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDurationSeconds(i *int) *VideoUpdate {
	if i != nil {
		vu.SetDurationSeconds(*i)
	}
	return vu
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (vu *VideoUpdate) AddDurationSeconds(i int) *VideoUpdate {
	vu.mutation.AddDurationSeconds(i)
	return vu
}

// SetIsCollaboration sets the "is_collaboration" field.
func (vu *VideoUpdate) SetIsCollaboration(b bool) *VideoUpdate {
	vu.mutation.SetIsCollaboration(b)
	return vu
}

// SetNillableIsCollaboration sets the "is_collaboration" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableIsCollaboration(b *bool) *VideoUpdate {
	if b != nil {
		vu.SetIsCollaboration(*b)
	}
	return vu
}

// SetStatus sets the "status" field.
func (vu *VideoUpdate) SetStatus(s string) *VideoUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableStatus(s *string) *VideoUpdate {
	if s != nil {
		vu.SetStatus(*s)
	}
	return vu
}

// SetChatID sets the "chat_id" field.
func (vu *VideoUpdate) SetChatID(s string) *VideoUpdate {
	vu.mutation.SetChatID(s)
	return vu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableChatID(s *string) *VideoUpdate {
	if s != nil {
		vu.SetChatID(*s)
	}
	return vu
}

// ClearChatID clears the value of the "chat_id" field.
func (vu *VideoUpdate) ClearChatID() *VideoUpdate {
	vu.mutation.ClearChatID()
	return vu
}

// SetHasTimeRange sets the "has_time_range" field.
func (vu *VideoUpdate) SetHasTimeRange(b bool) *VideoUpdate {
	vu.mutation.SetHasTimeRange(b)
	return vu
}

// SetNillableHasTimeRange sets the "has_time_range" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableHasTimeRange(b *bool) *VideoUpdate {
	if b != nil {
		vu.SetHasTimeRange(*b)
	}
	return vu
}

// SetScheduledAt sets the "scheduled_at" field.
func (vu *VideoUpdate) SetScheduledAt(t time.Time) *VideoUpdate {
	vu.mutation.SetScheduledAt(t)
	return vu
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableScheduledAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetScheduledAt(*t)
	}
	return vu
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (vu *VideoUpdate) ClearScheduledAt() *VideoUpdate {
	vu.mutation.ClearScheduledAt()
	return vu
}

// SetActualStartAt sets the "actual_start_at" field.
func (vu *VideoUpdate) SetActualStartAt(t time.Time) *VideoUpdate {
	vu.mutation.SetActualStartAt(t)
	return vu
}

// SetNillableActualStartAt sets the "actual_start_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableActualStartAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetActualStartAt(*t)
	}
	return vu
}

// ClearActualStartAt clears the value of the "actual_start_at" field.
func (vu *VideoUpdate) ClearActualStartAt() *VideoUpdate {
	vu.mutation.ClearActualStartAt()
	return vu
}

// SetActualEndAt sets the "actual_end_at" field.
func (vu *VideoUpdate) SetActualEndAt(t time.Time) *VideoUpdate {
	vu.mutation.SetActualEndAt(t)
	return vu
}

// SetNillableActualEndAt sets the "actual_end_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableActualEndAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetActualEndAt(*t)
	}
	return vu
}

// ClearActualEndAt clears the value of the "actual_end_at" field.
func (vu *VideoUpdate) ClearActualEndAt() *VideoUpdate {
	vu.mutation.ClearActualEndAt()
	return vu
}

// SetPublishedAt sets the "published_at" field.
func (vu *VideoUpdate) SetPublishedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetPublishedAt(t)
	return vu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillablePublishedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetPublishedAt(*t)
	}
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VideoUpdate) SetCreatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCreatedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VideoUpdate) SetUpdatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDescriptionsID sets the "descriptions" edge to the Description entity by ID.
func (vu *VideoUpdate) SetDescriptionsID(id string) *VideoUpdate {
	vu.mutation.SetDescriptionsID(id)
	return vu
}

// SetNillableDescriptionsID sets the "descriptions" edge to the Description entity by ID if the given value is not nil.
func (vu *VideoUpdate) SetNillableDescriptionsID(id *string) *VideoUpdate {
	if id != nil {
		vu = vu.SetDescriptionsID(*id)
	}
	return vu
}

// SetDescriptions sets the "descriptions" edge to the Description entity.
func (vu *VideoUpdate) SetDescriptions(d *Description) *VideoUpdate {
	return vu.SetDescriptionsID(d.ID)
}

// AddChannelIDs adds the "channel" edge to the Channel entity by IDs.
func (vu *VideoUpdate) AddChannelIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddChannelIDs(ids...)
	return vu
}

// AddChannel adds the "channel" edges to the Channel entity.
func (vu *VideoUpdate) AddChannel(c ...*Channel) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddChannelIDs(ids...)
}

// AddVideoPlayRangeIDs adds the "video_play_ranges" edge to the VideoPlayRange entity by IDs.
func (vu *VideoUpdate) AddVideoPlayRangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddVideoPlayRangeIDs(ids...)
	return vu
}

// AddVideoPlayRanges adds the "video_play_ranges" edges to the VideoPlayRange entity.
func (vu *VideoUpdate) AddVideoPlayRanges(v ...*VideoPlayRange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVideoPlayRangeIDs(ids...)
}

// AddVideoDisallowRangeIDs adds the "video_disallow_ranges" edge to the VideoDisallowRange entity by IDs.
func (vu *VideoUpdate) AddVideoDisallowRangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddVideoDisallowRangeIDs(ids...)
	return vu
}

// AddVideoDisallowRanges adds the "video_disallow_ranges" edges to the VideoDisallowRange entity.
func (vu *VideoUpdate) AddVideoDisallowRanges(v ...*VideoDisallowRange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVideoDisallowRangeIDs(ids...)
}

// AddVideoTitleChangeIDs adds the "video_title_changes" edge to the VideoTitleChange entity by IDs.
func (vu *VideoUpdate) AddVideoTitleChangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddVideoTitleChangeIDs(ids...)
	return vu
}

// AddVideoTitleChanges adds the "video_title_changes" edges to the VideoTitleChange entity.
func (vu *VideoUpdate) AddVideoTitleChanges(v ...*VideoTitleChange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddVideoTitleChangeIDs(ids...)
}

// AddPatChatIDs adds the "Pat_chats" edge to the PatChat entity by IDs.
func (vu *VideoUpdate) AddPatChatIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddPatChatIDs(ids...)
	return vu
}

// AddPatChats adds the "Pat_chats" edges to the PatChat entity.
func (vu *VideoUpdate) AddPatChats(p ...*PatChat) *VideoUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.AddPatChatIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearDescriptions clears the "descriptions" edge to the Description entity.
func (vu *VideoUpdate) ClearDescriptions() *VideoUpdate {
	vu.mutation.ClearDescriptions()
	return vu
}

// ClearChannel clears all "channel" edges to the Channel entity.
func (vu *VideoUpdate) ClearChannel() *VideoUpdate {
	vu.mutation.ClearChannel()
	return vu
}

// RemoveChannelIDs removes the "channel" edge to Channel entities by IDs.
func (vu *VideoUpdate) RemoveChannelIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveChannelIDs(ids...)
	return vu
}

// RemoveChannel removes "channel" edges to Channel entities.
func (vu *VideoUpdate) RemoveChannel(c ...*Channel) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveChannelIDs(ids...)
}

// ClearVideoPlayRanges clears all "video_play_ranges" edges to the VideoPlayRange entity.
func (vu *VideoUpdate) ClearVideoPlayRanges() *VideoUpdate {
	vu.mutation.ClearVideoPlayRanges()
	return vu
}

// RemoveVideoPlayRangeIDs removes the "video_play_ranges" edge to VideoPlayRange entities by IDs.
func (vu *VideoUpdate) RemoveVideoPlayRangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveVideoPlayRangeIDs(ids...)
	return vu
}

// RemoveVideoPlayRanges removes "video_play_ranges" edges to VideoPlayRange entities.
func (vu *VideoUpdate) RemoveVideoPlayRanges(v ...*VideoPlayRange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVideoPlayRangeIDs(ids...)
}

// ClearVideoDisallowRanges clears all "video_disallow_ranges" edges to the VideoDisallowRange entity.
func (vu *VideoUpdate) ClearVideoDisallowRanges() *VideoUpdate {
	vu.mutation.ClearVideoDisallowRanges()
	return vu
}

// RemoveVideoDisallowRangeIDs removes the "video_disallow_ranges" edge to VideoDisallowRange entities by IDs.
func (vu *VideoUpdate) RemoveVideoDisallowRangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveVideoDisallowRangeIDs(ids...)
	return vu
}

// RemoveVideoDisallowRanges removes "video_disallow_ranges" edges to VideoDisallowRange entities.
func (vu *VideoUpdate) RemoveVideoDisallowRanges(v ...*VideoDisallowRange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVideoDisallowRangeIDs(ids...)
}

// ClearVideoTitleChanges clears all "video_title_changes" edges to the VideoTitleChange entity.
func (vu *VideoUpdate) ClearVideoTitleChanges() *VideoUpdate {
	vu.mutation.ClearVideoTitleChanges()
	return vu
}

// RemoveVideoTitleChangeIDs removes the "video_title_changes" edge to VideoTitleChange entities by IDs.
func (vu *VideoUpdate) RemoveVideoTitleChangeIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveVideoTitleChangeIDs(ids...)
	return vu
}

// RemoveVideoTitleChanges removes "video_title_changes" edges to VideoTitleChange entities.
func (vu *VideoUpdate) RemoveVideoTitleChanges(v ...*VideoTitleChange) *VideoUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveVideoTitleChangeIDs(ids...)
}

// ClearPatChats clears all "Pat_chats" edges to the PatChat entity.
func (vu *VideoUpdate) ClearPatChats() *VideoUpdate {
	vu.mutation.ClearPatChats()
	return vu
}

// RemovePatChatIDs removes the "Pat_chats" edge to PatChat entities by IDs.
func (vu *VideoUpdate) RemovePatChatIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemovePatChatIDs(ids...)
	return vu
}

// RemovePatChats removes "Pat_chats" edges to PatChat entities.
func (vu *VideoUpdate) RemovePatChats(p ...*PatChat) *VideoUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vu.RemovePatChatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VideoUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := video.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VideoUpdate) check() error {
	if v, ok := vu.mutation.VideoID(); ok {
		if err := video.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Video.video_id": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Video.title": %w`, err)}
		}
	}
	if v, ok := vu.mutation.DurationSeconds(); ok {
		if err := video.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf(`ent: validator failed for field "Video.duration_seconds": %w`, err)}
		}
	}
	return nil
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VideoID(); ok {
		_spec.SetField(video.FieldVideoID, field.TypeString, value)
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.NormalizedTitle(); ok {
		_spec.SetField(video.FieldNormalizedTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.DurationSeconds(); ok {
		_spec.SetField(video.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(video.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := vu.mutation.IsCollaboration(); ok {
		_spec.SetField(video.FieldIsCollaboration, field.TypeBool, value)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(video.FieldStatus, field.TypeString, value)
	}
	if value, ok := vu.mutation.ChatID(); ok {
		_spec.SetField(video.FieldChatID, field.TypeString, value)
	}
	if vu.mutation.ChatIDCleared() {
		_spec.ClearField(video.FieldChatID, field.TypeString)
	}
	if value, ok := vu.mutation.HasTimeRange(); ok {
		_spec.SetField(video.FieldHasTimeRange, field.TypeBool, value)
	}
	if value, ok := vu.mutation.ScheduledAt(); ok {
		_spec.SetField(video.FieldScheduledAt, field.TypeTime, value)
	}
	if vu.mutation.ScheduledAtCleared() {
		_spec.ClearField(video.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := vu.mutation.ActualStartAt(); ok {
		_spec.SetField(video.FieldActualStartAt, field.TypeTime, value)
	}
	if vu.mutation.ActualStartAtCleared() {
		_spec.ClearField(video.FieldActualStartAt, field.TypeTime)
	}
	if value, ok := vu.mutation.ActualEndAt(); ok {
		_spec.SetField(video.FieldActualEndAt, field.TypeTime, value)
	}
	if vu.mutation.ActualEndAtCleared() {
		_spec.ClearField(video.FieldActualEndAt, field.TypeTime)
	}
	if value, ok := vu.mutation.PublishedAt(); ok {
		_spec.SetField(video.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   video.DescriptionsTable,
			Columns: []string{video.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   video.DescriptionsTable,
			Columns: []string{video.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedChannelIDs(); len(nodes) > 0 && !vu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VideoPlayRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVideoPlayRangesIDs(); len(nodes) > 0 && !vu.mutation.VideoPlayRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VideoPlayRangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VideoDisallowRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVideoDisallowRangesIDs(); len(nodes) > 0 && !vu.mutation.VideoDisallowRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VideoDisallowRangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.VideoTitleChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVideoTitleChangesIDs(); len(nodes) > 0 && !vu.mutation.VideoTitleChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VideoTitleChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PatChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedPatChatsIDs(); len(nodes) > 0 && !vu.mutation.PatChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PatChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMutation
}

// SetVideoID sets the "video_id" field.
func (vuo *VideoUpdateOne) SetVideoID(s string) *VideoUpdateOne {
	vuo.mutation.SetVideoID(s)
	return vuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableVideoID(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetVideoID(*s)
	}
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VideoUpdateOne) SetTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableTitle(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vuo *VideoUpdateOne) SetNormalizedTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetNormalizedTitle(s)
	return vuo
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableNormalizedTitle(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetNormalizedTitle(*s)
	}
	return vuo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (vuo *VideoUpdateOne) SetDurationSeconds(i int) *VideoUpdateOne {
	vuo.mutation.ResetDurationSeconds()
	vuo.mutation.SetDurationSeconds(i)
	return vuo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDurationSeconds(i *int) *VideoUpdateOne {
	if i != nil {
		vuo.SetDurationSeconds(*i)
	}
	return vuo
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (vuo *VideoUpdateOne) AddDurationSeconds(i int) *VideoUpdateOne {
	vuo.mutation.AddDurationSeconds(i)
	return vuo
}

// SetIsCollaboration sets the "is_collaboration" field.
func (vuo *VideoUpdateOne) SetIsCollaboration(b bool) *VideoUpdateOne {
	vuo.mutation.SetIsCollaboration(b)
	return vuo
}

// SetNillableIsCollaboration sets the "is_collaboration" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableIsCollaboration(b *bool) *VideoUpdateOne {
	if b != nil {
		vuo.SetIsCollaboration(*b)
	}
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VideoUpdateOne) SetStatus(s string) *VideoUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableStatus(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetStatus(*s)
	}
	return vuo
}

// SetChatID sets the "chat_id" field.
func (vuo *VideoUpdateOne) SetChatID(s string) *VideoUpdateOne {
	vuo.mutation.SetChatID(s)
	return vuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableChatID(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetChatID(*s)
	}
	return vuo
}

// ClearChatID clears the value of the "chat_id" field.
func (vuo *VideoUpdateOne) ClearChatID() *VideoUpdateOne {
	vuo.mutation.ClearChatID()
	return vuo
}

// SetHasTimeRange sets the "has_time_range" field.
func (vuo *VideoUpdateOne) SetHasTimeRange(b bool) *VideoUpdateOne {
	vuo.mutation.SetHasTimeRange(b)
	return vuo
}

// SetNillableHasTimeRange sets the "has_time_range" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableHasTimeRange(b *bool) *VideoUpdateOne {
	if b != nil {
		vuo.SetHasTimeRange(*b)
	}
	return vuo
}

// SetScheduledAt sets the "scheduled_at" field.
func (vuo *VideoUpdateOne) SetScheduledAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetScheduledAt(t)
	return vuo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableScheduledAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetScheduledAt(*t)
	}
	return vuo
}

// ClearScheduledAt clears the value of the "scheduled_at" field.
func (vuo *VideoUpdateOne) ClearScheduledAt() *VideoUpdateOne {
	vuo.mutation.ClearScheduledAt()
	return vuo
}

// SetActualStartAt sets the "actual_start_at" field.
func (vuo *VideoUpdateOne) SetActualStartAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetActualStartAt(t)
	return vuo
}

// SetNillableActualStartAt sets the "actual_start_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableActualStartAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetActualStartAt(*t)
	}
	return vuo
}

// ClearActualStartAt clears the value of the "actual_start_at" field.
func (vuo *VideoUpdateOne) ClearActualStartAt() *VideoUpdateOne {
	vuo.mutation.ClearActualStartAt()
	return vuo
}

// SetActualEndAt sets the "actual_end_at" field.
func (vuo *VideoUpdateOne) SetActualEndAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetActualEndAt(t)
	return vuo
}

// SetNillableActualEndAt sets the "actual_end_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableActualEndAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetActualEndAt(*t)
	}
	return vuo
}

// ClearActualEndAt clears the value of the "actual_end_at" field.
func (vuo *VideoUpdateOne) ClearActualEndAt() *VideoUpdateOne {
	vuo.mutation.ClearActualEndAt()
	return vuo
}

// SetPublishedAt sets the "published_at" field.
func (vuo *VideoUpdateOne) SetPublishedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetPublishedAt(t)
	return vuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillablePublishedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetPublishedAt(*t)
	}
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VideoUpdateOne) SetCreatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VideoUpdateOne) SetUpdatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDescriptionsID sets the "descriptions" edge to the Description entity by ID.
func (vuo *VideoUpdateOne) SetDescriptionsID(id string) *VideoUpdateOne {
	vuo.mutation.SetDescriptionsID(id)
	return vuo
}

// SetNillableDescriptionsID sets the "descriptions" edge to the Description entity by ID if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDescriptionsID(id *string) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetDescriptionsID(*id)
	}
	return vuo
}

// SetDescriptions sets the "descriptions" edge to the Description entity.
func (vuo *VideoUpdateOne) SetDescriptions(d *Description) *VideoUpdateOne {
	return vuo.SetDescriptionsID(d.ID)
}

// AddChannelIDs adds the "channel" edge to the Channel entity by IDs.
func (vuo *VideoUpdateOne) AddChannelIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddChannelIDs(ids...)
	return vuo
}

// AddChannel adds the "channel" edges to the Channel entity.
func (vuo *VideoUpdateOne) AddChannel(c ...*Channel) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddChannelIDs(ids...)
}

// AddVideoPlayRangeIDs adds the "video_play_ranges" edge to the VideoPlayRange entity by IDs.
func (vuo *VideoUpdateOne) AddVideoPlayRangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddVideoPlayRangeIDs(ids...)
	return vuo
}

// AddVideoPlayRanges adds the "video_play_ranges" edges to the VideoPlayRange entity.
func (vuo *VideoUpdateOne) AddVideoPlayRanges(v ...*VideoPlayRange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVideoPlayRangeIDs(ids...)
}

// AddVideoDisallowRangeIDs adds the "video_disallow_ranges" edge to the VideoDisallowRange entity by IDs.
func (vuo *VideoUpdateOne) AddVideoDisallowRangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddVideoDisallowRangeIDs(ids...)
	return vuo
}

// AddVideoDisallowRanges adds the "video_disallow_ranges" edges to the VideoDisallowRange entity.
func (vuo *VideoUpdateOne) AddVideoDisallowRanges(v ...*VideoDisallowRange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVideoDisallowRangeIDs(ids...)
}

// AddVideoTitleChangeIDs adds the "video_title_changes" edge to the VideoTitleChange entity by IDs.
func (vuo *VideoUpdateOne) AddVideoTitleChangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddVideoTitleChangeIDs(ids...)
	return vuo
}

// AddVideoTitleChanges adds the "video_title_changes" edges to the VideoTitleChange entity.
func (vuo *VideoUpdateOne) AddVideoTitleChanges(v ...*VideoTitleChange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddVideoTitleChangeIDs(ids...)
}

// AddPatChatIDs adds the "Pat_chats" edge to the PatChat entity by IDs.
func (vuo *VideoUpdateOne) AddPatChatIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddPatChatIDs(ids...)
	return vuo
}

// AddPatChats adds the "Pat_chats" edges to the PatChat entity.
func (vuo *VideoUpdateOne) AddPatChats(p ...*PatChat) *VideoUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.AddPatChatIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearDescriptions clears the "descriptions" edge to the Description entity.
func (vuo *VideoUpdateOne) ClearDescriptions() *VideoUpdateOne {
	vuo.mutation.ClearDescriptions()
	return vuo
}

// ClearChannel clears all "channel" edges to the Channel entity.
func (vuo *VideoUpdateOne) ClearChannel() *VideoUpdateOne {
	vuo.mutation.ClearChannel()
	return vuo
}

// RemoveChannelIDs removes the "channel" edge to Channel entities by IDs.
func (vuo *VideoUpdateOne) RemoveChannelIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveChannelIDs(ids...)
	return vuo
}

// RemoveChannel removes "channel" edges to Channel entities.
func (vuo *VideoUpdateOne) RemoveChannel(c ...*Channel) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveChannelIDs(ids...)
}

// ClearVideoPlayRanges clears all "video_play_ranges" edges to the VideoPlayRange entity.
func (vuo *VideoUpdateOne) ClearVideoPlayRanges() *VideoUpdateOne {
	vuo.mutation.ClearVideoPlayRanges()
	return vuo
}

// RemoveVideoPlayRangeIDs removes the "video_play_ranges" edge to VideoPlayRange entities by IDs.
func (vuo *VideoUpdateOne) RemoveVideoPlayRangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveVideoPlayRangeIDs(ids...)
	return vuo
}

// RemoveVideoPlayRanges removes "video_play_ranges" edges to VideoPlayRange entities.
func (vuo *VideoUpdateOne) RemoveVideoPlayRanges(v ...*VideoPlayRange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVideoPlayRangeIDs(ids...)
}

// ClearVideoDisallowRanges clears all "video_disallow_ranges" edges to the VideoDisallowRange entity.
func (vuo *VideoUpdateOne) ClearVideoDisallowRanges() *VideoUpdateOne {
	vuo.mutation.ClearVideoDisallowRanges()
	return vuo
}

// RemoveVideoDisallowRangeIDs removes the "video_disallow_ranges" edge to VideoDisallowRange entities by IDs.
func (vuo *VideoUpdateOne) RemoveVideoDisallowRangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveVideoDisallowRangeIDs(ids...)
	return vuo
}

// RemoveVideoDisallowRanges removes "video_disallow_ranges" edges to VideoDisallowRange entities.
func (vuo *VideoUpdateOne) RemoveVideoDisallowRanges(v ...*VideoDisallowRange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVideoDisallowRangeIDs(ids...)
}

// ClearVideoTitleChanges clears all "video_title_changes" edges to the VideoTitleChange entity.
func (vuo *VideoUpdateOne) ClearVideoTitleChanges() *VideoUpdateOne {
	vuo.mutation.ClearVideoTitleChanges()
	return vuo
}

// RemoveVideoTitleChangeIDs removes the "video_title_changes" edge to VideoTitleChange entities by IDs.
func (vuo *VideoUpdateOne) RemoveVideoTitleChangeIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveVideoTitleChangeIDs(ids...)
	return vuo
}

// RemoveVideoTitleChanges removes "video_title_changes" edges to VideoTitleChange entities.
func (vuo *VideoUpdateOne) RemoveVideoTitleChanges(v ...*VideoTitleChange) *VideoUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveVideoTitleChangeIDs(ids...)
}

// ClearPatChats clears all "Pat_chats" edges to the PatChat entity.
func (vuo *VideoUpdateOne) ClearPatChats() *VideoUpdateOne {
	vuo.mutation.ClearPatChats()
	return vuo
}

// RemovePatChatIDs removes the "Pat_chats" edge to PatChat entities by IDs.
func (vuo *VideoUpdateOne) RemovePatChatIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemovePatChatIDs(ids...)
	return vuo
}

// RemovePatChats removes "Pat_chats" edges to PatChat entities.
func (vuo *VideoUpdateOne) RemovePatChats(p ...*PatChat) *VideoUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vuo.RemovePatChatIDs(ids...)
}

// Where appends a list predicates to the VideoUpdate builder.
func (vuo *VideoUpdateOne) Where(ps ...predicate.Video) *VideoUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideoUpdateOne) Select(field string, fields ...string) *VideoUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Video entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VideoUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := video.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VideoUpdateOne) check() error {
	if v, ok := vuo.mutation.VideoID(); ok {
		if err := video.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Video.video_id": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Video.title": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.DurationSeconds(); ok {
		if err := video.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf(`ent: validator failed for field "Video.duration_seconds": %w`, err)}
		}
	}
	return nil
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (_node *Video, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Video.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video.FieldID)
		for _, f := range fields {
			if !video.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != video.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VideoID(); ok {
		_spec.SetField(video.FieldVideoID, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.NormalizedTitle(); ok {
		_spec.SetField(video.FieldNormalizedTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.DurationSeconds(); ok {
		_spec.SetField(video.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(video.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.IsCollaboration(); ok {
		_spec.SetField(video.FieldIsCollaboration, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(video.FieldStatus, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ChatID(); ok {
		_spec.SetField(video.FieldChatID, field.TypeString, value)
	}
	if vuo.mutation.ChatIDCleared() {
		_spec.ClearField(video.FieldChatID, field.TypeString)
	}
	if value, ok := vuo.mutation.HasTimeRange(); ok {
		_spec.SetField(video.FieldHasTimeRange, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.ScheduledAt(); ok {
		_spec.SetField(video.FieldScheduledAt, field.TypeTime, value)
	}
	if vuo.mutation.ScheduledAtCleared() {
		_spec.ClearField(video.FieldScheduledAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.ActualStartAt(); ok {
		_spec.SetField(video.FieldActualStartAt, field.TypeTime, value)
	}
	if vuo.mutation.ActualStartAtCleared() {
		_spec.ClearField(video.FieldActualStartAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.ActualEndAt(); ok {
		_spec.SetField(video.FieldActualEndAt, field.TypeTime, value)
	}
	if vuo.mutation.ActualEndAtCleared() {
		_spec.ClearField(video.FieldActualEndAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.PublishedAt(); ok {
		_spec.SetField(video.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   video.DescriptionsTable,
			Columns: []string{video.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   video.DescriptionsTable,
			Columns: []string{video.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedChannelIDs(); len(nodes) > 0 && !vuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   video.ChannelTable,
			Columns: video.ChannelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VideoPlayRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVideoPlayRangesIDs(); len(nodes) > 0 && !vuo.mutation.VideoPlayRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VideoPlayRangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoPlayRangesTable,
			Columns: []string{video.VideoPlayRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VideoDisallowRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVideoDisallowRangesIDs(); len(nodes) > 0 && !vuo.mutation.VideoDisallowRangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VideoDisallowRangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoDisallowRangesTable,
			Columns: []string{video.VideoDisallowRangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.VideoTitleChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVideoTitleChangesIDs(); len(nodes) > 0 && !vuo.mutation.VideoTitleChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VideoTitleChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.VideoTitleChangesTable,
			Columns: []string{video.VideoTitleChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PatChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedPatChatsIDs(); len(nodes) > 0 && !vuo.mutation.PatChatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PatChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.PatChatsTable,
			Columns: []string{video.PatChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patchat.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
