// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videodisallowrange"
)

// VideoDisallowRangeDelete is the builder for deleting a VideoDisallowRange entity.
type VideoDisallowRangeDelete struct {
	config
	hooks    []Hook
	mutation *VideoDisallowRangeMutation
}

// Where appends a list predicates to the VideoDisallowRangeDelete builder.
func (vdrd *VideoDisallowRangeDelete) Where(ps ...predicate.VideoDisallowRange) *VideoDisallowRangeDelete {
	vdrd.mutation.Where(ps...)
	return vdrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vdrd *VideoDisallowRangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vdrd.sqlExec, vdrd.mutation, vdrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vdrd *VideoDisallowRangeDelete) ExecX(ctx context.Context) int {
	n, err := vdrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vdrd *VideoDisallowRangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(videodisallowrange.Table, sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString))
	if ps := vdrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vdrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vdrd.mutation.done = true
	return affected, err
}

// VideoDisallowRangeDeleteOne is the builder for deleting a single VideoDisallowRange entity.
type VideoDisallowRangeDeleteOne struct {
	vdrd *VideoDisallowRangeDelete
}

// Where appends a list predicates to the VideoDisallowRangeDelete builder.
func (vdrdo *VideoDisallowRangeDeleteOne) Where(ps ...predicate.VideoDisallowRange) *VideoDisallowRangeDeleteOne {
	vdrdo.vdrd.mutation.Where(ps...)
	return vdrdo
}

// Exec executes the deletion query.
func (vdrdo *VideoDisallowRangeDeleteOne) Exec(ctx context.Context) error {
	n, err := vdrdo.vdrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{videodisallowrange.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vdrdo *VideoDisallowRangeDeleteOne) ExecX(ctx context.Context) {
	if err := vdrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
