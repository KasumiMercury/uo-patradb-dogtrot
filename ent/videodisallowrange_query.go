// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videodisallowrange"
)

// VideoDisallowRangeQuery is the builder for querying VideoDisallowRange entities.
type VideoDisallowRangeQuery struct {
	config
	ctx        *QueryContext
	order      []videodisallowrange.OrderOption
	inters     []Interceptor
	predicates []predicate.VideoDisallowRange
	withVideo  *VideoQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VideoDisallowRangeQuery builder.
func (vdrq *VideoDisallowRangeQuery) Where(ps ...predicate.VideoDisallowRange) *VideoDisallowRangeQuery {
	vdrq.predicates = append(vdrq.predicates, ps...)
	return vdrq
}

// Limit the number of records to be returned by this query.
func (vdrq *VideoDisallowRangeQuery) Limit(limit int) *VideoDisallowRangeQuery {
	vdrq.ctx.Limit = &limit
	return vdrq
}

// Offset to start from.
func (vdrq *VideoDisallowRangeQuery) Offset(offset int) *VideoDisallowRangeQuery {
	vdrq.ctx.Offset = &offset
	return vdrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vdrq *VideoDisallowRangeQuery) Unique(unique bool) *VideoDisallowRangeQuery {
	vdrq.ctx.Unique = &unique
	return vdrq
}

// Order specifies how the records should be ordered.
func (vdrq *VideoDisallowRangeQuery) Order(o ...videodisallowrange.OrderOption) *VideoDisallowRangeQuery {
	vdrq.order = append(vdrq.order, o...)
	return vdrq
}

// QueryVideo chains the current query on the "video" edge.
func (vdrq *VideoDisallowRangeQuery) QueryVideo() *VideoQuery {
	query := (&VideoClient{config: vdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videodisallowrange.Table, videodisallowrange.FieldID, selector),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videodisallowrange.VideoTable, videodisallowrange.VideoColumn),
		)
		fromU = sqlgraph.SetNeighbors(vdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VideoDisallowRange entity from the query.
// Returns a *NotFoundError when no VideoDisallowRange was found.
func (vdrq *VideoDisallowRangeQuery) First(ctx context.Context) (*VideoDisallowRange, error) {
	nodes, err := vdrq.Limit(1).All(setContextOp(ctx, vdrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{videodisallowrange.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) FirstX(ctx context.Context) *VideoDisallowRange {
	node, err := vdrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VideoDisallowRange ID from the query.
// Returns a *NotFoundError when no VideoDisallowRange ID was found.
func (vdrq *VideoDisallowRangeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vdrq.Limit(1).IDs(setContextOp(ctx, vdrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{videodisallowrange.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) FirstIDX(ctx context.Context) string {
	id, err := vdrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VideoDisallowRange entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VideoDisallowRange entity is found.
// Returns a *NotFoundError when no VideoDisallowRange entities are found.
func (vdrq *VideoDisallowRangeQuery) Only(ctx context.Context) (*VideoDisallowRange, error) {
	nodes, err := vdrq.Limit(2).All(setContextOp(ctx, vdrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{videodisallowrange.Label}
	default:
		return nil, &NotSingularError{videodisallowrange.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) OnlyX(ctx context.Context) *VideoDisallowRange {
	node, err := vdrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VideoDisallowRange ID in the query.
// Returns a *NotSingularError when more than one VideoDisallowRange ID is found.
// Returns a *NotFoundError when no entities are found.
func (vdrq *VideoDisallowRangeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vdrq.Limit(2).IDs(setContextOp(ctx, vdrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{videodisallowrange.Label}
	default:
		err = &NotSingularError{videodisallowrange.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) OnlyIDX(ctx context.Context) string {
	id, err := vdrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VideoDisallowRanges.
func (vdrq *VideoDisallowRangeQuery) All(ctx context.Context) ([]*VideoDisallowRange, error) {
	ctx = setContextOp(ctx, vdrq.ctx, "All")
	if err := vdrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VideoDisallowRange, *VideoDisallowRangeQuery]()
	return withInterceptors[[]*VideoDisallowRange](ctx, vdrq, qr, vdrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) AllX(ctx context.Context) []*VideoDisallowRange {
	nodes, err := vdrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VideoDisallowRange IDs.
func (vdrq *VideoDisallowRangeQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vdrq.ctx.Unique == nil && vdrq.path != nil {
		vdrq.Unique(true)
	}
	ctx = setContextOp(ctx, vdrq.ctx, "IDs")
	if err = vdrq.Select(videodisallowrange.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) IDsX(ctx context.Context) []string {
	ids, err := vdrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vdrq *VideoDisallowRangeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vdrq.ctx, "Count")
	if err := vdrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vdrq, querierCount[*VideoDisallowRangeQuery](), vdrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) CountX(ctx context.Context) int {
	count, err := vdrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vdrq *VideoDisallowRangeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vdrq.ctx, "Exist")
	switch _, err := vdrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vdrq *VideoDisallowRangeQuery) ExistX(ctx context.Context) bool {
	exist, err := vdrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VideoDisallowRangeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vdrq *VideoDisallowRangeQuery) Clone() *VideoDisallowRangeQuery {
	if vdrq == nil {
		return nil
	}
	return &VideoDisallowRangeQuery{
		config:     vdrq.config,
		ctx:        vdrq.ctx.Clone(),
		order:      append([]videodisallowrange.OrderOption{}, vdrq.order...),
		inters:     append([]Interceptor{}, vdrq.inters...),
		predicates: append([]predicate.VideoDisallowRange{}, vdrq.predicates...),
		withVideo:  vdrq.withVideo.Clone(),
		// clone intermediate query.
		sql:  vdrq.sql.Clone(),
		path: vdrq.path,
	}
}

// WithVideo tells the query-builder to eager-load the nodes that are connected to
// the "video" edge. The optional arguments are used to configure the query builder of the edge.
func (vdrq *VideoDisallowRangeQuery) WithVideo(opts ...func(*VideoQuery)) *VideoDisallowRangeQuery {
	query := (&VideoClient{config: vdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vdrq.withVideo = query
	return vdrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StartSeconds int `json:"start_seconds,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VideoDisallowRange.Query().
//		GroupBy(videodisallowrange.FieldStartSeconds).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vdrq *VideoDisallowRangeQuery) GroupBy(field string, fields ...string) *VideoDisallowRangeGroupBy {
	vdrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VideoDisallowRangeGroupBy{build: vdrq}
	grbuild.flds = &vdrq.ctx.Fields
	grbuild.label = videodisallowrange.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StartSeconds int `json:"start_seconds,omitempty"`
//	}
//
//	client.VideoDisallowRange.Query().
//		Select(videodisallowrange.FieldStartSeconds).
//		Scan(ctx, &v)
func (vdrq *VideoDisallowRangeQuery) Select(fields ...string) *VideoDisallowRangeSelect {
	vdrq.ctx.Fields = append(vdrq.ctx.Fields, fields...)
	sbuild := &VideoDisallowRangeSelect{VideoDisallowRangeQuery: vdrq}
	sbuild.label = videodisallowrange.Label
	sbuild.flds, sbuild.scan = &vdrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VideoDisallowRangeSelect configured with the given aggregations.
func (vdrq *VideoDisallowRangeQuery) Aggregate(fns ...AggregateFunc) *VideoDisallowRangeSelect {
	return vdrq.Select().Aggregate(fns...)
}

func (vdrq *VideoDisallowRangeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vdrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vdrq); err != nil {
				return err
			}
		}
	}
	for _, f := range vdrq.ctx.Fields {
		if !videodisallowrange.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vdrq.path != nil {
		prev, err := vdrq.path(ctx)
		if err != nil {
			return err
		}
		vdrq.sql = prev
	}
	return nil
}

func (vdrq *VideoDisallowRangeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VideoDisallowRange, error) {
	var (
		nodes       = []*VideoDisallowRange{}
		withFKs     = vdrq.withFKs
		_spec       = vdrq.querySpec()
		loadedTypes = [1]bool{
			vdrq.withVideo != nil,
		}
	)
	if vdrq.withVideo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, videodisallowrange.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VideoDisallowRange).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VideoDisallowRange{config: vdrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vdrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vdrq.withVideo; query != nil {
		if err := vdrq.loadVideo(ctx, query, nodes, nil,
			func(n *VideoDisallowRange, e *Video) { n.Edges.Video = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vdrq *VideoDisallowRangeQuery) loadVideo(ctx context.Context, query *VideoQuery, nodes []*VideoDisallowRange, init func(*VideoDisallowRange), assign func(*VideoDisallowRange, *Video)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VideoDisallowRange)
	for i := range nodes {
		if nodes[i].video_id == nil {
			continue
		}
		fk := *nodes[i].video_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(video.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "video_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vdrq *VideoDisallowRangeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vdrq.querySpec()
	_spec.Node.Columns = vdrq.ctx.Fields
	if len(vdrq.ctx.Fields) > 0 {
		_spec.Unique = vdrq.ctx.Unique != nil && *vdrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vdrq.driver, _spec)
}

func (vdrq *VideoDisallowRangeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(videodisallowrange.Table, videodisallowrange.Columns, sqlgraph.NewFieldSpec(videodisallowrange.FieldID, field.TypeString))
	_spec.From = vdrq.sql
	if unique := vdrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vdrq.path != nil {
		_spec.Unique = true
	}
	if fields := vdrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videodisallowrange.FieldID)
		for i := range fields {
			if fields[i] != videodisallowrange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vdrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vdrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vdrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vdrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vdrq *VideoDisallowRangeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vdrq.driver.Dialect())
	t1 := builder.Table(videodisallowrange.Table)
	columns := vdrq.ctx.Fields
	if len(columns) == 0 {
		columns = videodisallowrange.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vdrq.sql != nil {
		selector = vdrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vdrq.ctx.Unique != nil && *vdrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vdrq.predicates {
		p(selector)
	}
	for _, p := range vdrq.order {
		p(selector)
	}
	if offset := vdrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vdrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VideoDisallowRangeGroupBy is the group-by builder for VideoDisallowRange entities.
type VideoDisallowRangeGroupBy struct {
	selector
	build *VideoDisallowRangeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vdrgb *VideoDisallowRangeGroupBy) Aggregate(fns ...AggregateFunc) *VideoDisallowRangeGroupBy {
	vdrgb.fns = append(vdrgb.fns, fns...)
	return vdrgb
}

// Scan applies the selector query and scans the result into the given value.
func (vdrgb *VideoDisallowRangeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vdrgb.build.ctx, "GroupBy")
	if err := vdrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoDisallowRangeQuery, *VideoDisallowRangeGroupBy](ctx, vdrgb.build, vdrgb, vdrgb.build.inters, v)
}

func (vdrgb *VideoDisallowRangeGroupBy) sqlScan(ctx context.Context, root *VideoDisallowRangeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vdrgb.fns))
	for _, fn := range vdrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vdrgb.flds)+len(vdrgb.fns))
		for _, f := range *vdrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vdrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vdrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VideoDisallowRangeSelect is the builder for selecting fields of VideoDisallowRange entities.
type VideoDisallowRangeSelect struct {
	*VideoDisallowRangeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vdrs *VideoDisallowRangeSelect) Aggregate(fns ...AggregateFunc) *VideoDisallowRangeSelect {
	vdrs.fns = append(vdrs.fns, fns...)
	return vdrs
}

// Scan applies the selector query and scans the result into the given value.
func (vdrs *VideoDisallowRangeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vdrs.ctx, "Select")
	if err := vdrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoDisallowRangeQuery, *VideoDisallowRangeSelect](ctx, vdrs.VideoDisallowRangeQuery, vdrs, vdrs.inters, v)
}

func (vdrs *VideoDisallowRangeSelect) sqlScan(ctx context.Context, root *VideoDisallowRangeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vdrs.fns))
	for _, fn := range vdrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vdrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vdrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
