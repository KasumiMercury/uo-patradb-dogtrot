// Code generated by ent, DO NOT EDIT.

package videoplayrange

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldContainsFold(FieldID, id))
}

// StartSeconds applies equality check predicate on the "start_seconds" field. It's identical to StartSecondsEQ.
func StartSeconds(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldStartSeconds, v))
}

// EndSeconds applies equality check predicate on the "end_seconds" field. It's identical to EndSecondsEQ.
func EndSeconds(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldEndSeconds, v))
}

// StartSecondsEQ applies the EQ predicate on the "start_seconds" field.
func StartSecondsEQ(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldStartSeconds, v))
}

// StartSecondsNEQ applies the NEQ predicate on the "start_seconds" field.
func StartSecondsNEQ(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNEQ(FieldStartSeconds, v))
}

// StartSecondsIn applies the In predicate on the "start_seconds" field.
func StartSecondsIn(vs ...int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldIn(FieldStartSeconds, vs...))
}

// StartSecondsNotIn applies the NotIn predicate on the "start_seconds" field.
func StartSecondsNotIn(vs ...int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNotIn(FieldStartSeconds, vs...))
}

// StartSecondsGT applies the GT predicate on the "start_seconds" field.
func StartSecondsGT(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGT(FieldStartSeconds, v))
}

// StartSecondsGTE applies the GTE predicate on the "start_seconds" field.
func StartSecondsGTE(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGTE(FieldStartSeconds, v))
}

// StartSecondsLT applies the LT predicate on the "start_seconds" field.
func StartSecondsLT(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLT(FieldStartSeconds, v))
}

// StartSecondsLTE applies the LTE predicate on the "start_seconds" field.
func StartSecondsLTE(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLTE(FieldStartSeconds, v))
}

// EndSecondsEQ applies the EQ predicate on the "end_seconds" field.
func EndSecondsEQ(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldEQ(FieldEndSeconds, v))
}

// EndSecondsNEQ applies the NEQ predicate on the "end_seconds" field.
func EndSecondsNEQ(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNEQ(FieldEndSeconds, v))
}

// EndSecondsIn applies the In predicate on the "end_seconds" field.
func EndSecondsIn(vs ...int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldIn(FieldEndSeconds, vs...))
}

// EndSecondsNotIn applies the NotIn predicate on the "end_seconds" field.
func EndSecondsNotIn(vs ...int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNotIn(FieldEndSeconds, vs...))
}

// EndSecondsGT applies the GT predicate on the "end_seconds" field.
func EndSecondsGT(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGT(FieldEndSeconds, v))
}

// EndSecondsGTE applies the GTE predicate on the "end_seconds" field.
func EndSecondsGTE(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldGTE(FieldEndSeconds, v))
}

// EndSecondsLT applies the LT predicate on the "end_seconds" field.
func EndSecondsLT(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLT(FieldEndSeconds, v))
}

// EndSecondsLTE applies the LTE predicate on the "end_seconds" field.
func EndSecondsLTE(v int) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldLTE(FieldEndSeconds, v))
}

// EndSecondsIsNil applies the IsNil predicate on the "end_seconds" field.
func EndSecondsIsNil() predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldIsNull(FieldEndSeconds))
}

// EndSecondsNotNil applies the NotNil predicate on the "end_seconds" field.
func EndSecondsNotNil() predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.FieldNotNull(FieldEndSeconds))
}

// HasVideo applies the HasEdge predicate on the "video" edge.
func HasVideo() predicate.VideoPlayRange {
	return predicate.VideoPlayRange(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoWith applies the HasEdge predicate on the "video" edge with a given conditions (other predicates).
func HasVideoWith(preds ...predicate.Video) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(func(s *sql.Selector) {
		step := newVideoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoPlayRange) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoPlayRange) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoPlayRange) predicate.VideoPlayRange {
	return predicate.VideoPlayRange(sql.NotPredicates(p))
}
