// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videoplayrange"
)

// VideoPlayRangeCreate is the builder for creating a VideoPlayRange entity.
type VideoPlayRangeCreate struct {
	config
	mutation *VideoPlayRangeMutation
	hooks    []Hook
}

// SetStartSeconds sets the "start_seconds" field.
func (vprc *VideoPlayRangeCreate) SetStartSeconds(i int) *VideoPlayRangeCreate {
	vprc.mutation.SetStartSeconds(i)
	return vprc
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (vprc *VideoPlayRangeCreate) SetNillableStartSeconds(i *int) *VideoPlayRangeCreate {
	if i != nil {
		vprc.SetStartSeconds(*i)
	}
	return vprc
}

// SetEndSeconds sets the "end_seconds" field.
func (vprc *VideoPlayRangeCreate) SetEndSeconds(i int) *VideoPlayRangeCreate {
	vprc.mutation.SetEndSeconds(i)
	return vprc
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (vprc *VideoPlayRangeCreate) SetNillableEndSeconds(i *int) *VideoPlayRangeCreate {
	if i != nil {
		vprc.SetEndSeconds(*i)
	}
	return vprc
}

// SetID sets the "id" field.
func (vprc *VideoPlayRangeCreate) SetID(s string) *VideoPlayRangeCreate {
	vprc.mutation.SetID(s)
	return vprc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vprc *VideoPlayRangeCreate) SetNillableID(s *string) *VideoPlayRangeCreate {
	if s != nil {
		vprc.SetID(*s)
	}
	return vprc
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (vprc *VideoPlayRangeCreate) SetVideoID(id string) *VideoPlayRangeCreate {
	vprc.mutation.SetVideoID(id)
	return vprc
}

// SetVideo sets the "video" edge to the Video entity.
func (vprc *VideoPlayRangeCreate) SetVideo(v *Video) *VideoPlayRangeCreate {
	return vprc.SetVideoID(v.ID)
}

// Mutation returns the VideoPlayRangeMutation object of the builder.
func (vprc *VideoPlayRangeCreate) Mutation() *VideoPlayRangeMutation {
	return vprc.mutation
}

// Save creates the VideoPlayRange in the database.
func (vprc *VideoPlayRangeCreate) Save(ctx context.Context) (*VideoPlayRange, error) {
	vprc.defaults()
	return withHooks(ctx, vprc.sqlSave, vprc.mutation, vprc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vprc *VideoPlayRangeCreate) SaveX(ctx context.Context) *VideoPlayRange {
	v, err := vprc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vprc *VideoPlayRangeCreate) Exec(ctx context.Context) error {
	_, err := vprc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vprc *VideoPlayRangeCreate) ExecX(ctx context.Context) {
	if err := vprc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vprc *VideoPlayRangeCreate) defaults() {
	if _, ok := vprc.mutation.StartSeconds(); !ok {
		v := videoplayrange.DefaultStartSeconds
		vprc.mutation.SetStartSeconds(v)
	}
	if _, ok := vprc.mutation.ID(); !ok {
		v := videoplayrange.DefaultID()
		vprc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vprc *VideoPlayRangeCreate) check() error {
	if _, ok := vprc.mutation.StartSeconds(); !ok {
		return &ValidationError{Name: "start_seconds", err: errors.New(`ent: missing required field "VideoPlayRange.start_seconds"`)}
	}
	if v, ok := vprc.mutation.StartSeconds(); ok {
		if err := videoplayrange.StartSecondsValidator(v); err != nil {
			return &ValidationError{Name: "start_seconds", err: fmt.Errorf(`ent: validator failed for field "VideoPlayRange.start_seconds": %w`, err)}
		}
	}
	if v, ok := vprc.mutation.EndSeconds(); ok {
		if err := videoplayrange.EndSecondsValidator(v); err != nil {
			return &ValidationError{Name: "end_seconds", err: fmt.Errorf(`ent: validator failed for field "VideoPlayRange.end_seconds": %w`, err)}
		}
	}
	if v, ok := vprc.mutation.ID(); ok {
		if err := videoplayrange.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "VideoPlayRange.id": %w`, err)}
		}
	}
	if _, ok := vprc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video", err: errors.New(`ent: missing required edge "VideoPlayRange.video"`)}
	}
	return nil
}

func (vprc *VideoPlayRangeCreate) sqlSave(ctx context.Context) (*VideoPlayRange, error) {
	if err := vprc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vprc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vprc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VideoPlayRange.ID type: %T", _spec.ID.Value)
		}
	}
	vprc.mutation.id = &_node.ID
	vprc.mutation.done = true
	return _node, nil
}

func (vprc *VideoPlayRangeCreate) createSpec() (*VideoPlayRange, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoPlayRange{config: vprc.config}
		_spec = sqlgraph.NewCreateSpec(videoplayrange.Table, sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString))
	)
	if id, ok := vprc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vprc.mutation.StartSeconds(); ok {
		_spec.SetField(videoplayrange.FieldStartSeconds, field.TypeInt, value)
		_node.StartSeconds = value
	}
	if value, ok := vprc.mutation.EndSeconds(); ok {
		_spec.SetField(videoplayrange.FieldEndSeconds, field.TypeInt, value)
		_node.EndSeconds = value
	}
	if nodes := vprc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoplayrange.VideoTable,
			Columns: []string{videoplayrange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.video_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoPlayRangeCreateBulk is the builder for creating many VideoPlayRange entities in bulk.
type VideoPlayRangeCreateBulk struct {
	config
	err      error
	builders []*VideoPlayRangeCreate
}

// Save creates the VideoPlayRange entities in the database.
func (vprcb *VideoPlayRangeCreateBulk) Save(ctx context.Context) ([]*VideoPlayRange, error) {
	if vprcb.err != nil {
		return nil, vprcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vprcb.builders))
	nodes := make([]*VideoPlayRange, len(vprcb.builders))
	mutators := make([]Mutator, len(vprcb.builders))
	for i := range vprcb.builders {
		func(i int, root context.Context) {
			builder := vprcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoPlayRangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vprcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vprcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vprcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vprcb *VideoPlayRangeCreateBulk) SaveX(ctx context.Context) []*VideoPlayRange {
	v, err := vprcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vprcb *VideoPlayRangeCreateBulk) Exec(ctx context.Context) error {
	_, err := vprcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vprcb *VideoPlayRangeCreateBulk) ExecX(ctx context.Context) {
	if err := vprcb.Exec(ctx); err != nil {
		panic(err)
	}
}
