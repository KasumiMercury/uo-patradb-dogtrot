// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videoplayrange"
)

// VideoPlayRangeUpdate is the builder for updating VideoPlayRange entities.
type VideoPlayRangeUpdate struct {
	config
	hooks    []Hook
	mutation *VideoPlayRangeMutation
}

// Where appends a list predicates to the VideoPlayRangeUpdate builder.
func (vpru *VideoPlayRangeUpdate) Where(ps ...predicate.VideoPlayRange) *VideoPlayRangeUpdate {
	vpru.mutation.Where(ps...)
	return vpru
}

// SetStartSeconds sets the "start_seconds" field.
func (vpru *VideoPlayRangeUpdate) SetStartSeconds(i int) *VideoPlayRangeUpdate {
	vpru.mutation.ResetStartSeconds()
	vpru.mutation.SetStartSeconds(i)
	return vpru
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (vpru *VideoPlayRangeUpdate) SetNillableStartSeconds(i *int) *VideoPlayRangeUpdate {
	if i != nil {
		vpru.SetStartSeconds(*i)
	}
	return vpru
}

// AddStartSeconds adds i to the "start_seconds" field.
func (vpru *VideoPlayRangeUpdate) AddStartSeconds(i int) *VideoPlayRangeUpdate {
	vpru.mutation.AddStartSeconds(i)
	return vpru
}

// SetEndSeconds sets the "end_seconds" field.
func (vpru *VideoPlayRangeUpdate) SetEndSeconds(i int) *VideoPlayRangeUpdate {
	vpru.mutation.ResetEndSeconds()
	vpru.mutation.SetEndSeconds(i)
	return vpru
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (vpru *VideoPlayRangeUpdate) SetNillableEndSeconds(i *int) *VideoPlayRangeUpdate {
	if i != nil {
		vpru.SetEndSeconds(*i)
	}
	return vpru
}

// AddEndSeconds adds i to the "end_seconds" field.
func (vpru *VideoPlayRangeUpdate) AddEndSeconds(i int) *VideoPlayRangeUpdate {
	vpru.mutation.AddEndSeconds(i)
	return vpru
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (vpru *VideoPlayRangeUpdate) ClearEndSeconds() *VideoPlayRangeUpdate {
	vpru.mutation.ClearEndSeconds()
	return vpru
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (vpru *VideoPlayRangeUpdate) SetVideoID(id string) *VideoPlayRangeUpdate {
	vpru.mutation.SetVideoID(id)
	return vpru
}

// SetVideo sets the "video" edge to the Video entity.
func (vpru *VideoPlayRangeUpdate) SetVideo(v *Video) *VideoPlayRangeUpdate {
	return vpru.SetVideoID(v.ID)
}

// Mutation returns the VideoPlayRangeMutation object of the builder.
func (vpru *VideoPlayRangeUpdate) Mutation() *VideoPlayRangeMutation {
	return vpru.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vpru *VideoPlayRangeUpdate) ClearVideo() *VideoPlayRangeUpdate {
	vpru.mutation.ClearVideo()
	return vpru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpru *VideoPlayRangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vpru.sqlSave, vpru.mutation, vpru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpru *VideoPlayRangeUpdate) SaveX(ctx context.Context) int {
	affected, err := vpru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpru *VideoPlayRangeUpdate) Exec(ctx context.Context) error {
	_, err := vpru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpru *VideoPlayRangeUpdate) ExecX(ctx context.Context) {
	if err := vpru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpru *VideoPlayRangeUpdate) check() error {
	if _, ok := vpru.mutation.VideoID(); vpru.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VideoPlayRange.video"`)
	}
	return nil
}

func (vpru *VideoPlayRangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vpru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoplayrange.Table, videoplayrange.Columns, sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString))
	if ps := vpru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpru.mutation.StartSeconds(); ok {
		_spec.SetField(videoplayrange.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vpru.mutation.AddedStartSeconds(); ok {
		_spec.AddField(videoplayrange.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vpru.mutation.EndSeconds(); ok {
		_spec.SetField(videoplayrange.FieldEndSeconds, field.TypeInt, value)
	}
	if value, ok := vpru.mutation.AddedEndSeconds(); ok {
		_spec.AddField(videoplayrange.FieldEndSeconds, field.TypeInt, value)
	}
	if vpru.mutation.EndSecondsCleared() {
		_spec.ClearField(videoplayrange.FieldEndSeconds, field.TypeInt)
	}
	if vpru.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoplayrange.VideoTable,
			Columns: []string{videoplayrange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpru.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoplayrange.VideoTable,
			Columns: []string{videoplayrange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vpru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoplayrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpru.mutation.done = true
	return n, nil
}

// VideoPlayRangeUpdateOne is the builder for updating a single VideoPlayRange entity.
type VideoPlayRangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoPlayRangeMutation
}

// SetStartSeconds sets the "start_seconds" field.
func (vpruo *VideoPlayRangeUpdateOne) SetStartSeconds(i int) *VideoPlayRangeUpdateOne {
	vpruo.mutation.ResetStartSeconds()
	vpruo.mutation.SetStartSeconds(i)
	return vpruo
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (vpruo *VideoPlayRangeUpdateOne) SetNillableStartSeconds(i *int) *VideoPlayRangeUpdateOne {
	if i != nil {
		vpruo.SetStartSeconds(*i)
	}
	return vpruo
}

// AddStartSeconds adds i to the "start_seconds" field.
func (vpruo *VideoPlayRangeUpdateOne) AddStartSeconds(i int) *VideoPlayRangeUpdateOne {
	vpruo.mutation.AddStartSeconds(i)
	return vpruo
}

// SetEndSeconds sets the "end_seconds" field.
func (vpruo *VideoPlayRangeUpdateOne) SetEndSeconds(i int) *VideoPlayRangeUpdateOne {
	vpruo.mutation.ResetEndSeconds()
	vpruo.mutation.SetEndSeconds(i)
	return vpruo
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (vpruo *VideoPlayRangeUpdateOne) SetNillableEndSeconds(i *int) *VideoPlayRangeUpdateOne {
	if i != nil {
		vpruo.SetEndSeconds(*i)
	}
	return vpruo
}

// AddEndSeconds adds i to the "end_seconds" field.
func (vpruo *VideoPlayRangeUpdateOne) AddEndSeconds(i int) *VideoPlayRangeUpdateOne {
	vpruo.mutation.AddEndSeconds(i)
	return vpruo
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (vpruo *VideoPlayRangeUpdateOne) ClearEndSeconds() *VideoPlayRangeUpdateOne {
	vpruo.mutation.ClearEndSeconds()
	return vpruo
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (vpruo *VideoPlayRangeUpdateOne) SetVideoID(id string) *VideoPlayRangeUpdateOne {
	vpruo.mutation.SetVideoID(id)
	return vpruo
}

// SetVideo sets the "video" edge to the Video entity.
func (vpruo *VideoPlayRangeUpdateOne) SetVideo(v *Video) *VideoPlayRangeUpdateOne {
	return vpruo.SetVideoID(v.ID)
}

// Mutation returns the VideoPlayRangeMutation object of the builder.
func (vpruo *VideoPlayRangeUpdateOne) Mutation() *VideoPlayRangeMutation {
	return vpruo.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vpruo *VideoPlayRangeUpdateOne) ClearVideo() *VideoPlayRangeUpdateOne {
	vpruo.mutation.ClearVideo()
	return vpruo
}

// Where appends a list predicates to the VideoPlayRangeUpdate builder.
func (vpruo *VideoPlayRangeUpdateOne) Where(ps ...predicate.VideoPlayRange) *VideoPlayRangeUpdateOne {
	vpruo.mutation.Where(ps...)
	return vpruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpruo *VideoPlayRangeUpdateOne) Select(field string, fields ...string) *VideoPlayRangeUpdateOne {
	vpruo.fields = append([]string{field}, fields...)
	return vpruo
}

// Save executes the query and returns the updated VideoPlayRange entity.
func (vpruo *VideoPlayRangeUpdateOne) Save(ctx context.Context) (*VideoPlayRange, error) {
	return withHooks(ctx, vpruo.sqlSave, vpruo.mutation, vpruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpruo *VideoPlayRangeUpdateOne) SaveX(ctx context.Context) *VideoPlayRange {
	node, err := vpruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpruo *VideoPlayRangeUpdateOne) Exec(ctx context.Context) error {
	_, err := vpruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpruo *VideoPlayRangeUpdateOne) ExecX(ctx context.Context) {
	if err := vpruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpruo *VideoPlayRangeUpdateOne) check() error {
	if _, ok := vpruo.mutation.VideoID(); vpruo.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VideoPlayRange.video"`)
	}
	return nil
}

func (vpruo *VideoPlayRangeUpdateOne) sqlSave(ctx context.Context) (_node *VideoPlayRange, err error) {
	if err := vpruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoplayrange.Table, videoplayrange.Columns, sqlgraph.NewFieldSpec(videoplayrange.FieldID, field.TypeString))
	id, ok := vpruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoPlayRange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videoplayrange.FieldID)
		for _, f := range fields {
			if !videoplayrange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videoplayrange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpruo.mutation.StartSeconds(); ok {
		_spec.SetField(videoplayrange.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vpruo.mutation.AddedStartSeconds(); ok {
		_spec.AddField(videoplayrange.FieldStartSeconds, field.TypeInt, value)
	}
	if value, ok := vpruo.mutation.EndSeconds(); ok {
		_spec.SetField(videoplayrange.FieldEndSeconds, field.TypeInt, value)
	}
	if value, ok := vpruo.mutation.AddedEndSeconds(); ok {
		_spec.AddField(videoplayrange.FieldEndSeconds, field.TypeInt, value)
	}
	if vpruo.mutation.EndSecondsCleared() {
		_spec.ClearField(videoplayrange.FieldEndSeconds, field.TypeInt)
	}
	if vpruo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoplayrange.VideoTable,
			Columns: []string{videoplayrange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpruo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoplayrange.VideoTable,
			Columns: []string{videoplayrange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoPlayRange{config: vpruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoplayrange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpruo.mutation.done = true
	return _node, nil
}
