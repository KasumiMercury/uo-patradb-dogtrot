// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotag"
)

// VideoTagCreate is the builder for creating a VideoTag entity.
type VideoTagCreate struct {
	config
	mutation *VideoTagMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (vtc *VideoTagCreate) SetTitle(s string) *VideoTagCreate {
	vtc.mutation.SetTitle(s)
	return vtc
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vtc *VideoTagCreate) SetNormalizedTitle(s string) *VideoTagCreate {
	vtc.mutation.SetNormalizedTitle(s)
	return vtc
}

// SetSeriesNumbering sets the "series_numbering" field.
func (vtc *VideoTagCreate) SetSeriesNumbering(i int) *VideoTagCreate {
	vtc.mutation.SetSeriesNumbering(i)
	return vtc
}

// SetNillableSeriesNumbering sets the "series_numbering" field if the given value is not nil.
func (vtc *VideoTagCreate) SetNillableSeriesNumbering(i *int) *VideoTagCreate {
	if i != nil {
		vtc.SetSeriesNumbering(*i)
	}
	return vtc
}

// SetID sets the "id" field.
func (vtc *VideoTagCreate) SetID(s string) *VideoTagCreate {
	vtc.mutation.SetID(s)
	return vtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vtc *VideoTagCreate) SetNillableID(s *string) *VideoTagCreate {
	if s != nil {
		vtc.SetID(*s)
	}
	return vtc
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (vtc *VideoTagCreate) AddVideoIDs(ids ...string) *VideoTagCreate {
	vtc.mutation.AddVideoIDs(ids...)
	return vtc
}

// AddVideos adds the "videos" edges to the Video entity.
func (vtc *VideoTagCreate) AddVideos(v ...*Video) *VideoTagCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtc.AddVideoIDs(ids...)
}

// Mutation returns the VideoTagMutation object of the builder.
func (vtc *VideoTagCreate) Mutation() *VideoTagMutation {
	return vtc.mutation
}

// Save creates the VideoTag in the database.
func (vtc *VideoTagCreate) Save(ctx context.Context) (*VideoTag, error) {
	vtc.defaults()
	return withHooks(ctx, vtc.sqlSave, vtc.mutation, vtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vtc *VideoTagCreate) SaveX(ctx context.Context) *VideoTag {
	v, err := vtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtc *VideoTagCreate) Exec(ctx context.Context) error {
	_, err := vtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtc *VideoTagCreate) ExecX(ctx context.Context) {
	if err := vtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vtc *VideoTagCreate) defaults() {
	if _, ok := vtc.mutation.ID(); !ok {
		v := videotag.DefaultID()
		vtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtc *VideoTagCreate) check() error {
	if _, ok := vtc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "VideoTag.title"`)}
	}
	if v, ok := vtc.mutation.Title(); ok {
		if err := videotag.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.title": %w`, err)}
		}
	}
	if _, ok := vtc.mutation.NormalizedTitle(); !ok {
		return &ValidationError{Name: "normalized_title", err: errors.New(`ent: missing required field "VideoTag.normalized_title"`)}
	}
	if v, ok := vtc.mutation.NormalizedTitle(); ok {
		if err := videotag.NormalizedTitleValidator(v); err != nil {
			return &ValidationError{Name: "normalized_title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.normalized_title": %w`, err)}
		}
	}
	if v, ok := vtc.mutation.SeriesNumbering(); ok {
		if err := videotag.SeriesNumberingValidator(v); err != nil {
			return &ValidationError{Name: "series_numbering", err: fmt.Errorf(`ent: validator failed for field "VideoTag.series_numbering": %w`, err)}
		}
	}
	if v, ok := vtc.mutation.ID(); ok {
		if err := videotag.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "VideoTag.id": %w`, err)}
		}
	}
	return nil
}

func (vtc *VideoTagCreate) sqlSave(ctx context.Context) (*VideoTag, error) {
	if err := vtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VideoTag.ID type: %T", _spec.ID.Value)
		}
	}
	vtc.mutation.id = &_node.ID
	vtc.mutation.done = true
	return _node, nil
}

func (vtc *VideoTagCreate) createSpec() (*VideoTag, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoTag{config: vtc.config}
		_spec = sqlgraph.NewCreateSpec(videotag.Table, sqlgraph.NewFieldSpec(videotag.FieldID, field.TypeString))
	)
	if id, ok := vtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vtc.mutation.Title(); ok {
		_spec.SetField(videotag.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := vtc.mutation.NormalizedTitle(); ok {
		_spec.SetField(videotag.FieldNormalizedTitle, field.TypeString, value)
		_node.NormalizedTitle = value
	}
	if value, ok := vtc.mutation.SeriesNumbering(); ok {
		_spec.SetField(videotag.FieldSeriesNumbering, field.TypeInt, value)
		_node.SeriesNumbering = value
	}
	if nodes := vtc.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoTagCreateBulk is the builder for creating many VideoTag entities in bulk.
type VideoTagCreateBulk struct {
	config
	err      error
	builders []*VideoTagCreate
}

// Save creates the VideoTag entities in the database.
func (vtcb *VideoTagCreateBulk) Save(ctx context.Context) ([]*VideoTag, error) {
	if vtcb.err != nil {
		return nil, vtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vtcb.builders))
	nodes := make([]*VideoTag, len(vtcb.builders))
	mutators := make([]Mutator, len(vtcb.builders))
	for i := range vtcb.builders {
		func(i int, root context.Context) {
			builder := vtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vtcb *VideoTagCreateBulk) SaveX(ctx context.Context) []*VideoTag {
	v, err := vtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtcb *VideoTagCreateBulk) Exec(ctx context.Context) error {
	_, err := vtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcb *VideoTagCreateBulk) ExecX(ctx context.Context) {
	if err := vtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
