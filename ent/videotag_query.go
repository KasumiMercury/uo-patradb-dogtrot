// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotag"
)

// VideoTagQuery is the builder for querying VideoTag entities.
type VideoTagQuery struct {
	config
	ctx        *QueryContext
	order      []videotag.OrderOption
	inters     []Interceptor
	predicates []predicate.VideoTag
	withVideos *VideoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VideoTagQuery builder.
func (vtq *VideoTagQuery) Where(ps ...predicate.VideoTag) *VideoTagQuery {
	vtq.predicates = append(vtq.predicates, ps...)
	return vtq
}

// Limit the number of records to be returned by this query.
func (vtq *VideoTagQuery) Limit(limit int) *VideoTagQuery {
	vtq.ctx.Limit = &limit
	return vtq
}

// Offset to start from.
func (vtq *VideoTagQuery) Offset(offset int) *VideoTagQuery {
	vtq.ctx.Offset = &offset
	return vtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vtq *VideoTagQuery) Unique(unique bool) *VideoTagQuery {
	vtq.ctx.Unique = &unique
	return vtq
}

// Order specifies how the records should be ordered.
func (vtq *VideoTagQuery) Order(o ...videotag.OrderOption) *VideoTagQuery {
	vtq.order = append(vtq.order, o...)
	return vtq
}

// QueryVideos chains the current query on the "videos" edge.
func (vtq *VideoTagQuery) QueryVideos() *VideoQuery {
	query := (&VideoClient{config: vtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videotag.Table, videotag.FieldID, selector),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, videotag.VideosTable, videotag.VideosPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(vtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VideoTag entity from the query.
// Returns a *NotFoundError when no VideoTag was found.
func (vtq *VideoTagQuery) First(ctx context.Context) (*VideoTag, error) {
	nodes, err := vtq.Limit(1).All(setContextOp(ctx, vtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{videotag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vtq *VideoTagQuery) FirstX(ctx context.Context) *VideoTag {
	node, err := vtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VideoTag ID from the query.
// Returns a *NotFoundError when no VideoTag ID was found.
func (vtq *VideoTagQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vtq.Limit(1).IDs(setContextOp(ctx, vtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{videotag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vtq *VideoTagQuery) FirstIDX(ctx context.Context) string {
	id, err := vtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VideoTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VideoTag entity is found.
// Returns a *NotFoundError when no VideoTag entities are found.
func (vtq *VideoTagQuery) Only(ctx context.Context) (*VideoTag, error) {
	nodes, err := vtq.Limit(2).All(setContextOp(ctx, vtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{videotag.Label}
	default:
		return nil, &NotSingularError{videotag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vtq *VideoTagQuery) OnlyX(ctx context.Context) *VideoTag {
	node, err := vtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VideoTag ID in the query.
// Returns a *NotSingularError when more than one VideoTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (vtq *VideoTagQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vtq.Limit(2).IDs(setContextOp(ctx, vtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{videotag.Label}
	default:
		err = &NotSingularError{videotag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vtq *VideoTagQuery) OnlyIDX(ctx context.Context) string {
	id, err := vtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VideoTags.
func (vtq *VideoTagQuery) All(ctx context.Context) ([]*VideoTag, error) {
	ctx = setContextOp(ctx, vtq.ctx, "All")
	if err := vtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VideoTag, *VideoTagQuery]()
	return withInterceptors[[]*VideoTag](ctx, vtq, qr, vtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vtq *VideoTagQuery) AllX(ctx context.Context) []*VideoTag {
	nodes, err := vtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VideoTag IDs.
func (vtq *VideoTagQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vtq.ctx.Unique == nil && vtq.path != nil {
		vtq.Unique(true)
	}
	ctx = setContextOp(ctx, vtq.ctx, "IDs")
	if err = vtq.Select(videotag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vtq *VideoTagQuery) IDsX(ctx context.Context) []string {
	ids, err := vtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vtq *VideoTagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vtq.ctx, "Count")
	if err := vtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vtq, querierCount[*VideoTagQuery](), vtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vtq *VideoTagQuery) CountX(ctx context.Context) int {
	count, err := vtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vtq *VideoTagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vtq.ctx, "Exist")
	switch _, err := vtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vtq *VideoTagQuery) ExistX(ctx context.Context) bool {
	exist, err := vtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VideoTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vtq *VideoTagQuery) Clone() *VideoTagQuery {
	if vtq == nil {
		return nil
	}
	return &VideoTagQuery{
		config:     vtq.config,
		ctx:        vtq.ctx.Clone(),
		order:      append([]videotag.OrderOption{}, vtq.order...),
		inters:     append([]Interceptor{}, vtq.inters...),
		predicates: append([]predicate.VideoTag{}, vtq.predicates...),
		withVideos: vtq.withVideos.Clone(),
		// clone intermediate query.
		sql:  vtq.sql.Clone(),
		path: vtq.path,
	}
}

// WithVideos tells the query-builder to eager-load the nodes that are connected to
// the "videos" edge. The optional arguments are used to configure the query builder of the edge.
func (vtq *VideoTagQuery) WithVideos(opts ...func(*VideoQuery)) *VideoTagQuery {
	query := (&VideoClient{config: vtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vtq.withVideos = query
	return vtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VideoTag.Query().
//		GroupBy(videotag.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vtq *VideoTagQuery) GroupBy(field string, fields ...string) *VideoTagGroupBy {
	vtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VideoTagGroupBy{build: vtq}
	grbuild.flds = &vtq.ctx.Fields
	grbuild.label = videotag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.VideoTag.Query().
//		Select(videotag.FieldTitle).
//		Scan(ctx, &v)
func (vtq *VideoTagQuery) Select(fields ...string) *VideoTagSelect {
	vtq.ctx.Fields = append(vtq.ctx.Fields, fields...)
	sbuild := &VideoTagSelect{VideoTagQuery: vtq}
	sbuild.label = videotag.Label
	sbuild.flds, sbuild.scan = &vtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VideoTagSelect configured with the given aggregations.
func (vtq *VideoTagQuery) Aggregate(fns ...AggregateFunc) *VideoTagSelect {
	return vtq.Select().Aggregate(fns...)
}

func (vtq *VideoTagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vtq); err != nil {
				return err
			}
		}
	}
	for _, f := range vtq.ctx.Fields {
		if !videotag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vtq.path != nil {
		prev, err := vtq.path(ctx)
		if err != nil {
			return err
		}
		vtq.sql = prev
	}
	return nil
}

func (vtq *VideoTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VideoTag, error) {
	var (
		nodes       = []*VideoTag{}
		_spec       = vtq.querySpec()
		loadedTypes = [1]bool{
			vtq.withVideos != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VideoTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VideoTag{config: vtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vtq.withVideos; query != nil {
		if err := vtq.loadVideos(ctx, query, nodes,
			func(n *VideoTag) { n.Edges.Videos = []*Video{} },
			func(n *VideoTag, e *Video) { n.Edges.Videos = append(n.Edges.Videos, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vtq *VideoTagQuery) loadVideos(ctx context.Context, query *VideoQuery, nodes []*VideoTag, init func(*VideoTag), assign func(*VideoTag, *Video)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*VideoTag)
	nids := make(map[string]map[*VideoTag]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(videotag.VideosTable)
		s.Join(joinT).On(s.C(video.FieldID), joinT.C(videotag.VideosPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(videotag.VideosPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(videotag.VideosPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*VideoTag]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Video](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "videos" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (vtq *VideoTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vtq.querySpec()
	_spec.Node.Columns = vtq.ctx.Fields
	if len(vtq.ctx.Fields) > 0 {
		_spec.Unique = vtq.ctx.Unique != nil && *vtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vtq.driver, _spec)
}

func (vtq *VideoTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(videotag.Table, videotag.Columns, sqlgraph.NewFieldSpec(videotag.FieldID, field.TypeString))
	_spec.From = vtq.sql
	if unique := vtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vtq.path != nil {
		_spec.Unique = true
	}
	if fields := vtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videotag.FieldID)
		for i := range fields {
			if fields[i] != videotag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vtq *VideoTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vtq.driver.Dialect())
	t1 := builder.Table(videotag.Table)
	columns := vtq.ctx.Fields
	if len(columns) == 0 {
		columns = videotag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vtq.sql != nil {
		selector = vtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vtq.ctx.Unique != nil && *vtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vtq.predicates {
		p(selector)
	}
	for _, p := range vtq.order {
		p(selector)
	}
	if offset := vtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VideoTagGroupBy is the group-by builder for VideoTag entities.
type VideoTagGroupBy struct {
	selector
	build *VideoTagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vtgb *VideoTagGroupBy) Aggregate(fns ...AggregateFunc) *VideoTagGroupBy {
	vtgb.fns = append(vtgb.fns, fns...)
	return vtgb
}

// Scan applies the selector query and scans the result into the given value.
func (vtgb *VideoTagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vtgb.build.ctx, "GroupBy")
	if err := vtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoTagQuery, *VideoTagGroupBy](ctx, vtgb.build, vtgb, vtgb.build.inters, v)
}

func (vtgb *VideoTagGroupBy) sqlScan(ctx context.Context, root *VideoTagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vtgb.fns))
	for _, fn := range vtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vtgb.flds)+len(vtgb.fns))
		for _, f := range *vtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VideoTagSelect is the builder for selecting fields of VideoTag entities.
type VideoTagSelect struct {
	*VideoTagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vts *VideoTagSelect) Aggregate(fns ...AggregateFunc) *VideoTagSelect {
	vts.fns = append(vts.fns, fns...)
	return vts
}

// Scan applies the selector query and scans the result into the given value.
func (vts *VideoTagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vts.ctx, "Select")
	if err := vts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideoTagQuery, *VideoTagSelect](ctx, vts.VideoTagQuery, vts, vts.inters, v)
}

func (vts *VideoTagSelect) sqlScan(ctx context.Context, root *VideoTagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vts.fns))
	for _, fn := range vts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
