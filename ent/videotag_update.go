// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotag"
)

// VideoTagUpdate is the builder for updating VideoTag entities.
type VideoTagUpdate struct {
	config
	hooks    []Hook
	mutation *VideoTagMutation
}

// Where appends a list predicates to the VideoTagUpdate builder.
func (vtu *VideoTagUpdate) Where(ps ...predicate.VideoTag) *VideoTagUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetTitle sets the "title" field.
func (vtu *VideoTagUpdate) SetTitle(s string) *VideoTagUpdate {
	vtu.mutation.SetTitle(s)
	return vtu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vtu *VideoTagUpdate) SetNillableTitle(s *string) *VideoTagUpdate {
	if s != nil {
		vtu.SetTitle(*s)
	}
	return vtu
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vtu *VideoTagUpdate) SetNormalizedTitle(s string) *VideoTagUpdate {
	vtu.mutation.SetNormalizedTitle(s)
	return vtu
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vtu *VideoTagUpdate) SetNillableNormalizedTitle(s *string) *VideoTagUpdate {
	if s != nil {
		vtu.SetNormalizedTitle(*s)
	}
	return vtu
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (vtu *VideoTagUpdate) AddVideoIDs(ids ...string) *VideoTagUpdate {
	vtu.mutation.AddVideoIDs(ids...)
	return vtu
}

// AddVideos adds the "videos" edges to the Video entity.
func (vtu *VideoTagUpdate) AddVideos(v ...*Video) *VideoTagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtu.AddVideoIDs(ids...)
}

// Mutation returns the VideoTagMutation object of the builder.
func (vtu *VideoTagUpdate) Mutation() *VideoTagMutation {
	return vtu.mutation
}

// ClearVideos clears all "videos" edges to the Video entity.
func (vtu *VideoTagUpdate) ClearVideos() *VideoTagUpdate {
	vtu.mutation.ClearVideos()
	return vtu
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (vtu *VideoTagUpdate) RemoveVideoIDs(ids ...string) *VideoTagUpdate {
	vtu.mutation.RemoveVideoIDs(ids...)
	return vtu
}

// RemoveVideos removes "videos" edges to Video entities.
func (vtu *VideoTagUpdate) RemoveVideos(v ...*Video) *VideoTagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtu.RemoveVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *VideoTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *VideoTagUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *VideoTagUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *VideoTagUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtu *VideoTagUpdate) check() error {
	if v, ok := vtu.mutation.Title(); ok {
		if err := videotag.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.title": %w`, err)}
		}
	}
	if v, ok := vtu.mutation.NormalizedTitle(); ok {
		if err := videotag.NormalizedTitleValidator(v); err != nil {
			return &ValidationError{Name: "normalized_title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.normalized_title": %w`, err)}
		}
	}
	return nil
}

func (vtu *VideoTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videotag.Table, videotag.Columns, sqlgraph.NewFieldSpec(videotag.FieldID, field.TypeString))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.Title(); ok {
		_spec.SetField(videotag.FieldTitle, field.TypeString, value)
	}
	if value, ok := vtu.mutation.NormalizedTitle(); ok {
		_spec.SetField(videotag.FieldNormalizedTitle, field.TypeString, value)
	}
	if vtu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !vtu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videotag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// VideoTagUpdateOne is the builder for updating a single VideoTag entity.
type VideoTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoTagMutation
}

// SetTitle sets the "title" field.
func (vtuo *VideoTagUpdateOne) SetTitle(s string) *VideoTagUpdateOne {
	vtuo.mutation.SetTitle(s)
	return vtuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vtuo *VideoTagUpdateOne) SetNillableTitle(s *string) *VideoTagUpdateOne {
	if s != nil {
		vtuo.SetTitle(*s)
	}
	return vtuo
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vtuo *VideoTagUpdateOne) SetNormalizedTitle(s string) *VideoTagUpdateOne {
	vtuo.mutation.SetNormalizedTitle(s)
	return vtuo
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vtuo *VideoTagUpdateOne) SetNillableNormalizedTitle(s *string) *VideoTagUpdateOne {
	if s != nil {
		vtuo.SetNormalizedTitle(*s)
	}
	return vtuo
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (vtuo *VideoTagUpdateOne) AddVideoIDs(ids ...string) *VideoTagUpdateOne {
	vtuo.mutation.AddVideoIDs(ids...)
	return vtuo
}

// AddVideos adds the "videos" edges to the Video entity.
func (vtuo *VideoTagUpdateOne) AddVideos(v ...*Video) *VideoTagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtuo.AddVideoIDs(ids...)
}

// Mutation returns the VideoTagMutation object of the builder.
func (vtuo *VideoTagUpdateOne) Mutation() *VideoTagMutation {
	return vtuo.mutation
}

// ClearVideos clears all "videos" edges to the Video entity.
func (vtuo *VideoTagUpdateOne) ClearVideos() *VideoTagUpdateOne {
	vtuo.mutation.ClearVideos()
	return vtuo
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (vtuo *VideoTagUpdateOne) RemoveVideoIDs(ids ...string) *VideoTagUpdateOne {
	vtuo.mutation.RemoveVideoIDs(ids...)
	return vtuo
}

// RemoveVideos removes "videos" edges to Video entities.
func (vtuo *VideoTagUpdateOne) RemoveVideos(v ...*Video) *VideoTagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vtuo.RemoveVideoIDs(ids...)
}

// Where appends a list predicates to the VideoTagUpdate builder.
func (vtuo *VideoTagUpdateOne) Where(ps ...predicate.VideoTag) *VideoTagUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *VideoTagUpdateOne) Select(field string, fields ...string) *VideoTagUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated VideoTag entity.
func (vtuo *VideoTagUpdateOne) Save(ctx context.Context) (*VideoTag, error) {
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *VideoTagUpdateOne) SaveX(ctx context.Context) *VideoTag {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *VideoTagUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *VideoTagUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtuo *VideoTagUpdateOne) check() error {
	if v, ok := vtuo.mutation.Title(); ok {
		if err := videotag.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.title": %w`, err)}
		}
	}
	if v, ok := vtuo.mutation.NormalizedTitle(); ok {
		if err := videotag.NormalizedTitleValidator(v); err != nil {
			return &ValidationError{Name: "normalized_title", err: fmt.Errorf(`ent: validator failed for field "VideoTag.normalized_title": %w`, err)}
		}
	}
	return nil
}

func (vtuo *VideoTagUpdateOne) sqlSave(ctx context.Context) (_node *VideoTag, err error) {
	if err := vtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videotag.Table, videotag.Columns, sqlgraph.NewFieldSpec(videotag.FieldID, field.TypeString))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videotag.FieldID)
		for _, f := range fields {
			if !videotag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videotag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.Title(); ok {
		_spec.SetField(videotag.FieldTitle, field.TypeString, value)
	}
	if value, ok := vtuo.mutation.NormalizedTitle(); ok {
		_spec.SetField(videotag.FieldNormalizedTitle, field.TypeString, value)
	}
	if vtuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !vtuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   videotag.VideosTable,
			Columns: videotag.VideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoTag{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videotag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}
