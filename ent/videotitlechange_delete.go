// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotitlechange"
)

// VideoTitleChangeDelete is the builder for deleting a VideoTitleChange entity.
type VideoTitleChangeDelete struct {
	config
	hooks    []Hook
	mutation *VideoTitleChangeMutation
}

// Where appends a list predicates to the VideoTitleChangeDelete builder.
func (vtcd *VideoTitleChangeDelete) Where(ps ...predicate.VideoTitleChange) *VideoTitleChangeDelete {
	vtcd.mutation.Where(ps...)
	return vtcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vtcd *VideoTitleChangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vtcd.sqlExec, vtcd.mutation, vtcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcd *VideoTitleChangeDelete) ExecX(ctx context.Context) int {
	n, err := vtcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vtcd *VideoTitleChangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(videotitlechange.Table, sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString))
	if ps := vtcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vtcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vtcd.mutation.done = true
	return affected, err
}

// VideoTitleChangeDeleteOne is the builder for deleting a single VideoTitleChange entity.
type VideoTitleChangeDeleteOne struct {
	vtcd *VideoTitleChangeDelete
}

// Where appends a list predicates to the VideoTitleChangeDelete builder.
func (vtcdo *VideoTitleChangeDeleteOne) Where(ps ...predicate.VideoTitleChange) *VideoTitleChangeDeleteOne {
	vtcdo.vtcd.mutation.Where(ps...)
	return vtcdo
}

// Exec executes the deletion query.
func (vtcdo *VideoTitleChangeDeleteOne) Exec(ctx context.Context) error {
	n, err := vtcdo.vtcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{videotitlechange.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcdo *VideoTitleChangeDeleteOne) ExecX(ctx context.Context) {
	if err := vtcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
