// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/predicate"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/video"
	"github.com/KasumiMercury/uo-patradb-dogtrot/ent/videotitlechange"
)

// VideoTitleChangeUpdate is the builder for updating VideoTitleChange entities.
type VideoTitleChangeUpdate struct {
	config
	hooks    []Hook
	mutation *VideoTitleChangeMutation
}

// Where appends a list predicates to the VideoTitleChangeUpdate builder.
func (vtcu *VideoTitleChangeUpdate) Where(ps ...predicate.VideoTitleChange) *VideoTitleChangeUpdate {
	vtcu.mutation.Where(ps...)
	return vtcu
}

// SetTitle sets the "title" field.
func (vtcu *VideoTitleChangeUpdate) SetTitle(s string) *VideoTitleChangeUpdate {
	vtcu.mutation.SetTitle(s)
	return vtcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vtcu *VideoTitleChangeUpdate) SetNillableTitle(s *string) *VideoTitleChangeUpdate {
	if s != nil {
		vtcu.SetTitle(*s)
	}
	return vtcu
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vtcu *VideoTitleChangeUpdate) SetNormalizedTitle(s string) *VideoTitleChangeUpdate {
	vtcu.mutation.SetNormalizedTitle(s)
	return vtcu
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vtcu *VideoTitleChangeUpdate) SetNillableNormalizedTitle(s *string) *VideoTitleChangeUpdate {
	if s != nil {
		vtcu.SetNormalizedTitle(*s)
	}
	return vtcu
}

// ClearNormalizedTitle clears the value of the "normalized_title" field.
func (vtcu *VideoTitleChangeUpdate) ClearNormalizedTitle() *VideoTitleChangeUpdate {
	vtcu.mutation.ClearNormalizedTitle()
	return vtcu
}

// SetChangedAt sets the "changed_at" field.
func (vtcu *VideoTitleChangeUpdate) SetChangedAt(t time.Time) *VideoTitleChangeUpdate {
	vtcu.mutation.SetChangedAt(t)
	return vtcu
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (vtcu *VideoTitleChangeUpdate) SetNillableChangedAt(t *time.Time) *VideoTitleChangeUpdate {
	if t != nil {
		vtcu.SetChangedAt(*t)
	}
	return vtcu
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (vtcu *VideoTitleChangeUpdate) SetVideoID(id string) *VideoTitleChangeUpdate {
	vtcu.mutation.SetVideoID(id)
	return vtcu
}

// SetVideo sets the "video" edge to the Video entity.
func (vtcu *VideoTitleChangeUpdate) SetVideo(v *Video) *VideoTitleChangeUpdate {
	return vtcu.SetVideoID(v.ID)
}

// Mutation returns the VideoTitleChangeMutation object of the builder.
func (vtcu *VideoTitleChangeUpdate) Mutation() *VideoTitleChangeMutation {
	return vtcu.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vtcu *VideoTitleChangeUpdate) ClearVideo() *VideoTitleChangeUpdate {
	vtcu.mutation.ClearVideo()
	return vtcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtcu *VideoTitleChangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtcu.sqlSave, vtcu.mutation, vtcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtcu *VideoTitleChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := vtcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtcu *VideoTitleChangeUpdate) Exec(ctx context.Context) error {
	_, err := vtcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcu *VideoTitleChangeUpdate) ExecX(ctx context.Context) {
	if err := vtcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtcu *VideoTitleChangeUpdate) check() error {
	if v, ok := vtcu.mutation.Title(); ok {
		if err := videotitlechange.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "VideoTitleChange.title": %w`, err)}
		}
	}
	if _, ok := vtcu.mutation.VideoID(); vtcu.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VideoTitleChange.video"`)
	}
	return nil
}

func (vtcu *VideoTitleChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videotitlechange.Table, videotitlechange.Columns, sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString))
	if ps := vtcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtcu.mutation.Title(); ok {
		_spec.SetField(videotitlechange.FieldTitle, field.TypeString, value)
	}
	if value, ok := vtcu.mutation.NormalizedTitle(); ok {
		_spec.SetField(videotitlechange.FieldNormalizedTitle, field.TypeString, value)
	}
	if vtcu.mutation.NormalizedTitleCleared() {
		_spec.ClearField(videotitlechange.FieldNormalizedTitle, field.TypeString)
	}
	if value, ok := vtcu.mutation.ChangedAt(); ok {
		_spec.SetField(videotitlechange.FieldChangedAt, field.TypeTime, value)
	}
	if vtcu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videotitlechange.VideoTable,
			Columns: []string{videotitlechange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtcu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videotitlechange.VideoTable,
			Columns: []string{videotitlechange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videotitlechange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtcu.mutation.done = true
	return n, nil
}

// VideoTitleChangeUpdateOne is the builder for updating a single VideoTitleChange entity.
type VideoTitleChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoTitleChangeMutation
}

// SetTitle sets the "title" field.
func (vtcuo *VideoTitleChangeUpdateOne) SetTitle(s string) *VideoTitleChangeUpdateOne {
	vtcuo.mutation.SetTitle(s)
	return vtcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vtcuo *VideoTitleChangeUpdateOne) SetNillableTitle(s *string) *VideoTitleChangeUpdateOne {
	if s != nil {
		vtcuo.SetTitle(*s)
	}
	return vtcuo
}

// SetNormalizedTitle sets the "normalized_title" field.
func (vtcuo *VideoTitleChangeUpdateOne) SetNormalizedTitle(s string) *VideoTitleChangeUpdateOne {
	vtcuo.mutation.SetNormalizedTitle(s)
	return vtcuo
}

// SetNillableNormalizedTitle sets the "normalized_title" field if the given value is not nil.
func (vtcuo *VideoTitleChangeUpdateOne) SetNillableNormalizedTitle(s *string) *VideoTitleChangeUpdateOne {
	if s != nil {
		vtcuo.SetNormalizedTitle(*s)
	}
	return vtcuo
}

// ClearNormalizedTitle clears the value of the "normalized_title" field.
func (vtcuo *VideoTitleChangeUpdateOne) ClearNormalizedTitle() *VideoTitleChangeUpdateOne {
	vtcuo.mutation.ClearNormalizedTitle()
	return vtcuo
}

// SetChangedAt sets the "changed_at" field.
func (vtcuo *VideoTitleChangeUpdateOne) SetChangedAt(t time.Time) *VideoTitleChangeUpdateOne {
	vtcuo.mutation.SetChangedAt(t)
	return vtcuo
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (vtcuo *VideoTitleChangeUpdateOne) SetNillableChangedAt(t *time.Time) *VideoTitleChangeUpdateOne {
	if t != nil {
		vtcuo.SetChangedAt(*t)
	}
	return vtcuo
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (vtcuo *VideoTitleChangeUpdateOne) SetVideoID(id string) *VideoTitleChangeUpdateOne {
	vtcuo.mutation.SetVideoID(id)
	return vtcuo
}

// SetVideo sets the "video" edge to the Video entity.
func (vtcuo *VideoTitleChangeUpdateOne) SetVideo(v *Video) *VideoTitleChangeUpdateOne {
	return vtcuo.SetVideoID(v.ID)
}

// Mutation returns the VideoTitleChangeMutation object of the builder.
func (vtcuo *VideoTitleChangeUpdateOne) Mutation() *VideoTitleChangeMutation {
	return vtcuo.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (vtcuo *VideoTitleChangeUpdateOne) ClearVideo() *VideoTitleChangeUpdateOne {
	vtcuo.mutation.ClearVideo()
	return vtcuo
}

// Where appends a list predicates to the VideoTitleChangeUpdate builder.
func (vtcuo *VideoTitleChangeUpdateOne) Where(ps ...predicate.VideoTitleChange) *VideoTitleChangeUpdateOne {
	vtcuo.mutation.Where(ps...)
	return vtcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtcuo *VideoTitleChangeUpdateOne) Select(field string, fields ...string) *VideoTitleChangeUpdateOne {
	vtcuo.fields = append([]string{field}, fields...)
	return vtcuo
}

// Save executes the query and returns the updated VideoTitleChange entity.
func (vtcuo *VideoTitleChangeUpdateOne) Save(ctx context.Context) (*VideoTitleChange, error) {
	return withHooks(ctx, vtcuo.sqlSave, vtcuo.mutation, vtcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtcuo *VideoTitleChangeUpdateOne) SaveX(ctx context.Context) *VideoTitleChange {
	node, err := vtcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtcuo *VideoTitleChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := vtcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcuo *VideoTitleChangeUpdateOne) ExecX(ctx context.Context) {
	if err := vtcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtcuo *VideoTitleChangeUpdateOne) check() error {
	if v, ok := vtcuo.mutation.Title(); ok {
		if err := videotitlechange.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "VideoTitleChange.title": %w`, err)}
		}
	}
	if _, ok := vtcuo.mutation.VideoID(); vtcuo.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VideoTitleChange.video"`)
	}
	return nil
}

func (vtcuo *VideoTitleChangeUpdateOne) sqlSave(ctx context.Context) (_node *VideoTitleChange, err error) {
	if err := vtcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videotitlechange.Table, videotitlechange.Columns, sqlgraph.NewFieldSpec(videotitlechange.FieldID, field.TypeString))
	id, ok := vtcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoTitleChange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videotitlechange.FieldID)
		for _, f := range fields {
			if !videotitlechange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videotitlechange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtcuo.mutation.Title(); ok {
		_spec.SetField(videotitlechange.FieldTitle, field.TypeString, value)
	}
	if value, ok := vtcuo.mutation.NormalizedTitle(); ok {
		_spec.SetField(videotitlechange.FieldNormalizedTitle, field.TypeString, value)
	}
	if vtcuo.mutation.NormalizedTitleCleared() {
		_spec.ClearField(videotitlechange.FieldNormalizedTitle, field.TypeString)
	}
	if value, ok := vtcuo.mutation.ChangedAt(); ok {
		_spec.SetField(videotitlechange.FieldChangedAt, field.TypeTime, value)
	}
	if vtcuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videotitlechange.VideoTable,
			Columns: []string{videotitlechange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtcuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videotitlechange.VideoTable,
			Columns: []string{videotitlechange.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoTitleChange{config: vtcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videotitlechange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtcuo.mutation.done = true
	return _node, nil
}
